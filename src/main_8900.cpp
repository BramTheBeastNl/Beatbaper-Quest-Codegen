// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_TextUtilities
#include "TMPro/TMP_TextUtilities.hpp"
// Including type: TMPro.TMP_TextUtilities/LineSegment
#include "TMPro/TMP_TextUtilities_LineSegment.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: TMPro.CaretPosition
#include "TMPro/CaretPosition.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3[] m_rectWorldCorners
::Array<UnityEngine::Vector3>* TMPro::TMP_TextUtilities::_get_m_rectWorldCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::_get_m_rectWorldCorners");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("TMPro", "TMP_TextUtilities", "m_rectWorldCorners"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3[] m_rectWorldCorners
void TMPro::TMP_TextUtilities::_set_m_rectWorldCorners(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::_set_m_rectWorldCorners");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "m_rectWorldCorners", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_lookupStringL
::Il2CppString* TMPro::TMP_TextUtilities::_get_k_lookupStringL() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::_get_k_lookupStringL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "TMP_TextUtilities", "k_lookupStringL"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_lookupStringL
void TMPro::TMP_TextUtilities::_set_k_lookupStringL(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::_set_k_lookupStringL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "k_lookupStringL", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_lookupStringU
::Il2CppString* TMPro::TMP_TextUtilities::_get_k_lookupStringU() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::_get_k_lookupStringU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "TMP_TextUtilities", "k_lookupStringU"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_lookupStringU
void TMPro::TMP_TextUtilities::_set_k_lookupStringU(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::_set_k_lookupStringU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "k_lookupStringU", value));
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetCursorIndexFromPosition
int TMPro::TMP_TextUtilities::GetCursorIndexFromPosition(TMPro::TMP_Text* textComponent, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::GetCursorIndexFromPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetCursorIndexFromPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textComponent), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textComponent, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetCursorIndexFromPosition
int TMPro::TMP_TextUtilities::GetCursorIndexFromPosition(TMPro::TMP_Text* textComponent, UnityEngine::Vector3 position, UnityEngine::Camera* camera, TMPro::CaretPosition& cursor) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::GetCursorIndexFromPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetCursorIndexFromPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textComponent), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractIndependentType<TMPro::CaretPosition&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textComponent, position, camera, cursor);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestLine
int TMPro::TMP_TextUtilities::FindNearestLine(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindNearestLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestCharacterOnLine
int TMPro::TMP_TextUtilities::FindNearestCharacterOnLine(TMPro::TMP_Text* text, UnityEngine::Vector3 position, int line, UnityEngine::Camera* camera, bool visibleOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindNearestCharacterOnLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestCharacterOnLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(line), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractType(visibleOnly)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, line, camera, visibleOnly);
}
// Autogenerated method: TMPro.TMP_TextUtilities.IsIntersectingRectTransform
bool TMPro::TMP_TextUtilities::IsIntersectingRectTransform(UnityEngine::RectTransform* rectTransform, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::IsIntersectingRectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "IsIntersectingRectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rectTransform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rectTransform, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingCharacter
int TMPro::TMP_TextUtilities::FindIntersectingCharacter(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera, bool visibleOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindIntersectingCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractType(visibleOnly)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera, visibleOnly);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestCharacter
int TMPro::TMP_TextUtilities::FindNearestCharacter(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera, bool visibleOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindNearestCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera), ::il2cpp_utils::ExtractType(visibleOnly)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera, visibleOnly);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingWord
int TMPro::TMP_TextUtilities::FindIntersectingWord(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindIntersectingWord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingWord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestWord
int TMPro::TMP_TextUtilities::FindNearestWord(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindNearestWord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestWord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingLine
int TMPro::TMP_TextUtilities::FindIntersectingLine(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindIntersectingLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingLink
int TMPro::TMP_TextUtilities::FindIntersectingLink(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindIntersectingLink");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindIntersectingLink", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestLink
int TMPro::TMP_TextUtilities::FindNearestLink(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::FindNearestLink");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "FindNearestLink", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(camera)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, position, camera);
}
// Autogenerated method: TMPro.TMP_TextUtilities.PointIntersectRectangle
bool TMPro::TMP_TextUtilities::PointIntersectRectangle(UnityEngine::Vector3 m, UnityEngine::Vector3 a, UnityEngine::Vector3 b, UnityEngine::Vector3 c, UnityEngine::Vector3 d) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::PointIntersectRectangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "PointIntersectRectangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m, a, b, c, d);
}
// Autogenerated method: TMPro.TMP_TextUtilities.ScreenPointToWorldPointInRectangle
bool TMPro::TMP_TextUtilities::ScreenPointToWorldPointInRectangle(UnityEngine::Transform* transform, UnityEngine::Vector2 screenPoint, UnityEngine::Camera* cam, UnityEngine::Vector3& worldPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::ScreenPointToWorldPointInRectangle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "ScreenPointToWorldPointInRectangle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(screenPoint), ::il2cpp_utils::ExtractType(cam), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, screenPoint, cam, worldPoint);
}
// Autogenerated method: TMPro.TMP_TextUtilities.IntersectLinePlane
bool TMPro::TMP_TextUtilities::IntersectLinePlane(TMPro::TMP_TextUtilities::LineSegment line, UnityEngine::Vector3 point, UnityEngine::Vector3 normal, UnityEngine::Vector3& intersectingPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::IntersectLinePlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "IntersectLinePlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(line), ::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, line, point, normal, intersectingPoint);
}
// Autogenerated method: TMPro.TMP_TextUtilities.DistanceToLine
float TMPro::TMP_TextUtilities::DistanceToLine(UnityEngine::Vector3 a, UnityEngine::Vector3 b, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::DistanceToLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "DistanceToLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, point);
}
// Autogenerated method: TMPro.TMP_TextUtilities.ToLowerFast
::Il2CppChar TMPro::TMP_TextUtilities::ToLowerFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::ToLowerFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "ToLowerFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextUtilities.ToUpperFast
::Il2CppChar TMPro::TMP_TextUtilities::ToUpperFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::ToUpperFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "ToUpperFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetSimpleHashCode
int TMPro::TMP_TextUtilities::GetSimpleHashCode(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::GetSimpleHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetSimpleHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetSimpleHashCodeLowercase
uint TMPro::TMP_TextUtilities::GetSimpleHashCodeLowercase(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::GetSimpleHashCodeLowercase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "GetSimpleHashCodeLowercase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextUtilities.HexToInt
int TMPro::TMP_TextUtilities::HexToInt(::Il2CppChar hex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::HexToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "HexToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hex)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hex);
}
// Autogenerated method: TMPro.TMP_TextUtilities.StringHexToInt
int TMPro::TMP_TextUtilities::StringHexToInt(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::StringHexToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", "StringHexToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextUtilities..cctor
void TMPro::TMP_TextUtilities::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextUtilities::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextUtilities", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMP_TextUtilities::GetCursorIndexFromPosition
// Il2CppName: GetCursorIndexFromPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::GetCursorIndexFromPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "GetCursorIndexFromPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::GetCursorIndexFromPosition
// Il2CppName: GetCursorIndexFromPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*, TMPro::CaretPosition&)>(&TMP_TextUtilities::GetCursorIndexFromPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "GetCursorIndexFromPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<TMPro::CaretPosition&>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindNearestLine
// Il2CppName: FindNearestLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::FindNearestLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindNearestLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindNearestCharacterOnLine
// Il2CppName: FindNearestCharacterOnLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, int, UnityEngine::Camera*, bool)>(&TMP_TextUtilities::FindNearestCharacterOnLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindNearestCharacterOnLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::IsIntersectingRectTransform
// Il2CppName: IsIntersectingRectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::RectTransform*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::IsIntersectingRectTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "IsIntersectingRectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RectTransform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindIntersectingCharacter
// Il2CppName: FindIntersectingCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*, bool)>(&TMP_TextUtilities::FindIntersectingCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindIntersectingCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindNearestCharacter
// Il2CppName: FindNearestCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*, bool)>(&TMP_TextUtilities::FindNearestCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindNearestCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindIntersectingWord
// Il2CppName: FindIntersectingWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::FindIntersectingWord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindIntersectingWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindNearestWord
// Il2CppName: FindNearestWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::FindNearestWord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindNearestWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindIntersectingLine
// Il2CppName: FindIntersectingLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::FindIntersectingLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindIntersectingLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindIntersectingLink
// Il2CppName: FindIntersectingLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::FindIntersectingLink)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindIntersectingLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::FindNearestLink
// Il2CppName: FindNearestLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(TMPro::TMP_Text*, UnityEngine::Vector3, UnityEngine::Camera*)>(&TMP_TextUtilities::FindNearestLink)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "FindNearestLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::PointIntersectRectangle
// Il2CppName: PointIntersectRectangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&TMP_TextUtilities::PointIntersectRectangle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "PointIntersectRectangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::ScreenPointToWorldPointInRectangle
// Il2CppName: ScreenPointToWorldPointInRectangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Transform*, UnityEngine::Vector2, UnityEngine::Camera*, UnityEngine::Vector3&)>(&TMP_TextUtilities::ScreenPointToWorldPointInRectangle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "ScreenPointToWorldPointInRectangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::IntersectLinePlane
// Il2CppName: IntersectLinePlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(TMPro::TMP_TextUtilities::LineSegment, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&)>(&TMP_TextUtilities::IntersectLinePlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "IntersectLinePlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_TextUtilities::LineSegment>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::DistanceToLine
// Il2CppName: DistanceToLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&TMP_TextUtilities::DistanceToLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "DistanceToLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::ToLowerFast
// Il2CppName: ToLowerFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&TMP_TextUtilities::ToLowerFast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "ToLowerFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::ToUpperFast
// Il2CppName: ToUpperFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&TMP_TextUtilities::ToUpperFast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "ToUpperFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::GetSimpleHashCode
// Il2CppName: GetSimpleHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*)>(&TMP_TextUtilities::GetSimpleHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "GetSimpleHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::GetSimpleHashCodeLowercase
// Il2CppName: GetSimpleHashCodeLowercase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Il2CppString*)>(&TMP_TextUtilities::GetSimpleHashCodeLowercase)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "GetSimpleHashCodeLowercase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::HexToInt
// Il2CppName: HexToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar)>(&TMP_TextUtilities::HexToInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "HexToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::StringHexToInt
// Il2CppName: StringHexToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*)>(&TMP_TextUtilities::StringHexToInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), "StringHexToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextUtilities::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_TextUtilities::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextUtilities/LineSegment
#include "TMPro/TMP_TextUtilities_LineSegment.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_TextUtilities::LineSegment::LineSegment
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextUtilities::LineSegment::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&TMP_TextUtilities::LineSegment::LineSegment<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities::LineSegment), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextUtilities::LineSegment::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&TMP_TextUtilities::LineSegment::LineSegment<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextUtilities::LineSegment), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_UpdateManager
#include "TMPro/TMP_UpdateManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Rendering.ScriptableRenderContext
#include "UnityEngine/Rendering/ScriptableRenderContext.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private TMPro.TMP_UpdateManager s_Instance
TMPro::TMP_UpdateManager* TMPro::TMP_UpdateManager::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_UpdateManager*>("TMPro", "TMP_UpdateManager", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private TMPro.TMP_UpdateManager s_Instance
void TMPro::TMP_UpdateManager::_set_s_Instance(TMPro::TMP_UpdateManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateManager", "s_Instance", value));
}
// Autogenerated method: TMPro.TMP_UpdateManager.get_instance
TMPro::TMP_UpdateManager* TMPro::TMP_UpdateManager::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_UpdateManager*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateManager.RegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::RegisterTextObjectForUpdate(TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::RegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "RegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textObject);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalRegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::InternalRegisterTextObjectForUpdate(TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::InternalRegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, textObject);
}
// Autogenerated method: TMPro.TMP_UpdateManager.RegisterTextElementForLayoutRebuild
void TMPro::TMP_UpdateManager::RegisterTextElementForLayoutRebuild(TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::RegisterTextElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "RegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalRegisterTextElementForLayoutRebuild
bool TMPro::TMP_UpdateManager::InternalRegisterTextElementForLayoutRebuild(TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::InternalRegisterTextElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.RegisterTextElementForGraphicRebuild
void TMPro::TMP_UpdateManager::RegisterTextElementForGraphicRebuild(TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::RegisterTextElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "RegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalRegisterTextElementForGraphicRebuild
bool TMPro::TMP_UpdateManager::InternalRegisterTextElementForGraphicRebuild(TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::InternalRegisterTextElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.OnBeginFrameRendering
void TMPro::TMP_UpdateManager::OnBeginFrameRendering(UnityEngine::Rendering::ScriptableRenderContext renderContext, ::Array<UnityEngine::Camera*>* cameras) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::OnBeginFrameRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginFrameRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderContext), ::il2cpp_utils::ExtractType(cameras)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, renderContext, cameras);
}
// Autogenerated method: TMPro.TMP_UpdateManager.OnCameraPreCull
void TMPro::TMP_UpdateManager::OnCameraPreCull(UnityEngine::Camera* cam) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::OnCameraPreCull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCameraPreCull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cam)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cam);
}
// Autogenerated method: TMPro.TMP_UpdateManager.DoRebuilds
void TMPro::TMP_UpdateManager::DoRebuilds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::DoRebuilds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoRebuilds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateManager.UnRegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::UnRegisterTextObjectForUpdate(TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::UnRegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "UnRegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textObject);
}
// Autogenerated method: TMPro.TMP_UpdateManager.UnRegisterTextElementForRebuild
void TMPro::TMP_UpdateManager::UnRegisterTextElementForRebuild(TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::UnRegisterTextElementForRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateManager", "UnRegisterTextElementForRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalUnRegisterTextElementForGraphicRebuild
void TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForGraphicRebuild(TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalUnRegisterTextElementForLayoutRebuild
void TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForLayoutRebuild(TMPro::TMP_Text* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::InternalUnRegisterTextElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateManager.InternalUnRegisterTextObjectForUpdate
void TMPro::TMP_UpdateManager::InternalUnRegisterTextObjectForUpdate(TMPro::TMP_Text* textObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateManager::InternalUnRegisterTextObjectForUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterTextObjectForUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, textObject);
}
// Writing MetadataGetter for method: TMP_UpdateManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_UpdateManager* (*)()>(&TMP_UpdateManager::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::RegisterTextObjectForUpdate
// Il2CppName: RegisterTextObjectForUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::RegisterTextObjectForUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "RegisterTextObjectForUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::InternalRegisterTextObjectForUpdate
// Il2CppName: InternalRegisterTextObjectForUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::InternalRegisterTextObjectForUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "InternalRegisterTextObjectForUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::RegisterTextElementForLayoutRebuild
// Il2CppName: RegisterTextElementForLayoutRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::RegisterTextElementForLayoutRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "RegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::InternalRegisterTextElementForLayoutRebuild
// Il2CppName: InternalRegisterTextElementForLayoutRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_UpdateManager::*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::InternalRegisterTextElementForLayoutRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "InternalRegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::RegisterTextElementForGraphicRebuild
// Il2CppName: RegisterTextElementForGraphicRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::RegisterTextElementForGraphicRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "RegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::InternalRegisterTextElementForGraphicRebuild
// Il2CppName: InternalRegisterTextElementForGraphicRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_UpdateManager::*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::InternalRegisterTextElementForGraphicRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "InternalRegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::OnBeginFrameRendering
// Il2CppName: OnBeginFrameRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)(UnityEngine::Rendering::ScriptableRenderContext, ::Array<UnityEngine::Camera*>*)>(&TMP_UpdateManager::OnBeginFrameRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "OnBeginFrameRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ScriptableRenderContext>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Camera*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::OnCameraPreCull
// Il2CppName: OnCameraPreCull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)(UnityEngine::Camera*)>(&TMP_UpdateManager::OnCameraPreCull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "OnCameraPreCull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::DoRebuilds
// Il2CppName: DoRebuilds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)()>(&TMP_UpdateManager::DoRebuilds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "DoRebuilds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::UnRegisterTextObjectForUpdate
// Il2CppName: UnRegisterTextObjectForUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::UnRegisterTextObjectForUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "UnRegisterTextObjectForUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::UnRegisterTextElementForRebuild
// Il2CppName: UnRegisterTextElementForRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::UnRegisterTextElementForRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "UnRegisterTextElementForRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::InternalUnRegisterTextElementForGraphicRebuild
// Il2CppName: InternalUnRegisterTextElementForGraphicRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::InternalUnRegisterTextElementForGraphicRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "InternalUnRegisterTextElementForGraphicRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::InternalUnRegisterTextElementForLayoutRebuild
// Il2CppName: InternalUnRegisterTextElementForLayoutRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::InternalUnRegisterTextElementForLayoutRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "InternalUnRegisterTextElementForLayoutRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::InternalUnRegisterTextObjectForUpdate
// Il2CppName: InternalUnRegisterTextObjectForUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)(TMPro::TMP_Text*)>(&TMP_UpdateManager::InternalUnRegisterTextObjectForUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), "InternalUnRegisterTextObjectForUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)()>(&TMP_UpdateManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateManager::*)()>(&TMP_UpdateManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_UpdateRegistry
#include "TMPro/TMP_UpdateRegistry.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private TMPro.TMP_UpdateRegistry s_Instance
TMPro::TMP_UpdateRegistry* TMPro::TMP_UpdateRegistry::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_UpdateRegistry*>("TMPro", "TMP_UpdateRegistry", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private TMPro.TMP_UpdateRegistry s_Instance
void TMPro::TMP_UpdateRegistry::_set_s_Instance(TMPro::TMP_UpdateRegistry* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_UpdateRegistry", "s_Instance", value));
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.get_instance
TMPro::TMP_UpdateRegistry* TMPro::TMP_UpdateRegistry::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_UpdateRegistry*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.RegisterCanvasElementForLayoutRebuild
void TMPro::TMP_UpdateRegistry::RegisterCanvasElementForLayoutRebuild(UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::RegisterCanvasElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "RegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalRegisterCanvasElementForLayoutRebuild
bool TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForLayoutRebuild(UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.RegisterCanvasElementForGraphicRebuild
void TMPro::TMP_UpdateRegistry::RegisterCanvasElementForGraphicRebuild(UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::RegisterCanvasElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "RegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalRegisterCanvasElementForGraphicRebuild
bool TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForGraphicRebuild(UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::InternalRegisterCanvasElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalRegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.PerformUpdateForCanvasRendererObjects
void TMPro::TMP_UpdateRegistry::PerformUpdateForCanvasRendererObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::PerformUpdateForCanvasRendererObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformUpdateForCanvasRendererObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.PerformUpdateForMeshRendererObjects
void TMPro::TMP_UpdateRegistry::PerformUpdateForMeshRendererObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::PerformUpdateForMeshRendererObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformUpdateForMeshRendererObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.UnRegisterCanvasElementForRebuild
void TMPro::TMP_UpdateRegistry::UnRegisterCanvasElementForRebuild(UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::UnRegisterCanvasElementForRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_UpdateRegistry", "UnRegisterCanvasElementForRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalUnRegisterCanvasElementForLayoutRebuild
void TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForLayoutRebuild(UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForLayoutRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, element);
}
// Autogenerated method: TMPro.TMP_UpdateRegistry.InternalUnRegisterCanvasElementForGraphicRebuild
void TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForGraphicRebuild(UnityEngine::UI::ICanvasElement* element) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_UpdateRegistry::InternalUnRegisterCanvasElementForGraphicRebuild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUnRegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, element);
}
// Writing MetadataGetter for method: TMP_UpdateRegistry::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_UpdateRegistry* (*)()>(&TMP_UpdateRegistry::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::RegisterCanvasElementForLayoutRebuild
// Il2CppName: RegisterCanvasElementForLayoutRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::UI::ICanvasElement*)>(&TMP_UpdateRegistry::RegisterCanvasElementForLayoutRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "RegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ICanvasElement*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::InternalRegisterCanvasElementForLayoutRebuild
// Il2CppName: InternalRegisterCanvasElementForLayoutRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_UpdateRegistry::*)(UnityEngine::UI::ICanvasElement*)>(&TMP_UpdateRegistry::InternalRegisterCanvasElementForLayoutRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "InternalRegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ICanvasElement*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::RegisterCanvasElementForGraphicRebuild
// Il2CppName: RegisterCanvasElementForGraphicRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::UI::ICanvasElement*)>(&TMP_UpdateRegistry::RegisterCanvasElementForGraphicRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "RegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ICanvasElement*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::InternalRegisterCanvasElementForGraphicRebuild
// Il2CppName: InternalRegisterCanvasElementForGraphicRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_UpdateRegistry::*)(UnityEngine::UI::ICanvasElement*)>(&TMP_UpdateRegistry::InternalRegisterCanvasElementForGraphicRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "InternalRegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ICanvasElement*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::PerformUpdateForCanvasRendererObjects
// Il2CppName: PerformUpdateForCanvasRendererObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateRegistry::*)()>(&TMP_UpdateRegistry::PerformUpdateForCanvasRendererObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "PerformUpdateForCanvasRendererObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::PerformUpdateForMeshRendererObjects
// Il2CppName: PerformUpdateForMeshRendererObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateRegistry::*)()>(&TMP_UpdateRegistry::PerformUpdateForMeshRendererObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "PerformUpdateForMeshRendererObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::UnRegisterCanvasElementForRebuild
// Il2CppName: UnRegisterCanvasElementForRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::UI::ICanvasElement*)>(&TMP_UpdateRegistry::UnRegisterCanvasElementForRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "UnRegisterCanvasElementForRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ICanvasElement*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::InternalUnRegisterCanvasElementForLayoutRebuild
// Il2CppName: InternalUnRegisterCanvasElementForLayoutRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateRegistry::*)(UnityEngine::UI::ICanvasElement*)>(&TMP_UpdateRegistry::InternalUnRegisterCanvasElementForLayoutRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "InternalUnRegisterCanvasElementForLayoutRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ICanvasElement*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::InternalUnRegisterCanvasElementForGraphicRebuild
// Il2CppName: InternalUnRegisterCanvasElementForGraphicRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateRegistry::*)(UnityEngine::UI::ICanvasElement*)>(&TMP_UpdateRegistry::InternalUnRegisterCanvasElementForGraphicRebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), "InternalUnRegisterCanvasElementForGraphicRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ICanvasElement*>()});
  }
};
// Writing MetadataGetter for method: TMP_UpdateRegistry::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateRegistry::*)()>(&TMP_UpdateRegistry::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_UpdateRegistry::*)()>(&TMP_UpdateRegistry::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_UpdateRegistry*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.Compute_DistanceTransform_EventTypes
#include "TMPro/Compute_DistanceTransform_EventTypes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.Compute_DistanceTransform_EventTypes Processing
TMPro::Compute_DistanceTransform_EventTypes TMPro::Compute_DistanceTransform_EventTypes::_get_Processing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::Compute_DistanceTransform_EventTypes::_get_Processing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::Compute_DistanceTransform_EventTypes>("TMPro", "Compute_DistanceTransform_EventTypes", "Processing"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.Compute_DistanceTransform_EventTypes Processing
void TMPro::Compute_DistanceTransform_EventTypes::_set_Processing(TMPro::Compute_DistanceTransform_EventTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::Compute_DistanceTransform_EventTypes::_set_Processing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "Compute_DistanceTransform_EventTypes", "Processing", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.Compute_DistanceTransform_EventTypes Completed
TMPro::Compute_DistanceTransform_EventTypes TMPro::Compute_DistanceTransform_EventTypes::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::Compute_DistanceTransform_EventTypes::_get_Completed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::Compute_DistanceTransform_EventTypes>("TMPro", "Compute_DistanceTransform_EventTypes", "Completed"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.Compute_DistanceTransform_EventTypes Completed
void TMPro::Compute_DistanceTransform_EventTypes::_set_Completed(TMPro::Compute_DistanceTransform_EventTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::Compute_DistanceTransform_EventTypes::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "Compute_DistanceTransform_EventTypes", "Completed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMPro_EventManager
#include "TMPro/TMPro_EventManager.hpp"
// Including type: TMPro.FastAction`2
#include "TMPro/FastAction_2.hpp"
// Including type: TMPro.Compute_DT_EventArgs
#include "TMPro/Compute_DT_EventArgs.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: TMPro.FastAction`3
#include "TMPro/FastAction_3.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TMPro.FastAction`1
#include "TMPro/FastAction_1.hpp"
// Including type: TMPro.TMP_ColorGradient
#include "TMPro/TMP_ColorGradient.hpp"
// Including type: TMPro.FastAction
#include "TMPro/FastAction.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`2<System.Object,TMPro.Compute_DT_EventArgs> COMPUTE_DT_EVENT
TMPro::FastAction_2<::Il2CppObject*, TMPro::Compute_DT_EventArgs*>* TMPro::TMPro_EventManager::_get_COMPUTE_DT_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_COMPUTE_DT_EVENT");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::FastAction_2<::Il2CppObject*, TMPro::Compute_DT_EventArgs*>*>("TMPro", "TMPro_EventManager", "COMPUTE_DT_EVENT")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`2<System.Object,TMPro.Compute_DT_EventArgs> COMPUTE_DT_EVENT
void TMPro::TMPro_EventManager::_set_COMPUTE_DT_EVENT(TMPro::FastAction_2<::Il2CppObject*, TMPro::Compute_DT_EventArgs*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_COMPUTE_DT_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "COMPUTE_DT_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`2<System.Boolean,UnityEngine.Material> MATERIAL_PROPERTY_EVENT
TMPro::FastAction_2<bool, UnityEngine::Material*>* TMPro::TMPro_EventManager::_get_MATERIAL_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_MATERIAL_PROPERTY_EVENT");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::FastAction_2<bool, UnityEngine::Material*>*>("TMPro", "TMPro_EventManager", "MATERIAL_PROPERTY_EVENT")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`2<System.Boolean,UnityEngine.Material> MATERIAL_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_MATERIAL_PROPERTY_EVENT(TMPro::FastAction_2<bool, UnityEngine::Material*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_MATERIAL_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "MATERIAL_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`2<System.Boolean,TMPro.TMP_FontAsset> FONT_PROPERTY_EVENT
TMPro::FastAction_2<bool, TMPro::TMP_FontAsset*>* TMPro::TMPro_EventManager::_get_FONT_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_FONT_PROPERTY_EVENT");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::FastAction_2<bool, TMPro::TMP_FontAsset*>*>("TMPro", "TMPro_EventManager", "FONT_PROPERTY_EVENT")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`2<System.Boolean,TMPro.TMP_FontAsset> FONT_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_FONT_PROPERTY_EVENT(TMPro::FastAction_2<bool, TMPro::TMP_FontAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_FONT_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "FONT_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`2<System.Boolean,UnityEngine.Object> SPRITE_ASSET_PROPERTY_EVENT
TMPro::FastAction_2<bool, UnityEngine::Object*>* TMPro::TMPro_EventManager::_get_SPRITE_ASSET_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_SPRITE_ASSET_PROPERTY_EVENT");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::FastAction_2<bool, UnityEngine::Object*>*>("TMPro", "TMPro_EventManager", "SPRITE_ASSET_PROPERTY_EVENT")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`2<System.Boolean,UnityEngine.Object> SPRITE_ASSET_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_SPRITE_ASSET_PROPERTY_EVENT(TMPro::FastAction_2<bool, UnityEngine::Object*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_SPRITE_ASSET_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "SPRITE_ASSET_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`2<System.Boolean,TMPro.TextMeshPro> TEXTMESHPRO_PROPERTY_EVENT
TMPro::FastAction_2<bool, TMPro::TextMeshPro*>* TMPro::TMPro_EventManager::_get_TEXTMESHPRO_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_TEXTMESHPRO_PROPERTY_EVENT");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::FastAction_2<bool, TMPro::TextMeshPro*>*>("TMPro", "TMPro_EventManager", "TEXTMESHPRO_PROPERTY_EVENT")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`2<System.Boolean,TMPro.TextMeshPro> TEXTMESHPRO_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_TEXTMESHPRO_PROPERTY_EVENT(TMPro::FastAction_2<bool, TMPro::TextMeshPro*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_TEXTMESHPRO_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "TEXTMESHPRO_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`3<UnityEngine.GameObject,UnityEngine.Material,UnityEngine.Material> DRAG_AND_DROP_MATERIAL_EVENT
TMPro::FastAction_3<UnityEngine::GameObject*, UnityEngine::Material*, UnityEngine::Material*>* TMPro::TMPro_EventManager::_get_DRAG_AND_DROP_MATERIAL_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_DRAG_AND_DROP_MATERIAL_EVENT");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::FastAction_3<UnityEngine::GameObject*, UnityEngine::Material*, UnityEngine::Material*>*>("TMPro", "TMPro_EventManager", "DRAG_AND_DROP_MATERIAL_EVENT")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`3<UnityEngine.GameObject,UnityEngine.Material,UnityEngine.Material> DRAG_AND_DROP_MATERIAL_EVENT
void TMPro::TMPro_EventManager::_set_DRAG_AND_DROP_MATERIAL_EVENT(TMPro::FastAction_3<UnityEngine::GameObject*, UnityEngine::Material*, UnityEngine::Material*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_DRAG_AND_DROP_MATERIAL_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "DRAG_AND_DROP_MATERIAL_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`1<System.Boolean> TEXT_STYLE_PROPERTY_EVENT
TMPro::FastAction_1<bool>* TMPro::TMPro_EventManager::_get_TEXT_STYLE_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_TEXT_STYLE_PROPERTY_EVENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FastAction_1<bool>*>("TMPro", "TMPro_EventManager", "TEXT_STYLE_PROPERTY_EVENT"));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`1<System.Boolean> TEXT_STYLE_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_TEXT_STYLE_PROPERTY_EVENT(TMPro::FastAction_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_TEXT_STYLE_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "TEXT_STYLE_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`1<TMPro.TMP_ColorGradient> COLOR_GRADIENT_PROPERTY_EVENT
TMPro::FastAction_1<TMPro::TMP_ColorGradient*>* TMPro::TMPro_EventManager::_get_COLOR_GRADIENT_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_COLOR_GRADIENT_PROPERTY_EVENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FastAction_1<TMPro::TMP_ColorGradient*>*>("TMPro", "TMPro_EventManager", "COLOR_GRADIENT_PROPERTY_EVENT"));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`1<TMPro.TMP_ColorGradient> COLOR_GRADIENT_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_COLOR_GRADIENT_PROPERTY_EVENT(TMPro::FastAction_1<TMPro::TMP_ColorGradient*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_COLOR_GRADIENT_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "COLOR_GRADIENT_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction TMP_SETTINGS_PROPERTY_EVENT
TMPro::FastAction* TMPro::TMPro_EventManager::_get_TMP_SETTINGS_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_TMP_SETTINGS_PROPERTY_EVENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FastAction*>("TMPro", "TMPro_EventManager", "TMP_SETTINGS_PROPERTY_EVENT"));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction TMP_SETTINGS_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_TMP_SETTINGS_PROPERTY_EVENT(TMPro::FastAction* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_TMP_SETTINGS_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "TMP_SETTINGS_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction RESOURCE_LOAD_EVENT
TMPro::FastAction* TMPro::TMPro_EventManager::_get_RESOURCE_LOAD_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_RESOURCE_LOAD_EVENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FastAction*>("TMPro", "TMPro_EventManager", "RESOURCE_LOAD_EVENT"));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction RESOURCE_LOAD_EVENT
void TMPro::TMPro_EventManager::_set_RESOURCE_LOAD_EVENT(TMPro::FastAction* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_RESOURCE_LOAD_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "RESOURCE_LOAD_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`2<System.Boolean,TMPro.TextMeshProUGUI> TEXTMESHPRO_UGUI_PROPERTY_EVENT
TMPro::FastAction_2<bool, TMPro::TextMeshProUGUI*>* TMPro::TMPro_EventManager::_get_TEXTMESHPRO_UGUI_PROPERTY_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_TEXTMESHPRO_UGUI_PROPERTY_EVENT");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::FastAction_2<bool, TMPro::TextMeshProUGUI*>*>("TMPro", "TMPro_EventManager", "TEXTMESHPRO_UGUI_PROPERTY_EVENT")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`2<System.Boolean,TMPro.TextMeshProUGUI> TEXTMESHPRO_UGUI_PROPERTY_EVENT
void TMPro::TMPro_EventManager::_set_TEXTMESHPRO_UGUI_PROPERTY_EVENT(TMPro::FastAction_2<bool, TMPro::TextMeshProUGUI*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_TEXTMESHPRO_UGUI_PROPERTY_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "TEXTMESHPRO_UGUI_PROPERTY_EVENT", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction OnPreRenderObject_Event
TMPro::FastAction* TMPro::TMPro_EventManager::_get_OnPreRenderObject_Event() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_OnPreRenderObject_Event");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FastAction*>("TMPro", "TMPro_EventManager", "OnPreRenderObject_Event"));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction OnPreRenderObject_Event
void TMPro::TMPro_EventManager::_set_OnPreRenderObject_Event(TMPro::FastAction* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_OnPreRenderObject_Event");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "OnPreRenderObject_Event", value));
}
// Autogenerated static field getter
// Get static field: static public readonly TMPro.FastAction`1<UnityEngine.Object> TEXT_CHANGED_EVENT
TMPro::FastAction_1<UnityEngine::Object*>* TMPro::TMPro_EventManager::_get_TEXT_CHANGED_EVENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_get_TEXT_CHANGED_EVENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FastAction_1<UnityEngine::Object*>*>("TMPro", "TMPro_EventManager", "TEXT_CHANGED_EVENT"));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.FastAction`1<UnityEngine.Object> TEXT_CHANGED_EVENT
void TMPro::TMPro_EventManager::_set_TEXT_CHANGED_EVENT(TMPro::FastAction_1<UnityEngine::Object*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::_set_TEXT_CHANGED_EVENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMPro_EventManager", "TEXT_CHANGED_EVENT", value));
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_PRE_RENDER_OBJECT_CHANGED
void TMPro::TMPro_EventManager::ON_PRE_RENDER_OBJECT_CHANGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_PRE_RENDER_OBJECT_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_PRE_RENDER_OBJECT_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_MATERIAL_PROPERTY_CHANGED
void TMPro::TMPro_EventManager::ON_MATERIAL_PROPERTY_CHANGED(bool isChanged, UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_MATERIAL_PROPERTY_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_MATERIAL_PROPERTY_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isChanged), ::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isChanged, mat);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_FONT_PROPERTY_CHANGED
void TMPro::TMPro_EventManager::ON_FONT_PROPERTY_CHANGED(bool isChanged, TMPro::TMP_FontAsset* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_FONT_PROPERTY_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_FONT_PROPERTY_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isChanged), ::il2cpp_utils::ExtractType(font)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isChanged, font);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_SPRITE_ASSET_PROPERTY_CHANGED
void TMPro::TMPro_EventManager::ON_SPRITE_ASSET_PROPERTY_CHANGED(bool isChanged, UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_SPRITE_ASSET_PROPERTY_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_SPRITE_ASSET_PROPERTY_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isChanged), ::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isChanged, obj);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_TEXTMESHPRO_PROPERTY_CHANGED
void TMPro::TMPro_EventManager::ON_TEXTMESHPRO_PROPERTY_CHANGED(bool isChanged, TMPro::TextMeshPro* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_TEXTMESHPRO_PROPERTY_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_TEXTMESHPRO_PROPERTY_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isChanged), ::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isChanged, obj);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_DRAG_AND_DROP_MATERIAL_CHANGED
void TMPro::TMPro_EventManager::ON_DRAG_AND_DROP_MATERIAL_CHANGED(UnityEngine::GameObject* sender, UnityEngine::Material* currentMaterial, UnityEngine::Material* newMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_DRAG_AND_DROP_MATERIAL_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_DRAG_AND_DROP_MATERIAL_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(currentMaterial), ::il2cpp_utils::ExtractType(newMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sender, currentMaterial, newMaterial);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_TEXT_STYLE_PROPERTY_CHANGED
void TMPro::TMPro_EventManager::ON_TEXT_STYLE_PROPERTY_CHANGED(bool isChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_TEXT_STYLE_PROPERTY_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_TEXT_STYLE_PROPERTY_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isChanged)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isChanged);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_COLOR_GRAIDENT_PROPERTY_CHANGED
void TMPro::TMPro_EventManager::ON_COLOR_GRAIDENT_PROPERTY_CHANGED(TMPro::TMP_ColorGradient* gradient) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_COLOR_GRAIDENT_PROPERTY_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_COLOR_GRAIDENT_PROPERTY_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gradient)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gradient);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_TEXT_CHANGED
void TMPro::TMPro_EventManager::ON_TEXT_CHANGED(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_TEXT_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_TEXT_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_TMP_SETTINGS_CHANGED
void TMPro::TMPro_EventManager::ON_TMP_SETTINGS_CHANGED() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_TMP_SETTINGS_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_TMP_SETTINGS_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_RESOURCES_LOADED
void TMPro::TMPro_EventManager::ON_RESOURCES_LOADED() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_RESOURCES_LOADED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_RESOURCES_LOADED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED
void TMPro::TMPro_EventManager::ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED(bool isChanged, TMPro::TextMeshProUGUI* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isChanged), ::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isChanged, obj);
}
// Autogenerated method: TMPro.TMPro_EventManager.ON_COMPUTE_DT_EVENT
void TMPro::TMPro_EventManager::ON_COMPUTE_DT_EVENT(::Il2CppObject* Sender, TMPro::Compute_DT_EventArgs* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::ON_COMPUTE_DT_EVENT");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", "ON_COMPUTE_DT_EVENT", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(Sender), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, Sender, e);
}
// Autogenerated method: TMPro.TMPro_EventManager..cctor
void TMPro::TMPro_EventManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_EventManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_EventManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMPro_EventManager::ON_PRE_RENDER_OBJECT_CHANGED
// Il2CppName: ON_PRE_RENDER_OBJECT_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro_EventManager::ON_PRE_RENDER_OBJECT_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_PRE_RENDER_OBJECT_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_MATERIAL_PROPERTY_CHANGED
// Il2CppName: ON_MATERIAL_PROPERTY_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, UnityEngine::Material*)>(&TMPro_EventManager::ON_MATERIAL_PROPERTY_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_MATERIAL_PROPERTY_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_FONT_PROPERTY_CHANGED
// Il2CppName: ON_FONT_PROPERTY_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, TMPro::TMP_FontAsset*)>(&TMPro_EventManager::ON_FONT_PROPERTY_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_FONT_PROPERTY_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_SPRITE_ASSET_PROPERTY_CHANGED
// Il2CppName: ON_SPRITE_ASSET_PROPERTY_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, UnityEngine::Object*)>(&TMPro_EventManager::ON_SPRITE_ASSET_PROPERTY_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_SPRITE_ASSET_PROPERTY_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_TEXTMESHPRO_PROPERTY_CHANGED
// Il2CppName: ON_TEXTMESHPRO_PROPERTY_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, TMPro::TextMeshPro*)>(&TMPro_EventManager::ON_TEXTMESHPRO_PROPERTY_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_TEXTMESHPRO_PROPERTY_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshPro*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_DRAG_AND_DROP_MATERIAL_CHANGED
// Il2CppName: ON_DRAG_AND_DROP_MATERIAL_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::GameObject*, UnityEngine::Material*, UnityEngine::Material*)>(&TMPro_EventManager::ON_DRAG_AND_DROP_MATERIAL_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_DRAG_AND_DROP_MATERIAL_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_TEXT_STYLE_PROPERTY_CHANGED
// Il2CppName: ON_TEXT_STYLE_PROPERTY_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&TMPro_EventManager::ON_TEXT_STYLE_PROPERTY_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_TEXT_STYLE_PROPERTY_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_COLOR_GRAIDENT_PROPERTY_CHANGED
// Il2CppName: ON_COLOR_GRAIDENT_PROPERTY_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(TMPro::TMP_ColorGradient*)>(&TMPro_EventManager::ON_COLOR_GRAIDENT_PROPERTY_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_COLOR_GRAIDENT_PROPERTY_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_ColorGradient*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_TEXT_CHANGED
// Il2CppName: ON_TEXT_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&TMPro_EventManager::ON_TEXT_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_TEXT_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_TMP_SETTINGS_CHANGED
// Il2CppName: ON_TMP_SETTINGS_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro_EventManager::ON_TMP_SETTINGS_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_TMP_SETTINGS_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_RESOURCES_LOADED
// Il2CppName: ON_RESOURCES_LOADED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro_EventManager::ON_RESOURCES_LOADED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_RESOURCES_LOADED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED
// Il2CppName: ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, TMPro::TextMeshProUGUI*)>(&TMPro_EventManager::ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshProUGUI*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::ON_COMPUTE_DT_EVENT
// Il2CppName: ON_COMPUTE_DT_EVENT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, TMPro::Compute_DT_EventArgs*)>(&TMPro_EventManager::ON_COMPUTE_DT_EVENT)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), "ON_COMPUTE_DT_EVENT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<TMPro::Compute_DT_EventArgs*>()});
  }
};
// Writing MetadataGetter for method: TMPro_EventManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro_EventManager::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_EventManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.Compute_DT_EventArgs
#include "TMPro/Compute_DT_EventArgs.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Compute_DT_EventArgs::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Compute_DT_EventArgs::*)(TMPro::Compute_DistanceTransform_EventTypes, float)>(&Compute_DT_EventArgs::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Compute_DT_EventArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::Compute_DistanceTransform_EventTypes>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Compute_DT_EventArgs::*)(TMPro::Compute_DistanceTransform_EventTypes, float)>(&Compute_DT_EventArgs::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Compute_DT_EventArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::Compute_DistanceTransform_EventTypes>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Compute_DT_EventArgs::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Compute_DT_EventArgs::*)(TMPro::Compute_DistanceTransform_EventTypes, ::Array<UnityEngine::Color>*)>(&Compute_DT_EventArgs::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Compute_DT_EventArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::Compute_DistanceTransform_EventTypes>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Color>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Compute_DT_EventArgs::*)(TMPro::Compute_DistanceTransform_EventTypes, ::Array<UnityEngine::Color>*)>(&Compute_DT_EventArgs::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Compute_DT_EventArgs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::Compute_DistanceTransform_EventTypes>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Color>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMPro_ExtensionMethods
#include "TMPro/TMPro_ExtensionMethods.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMPro_ExtensionMethods.ArrayToString
::Il2CppString* TMPro::TMPro_ExtensionMethods::ArrayToString(::Array<::Il2CppChar>* chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::ArrayToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "ArrayToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, chars);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.IntToString
::Il2CppString* TMPro::TMPro_ExtensionMethods::IntToString(::Array<int>* unicodes) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::IntToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "IntToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicodes)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, unicodes);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.IntToString
::Il2CppString* TMPro::TMPro_ExtensionMethods::IntToString(::Array<int>* unicodes, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::IntToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "IntToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicodes), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, unicodes, start, length);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.Compare
bool TMPro::TMPro_ExtensionMethods::Compare(UnityEngine::Color32 a, UnityEngine::Color32 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::Compare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.CompareRGB
bool TMPro::TMPro_ExtensionMethods::CompareRGB(UnityEngine::Color32 a, UnityEngine::Color32 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::CompareRGB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "CompareRGB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.Compare
bool TMPro::TMPro_ExtensionMethods::Compare(UnityEngine::Color a, UnityEngine::Color b) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::Compare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.CompareRGB
bool TMPro::TMPro_ExtensionMethods::CompareRGB(UnityEngine::Color a, UnityEngine::Color b) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::CompareRGB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "CompareRGB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.Multiply
UnityEngine::Color32 TMPro::TMPro_ExtensionMethods::Multiply(UnityEngine::Color32 c1, UnityEngine::Color32 c2) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c1, c2);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.Tint
UnityEngine::Color32 TMPro::TMPro_ExtensionMethods::Tint(UnityEngine::Color32 c1, UnityEngine::Color32 c2) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::Tint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "Tint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(c2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c1, c2);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.Tint
UnityEngine::Color32 TMPro::TMPro_ExtensionMethods::Tint(UnityEngine::Color32 c1, float tint) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::Tint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "Tint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c1), ::il2cpp_utils::ExtractType(tint)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c1, tint);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.Compare
bool TMPro::TMPro_ExtensionMethods::Compare(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2, int accuracy) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::Compare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2), ::il2cpp_utils::ExtractType(accuracy)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v1, v2, accuracy);
}
// Autogenerated method: TMPro.TMPro_ExtensionMethods.Compare
bool TMPro::TMPro_ExtensionMethods::Compare(UnityEngine::Quaternion q1, UnityEngine::Quaternion q2, int accuracy) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMPro_ExtensionMethods::Compare");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMPro_ExtensionMethods", "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q1), ::il2cpp_utils::ExtractType(q2), ::il2cpp_utils::ExtractType(accuracy)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q1, q2, accuracy);
}
// Writing MetadataGetter for method: TMPro_ExtensionMethods::ArrayToString
// Il2CppName: ArrayToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<::Il2CppChar>*)>(&TMPro_ExtensionMethods::ArrayToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "ArrayToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::IntToString
// Il2CppName: IntToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<int>*)>(&TMPro_ExtensionMethods::IntToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "IntToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::IntToString
// Il2CppName: IntToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<int>*, int, int)>(&TMPro_ExtensionMethods::IntToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "IntToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::FindInstanceID
// Il2CppName: FindInstanceID
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TMPro_ExtensionMethods::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Color32, UnityEngine::Color32)>(&TMPro_ExtensionMethods::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::CompareRGB
// Il2CppName: CompareRGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Color32, UnityEngine::Color32)>(&TMPro_ExtensionMethods::CompareRGB)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "CompareRGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Color, UnityEngine::Color)>(&TMPro_ExtensionMethods::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::CompareRGB
// Il2CppName: CompareRGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Color, UnityEngine::Color)>(&TMPro_ExtensionMethods::CompareRGB)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "CompareRGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (*)(UnityEngine::Color32, UnityEngine::Color32)>(&TMPro_ExtensionMethods::Multiply)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::Tint
// Il2CppName: Tint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (*)(UnityEngine::Color32, UnityEngine::Color32)>(&TMPro_ExtensionMethods::Tint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "Tint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::Tint
// Il2CppName: Tint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (*)(UnityEngine::Color32, float)>(&TMPro_ExtensionMethods::Tint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "Tint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3, UnityEngine::Vector3, int)>(&TMPro_ExtensionMethods::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMPro_ExtensionMethods::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Quaternion, UnityEngine::Quaternion, int)>(&TMPro_ExtensionMethods::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro_ExtensionMethods*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_Math
#include "TMPro/TMP_Math.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single FLOAT_MAX
float TMPro::TMP_Math::_get_FLOAT_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_FLOAT_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_Math", "FLOAT_MAX"));
}
// Autogenerated static field setter
// Set static field: static public System.Single FLOAT_MAX
void TMPro::TMP_Math::_set_FLOAT_MAX(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_FLOAT_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "FLOAT_MAX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single FLOAT_MIN
float TMPro::TMP_Math::_get_FLOAT_MIN() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_FLOAT_MIN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_Math", "FLOAT_MIN"));
}
// Autogenerated static field setter
// Set static field: static public System.Single FLOAT_MIN
void TMPro::TMP_Math::_set_FLOAT_MIN(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_FLOAT_MIN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "FLOAT_MIN", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 INT_MAX
int TMPro::TMP_Math::_get_INT_MAX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_INT_MAX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "TMP_Math", "INT_MAX"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 INT_MAX
void TMPro::TMP_Math::_set_INT_MAX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_INT_MAX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "INT_MAX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 INT_MIN
int TMPro::TMP_Math::_get_INT_MIN() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_INT_MIN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "TMP_Math", "INT_MIN"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 INT_MIN
void TMPro::TMP_Math::_set_INT_MIN(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_INT_MIN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "INT_MIN", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single FLOAT_UNSET
float TMPro::TMP_Math::_get_FLOAT_UNSET() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_FLOAT_UNSET");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_Math", "FLOAT_UNSET"));
}
// Autogenerated static field setter
// Set static field: static public System.Single FLOAT_UNSET
void TMPro::TMP_Math::_set_FLOAT_UNSET(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_FLOAT_UNSET");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "FLOAT_UNSET", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 INT_UNSET
int TMPro::TMP_Math::_get_INT_UNSET() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_INT_UNSET");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "TMP_Math", "INT_UNSET"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 INT_UNSET
void TMPro::TMP_Math::_set_INT_UNSET(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_INT_UNSET");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "INT_UNSET", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Vector2 MAX_16BIT
UnityEngine::Vector2 TMPro::TMP_Math::_get_MAX_16BIT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_MAX_16BIT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_Math", "MAX_16BIT"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Vector2 MAX_16BIT
void TMPro::TMP_Math::_set_MAX_16BIT(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_MAX_16BIT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "MAX_16BIT", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Vector2 MIN_16BIT
UnityEngine::Vector2 TMPro::TMP_Math::_get_MIN_16BIT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_get_MIN_16BIT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_Math", "MIN_16BIT"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Vector2 MIN_16BIT
void TMPro::TMP_Math::_set_MIN_16BIT(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::_set_MIN_16BIT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Math", "MIN_16BIT", value));
}
// Autogenerated method: TMPro.TMP_Math.Approximately
bool TMPro::TMP_Math::Approximately(float a, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Math", "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: TMPro.TMP_Math..cctor
void TMPro::TMP_Math::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Math::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Math", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMP_Math::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float)>(&TMP_Math::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Math*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Math::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_Math::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Math*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_VertexDataUpdateFlags
#include "TMPro/TMP_VertexDataUpdateFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_VertexDataUpdateFlags None
TMPro::TMP_VertexDataUpdateFlags TMPro::TMP_VertexDataUpdateFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_VertexDataUpdateFlags>("TMPro", "TMP_VertexDataUpdateFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_VertexDataUpdateFlags None
void TMPro::TMP_VertexDataUpdateFlags::_set_None(TMPro::TMP_VertexDataUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_VertexDataUpdateFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_VertexDataUpdateFlags Vertices
TMPro::TMP_VertexDataUpdateFlags TMPro::TMP_VertexDataUpdateFlags::_get_Vertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_get_Vertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_VertexDataUpdateFlags>("TMPro", "TMP_VertexDataUpdateFlags", "Vertices"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_VertexDataUpdateFlags Vertices
void TMPro::TMP_VertexDataUpdateFlags::_set_Vertices(TMPro::TMP_VertexDataUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_set_Vertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_VertexDataUpdateFlags", "Vertices", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_VertexDataUpdateFlags Uv0
TMPro::TMP_VertexDataUpdateFlags TMPro::TMP_VertexDataUpdateFlags::_get_Uv0() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_get_Uv0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_VertexDataUpdateFlags>("TMPro", "TMP_VertexDataUpdateFlags", "Uv0"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_VertexDataUpdateFlags Uv0
void TMPro::TMP_VertexDataUpdateFlags::_set_Uv0(TMPro::TMP_VertexDataUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_set_Uv0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_VertexDataUpdateFlags", "Uv0", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_VertexDataUpdateFlags Uv2
TMPro::TMP_VertexDataUpdateFlags TMPro::TMP_VertexDataUpdateFlags::_get_Uv2() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_get_Uv2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_VertexDataUpdateFlags>("TMPro", "TMP_VertexDataUpdateFlags", "Uv2"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_VertexDataUpdateFlags Uv2
void TMPro::TMP_VertexDataUpdateFlags::_set_Uv2(TMPro::TMP_VertexDataUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_set_Uv2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_VertexDataUpdateFlags", "Uv2", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_VertexDataUpdateFlags Uv4
TMPro::TMP_VertexDataUpdateFlags TMPro::TMP_VertexDataUpdateFlags::_get_Uv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_get_Uv4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_VertexDataUpdateFlags>("TMPro", "TMP_VertexDataUpdateFlags", "Uv4"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_VertexDataUpdateFlags Uv4
void TMPro::TMP_VertexDataUpdateFlags::_set_Uv4(TMPro::TMP_VertexDataUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_set_Uv4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_VertexDataUpdateFlags", "Uv4", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_VertexDataUpdateFlags Colors32
TMPro::TMP_VertexDataUpdateFlags TMPro::TMP_VertexDataUpdateFlags::_get_Colors32() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_get_Colors32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_VertexDataUpdateFlags>("TMPro", "TMP_VertexDataUpdateFlags", "Colors32"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_VertexDataUpdateFlags Colors32
void TMPro::TMP_VertexDataUpdateFlags::_set_Colors32(TMPro::TMP_VertexDataUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_set_Colors32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_VertexDataUpdateFlags", "Colors32", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_VertexDataUpdateFlags All
TMPro::TMP_VertexDataUpdateFlags TMPro::TMP_VertexDataUpdateFlags::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_VertexDataUpdateFlags>("TMPro", "TMP_VertexDataUpdateFlags", "All"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_VertexDataUpdateFlags All
void TMPro::TMP_VertexDataUpdateFlags::_set_All(TMPro::TMP_VertexDataUpdateFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_VertexDataUpdateFlags::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_VertexDataUpdateFlags", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.VertexGradient
#include "TMPro/VertexGradient.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VertexGradient::VertexGradient
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VertexGradient::*)(UnityEngine::Color)>(&VertexGradient::VertexGradient<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexGradient), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VertexGradient::*)(UnityEngine::Color)>(&VertexGradient::VertexGradient<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexGradient), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: VertexGradient::VertexGradient
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VertexGradient::*)(UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&VertexGradient::VertexGradient<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexGradient), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VertexGradient::*)(UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&VertexGradient::VertexGradient<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VertexGradient), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_LinkInfo
#include "TMPro/TMP_LinkInfo.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_LinkInfo.SetLinkID
void TMPro::TMP_LinkInfo::SetLinkID(::Array<::Il2CppChar>* text, int startIndex, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_LinkInfo::SetLinkID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetLinkID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, text, startIndex, length);
}
// Autogenerated method: TMPro.TMP_LinkInfo.GetLinkText
::Il2CppString* TMPro::TMP_LinkInfo::GetLinkText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_LinkInfo::GetLinkText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetLinkText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_LinkInfo.GetLinkID
::Il2CppString* TMPro::TMP_LinkInfo::GetLinkID() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_LinkInfo::GetLinkID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetLinkID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_LinkInfo::SetLinkID
// Il2CppName: SetLinkID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_LinkInfo::*)(::Array<::Il2CppChar>*, int, int)>(&TMP_LinkInfo::SetLinkID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_LinkInfo), "SetLinkID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_LinkInfo::GetLinkText
// Il2CppName: GetLinkText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_LinkInfo::*)()>(&TMP_LinkInfo::GetLinkText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_LinkInfo), "GetLinkText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_LinkInfo::GetLinkID
// Il2CppName: GetLinkID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_LinkInfo::*)()>(&TMP_LinkInfo::GetLinkID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_LinkInfo), "GetLinkID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_WordInfo
#include "TMPro/TMP_WordInfo.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_WordInfo.GetWord
::Il2CppString* TMPro::TMP_WordInfo::GetWord() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_WordInfo::GetWord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetWord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_WordInfo::GetWord
// Il2CppName: GetWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_WordInfo::*)()>(&TMP_WordInfo::GetWord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_WordInfo), "GetWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.Extents
#include "TMPro/Extents.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.Extents.ToString
::Il2CppString* TMPro::Extents::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::Extents::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: Extents::Extents
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Extents::*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Extents::Extents<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Extents), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Extents::*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Extents::Extents<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Extents), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Extents::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Extents::*)()>(&Extents::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Extents), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.Mesh_Extents
#include "TMPro/Mesh_Extents.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.Mesh_Extents.ToString
::Il2CppString* TMPro::Mesh_Extents::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::Mesh_Extents::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: Mesh_Extents::Mesh_Extents
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mesh_Extents::*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Mesh_Extents::Mesh_Extents<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mesh_Extents), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Mesh_Extents::*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Mesh_Extents::Mesh_Extents<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mesh_Extents), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Mesh_Extents::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Mesh_Extents::*)()>(&Mesh_Extents::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mesh_Extents), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: TMPro.TMP_SubMesh
#include "TMPro/TMP_SubMesh.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: TMPro.TextContainer
#include "TMPro/TextContainer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: TMPro.TMP_TextInfo
#include "TMPro/TMP_TextInfo.hpp"
// Including type: TMPro.TMP_VertexDataUpdateFlags
#include "TMPro/TMP_VertexDataUpdateFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TextMeshPro.UpdateEnvMapMatrix
void TMPro::TextMeshPro::UpdateEnvMapMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateEnvMapMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEnvMapMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetMask
void TMPro::TextMeshPro::SetMask(TMPro::MaskingTypes maskType) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maskType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maskType);
}
// Autogenerated method: TMPro.TextMeshPro.SetMaskCoordinates
void TMPro::TextMeshPro::SetMaskCoordinates(UnityEngine::Vector4 coords) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetMaskCoordinates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaskCoordinates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(coords)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, coords);
}
// Autogenerated method: TMPro.TextMeshPro.SetMaskCoordinates
void TMPro::TextMeshPro::SetMaskCoordinates(UnityEngine::Vector4 coords, float softX, float softY) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetMaskCoordinates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaskCoordinates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(coords), ::il2cpp_utils::ExtractType(softX), ::il2cpp_utils::ExtractType(softY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, coords, softX, softY);
}
// Autogenerated method: TMPro.TextMeshPro.EnableMasking
void TMPro::TextMeshPro::EnableMasking() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::EnableMasking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableMasking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.DisableMasking
void TMPro::TextMeshPro::DisableMasking() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::DisableMasking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableMasking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateMask
void TMPro::TextMeshPro::UpdateMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.CreateMaterialInstance
void TMPro::TextMeshPro::CreateMaterialInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::CreateMaterialInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMaterialInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetPerspectiveCorrection
void TMPro::TextMeshPro::SetPerspectiveCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetPerspectiveCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPerspectiveCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.OnPreRenderObject
void TMPro::TextMeshPro::OnPreRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::OnPreRenderObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetMeshFilters
void TMPro::TextMeshPro::SetMeshFilters(bool state) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetMeshFilters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMeshFilters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateSDFScale
void TMPro::TextMeshPro::UpdateSDFScale(float scaleDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateSDFScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSDFScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scaleDelta)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scaleDelta);
}
// Autogenerated method: TMPro.TextMeshPro.get_sortingLayerID
int TMPro::TextMeshPro::get_sortingLayerID() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_sortingLayerID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortingLayerID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.set_sortingLayerID
void TMPro::TextMeshPro::set_sortingLayerID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::set_sortingLayerID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sortingLayerID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextMeshPro.get_sortingOrder
int TMPro::TextMeshPro::get_sortingOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_sortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.set_sortingOrder
void TMPro::TextMeshPro::set_sortingOrder(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::set_sortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextMeshPro.get_textContainer
TMPro::TextContainer* TMPro::TextMeshPro::get_textContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_textContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextContainer*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.get_renderer
UnityEngine::Renderer* TMPro::TextMeshPro::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_renderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.get_meshFilter
UnityEngine::MeshFilter* TMPro::TextMeshPro::get_meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_meshFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_meshFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::MeshFilter*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.get_maskType
TMPro::MaskingTypes TMPro::TextMeshPro::get_maskType() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_maskType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maskType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::MaskingTypes, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.set_maskType
void TMPro::TextMeshPro::set_maskType(TMPro::MaskingTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::set_maskType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maskType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextMeshPro.SetMask
void TMPro::TextMeshPro::SetMask(TMPro::MaskingTypes type, UnityEngine::Vector4 maskCoords) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(maskCoords)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, maskCoords);
}
// Autogenerated method: TMPro.TextMeshPro.SetMask
void TMPro::TextMeshPro::SetMask(TMPro::MaskingTypes type, UnityEngine::Vector4 maskCoords, float softnessX, float softnessY) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(maskCoords), ::il2cpp_utils::ExtractType(softnessX), ::il2cpp_utils::ExtractType(softnessY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, maskCoords, softnessX, softnessY);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateFontAsset
void TMPro::TextMeshPro::UpdateFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.CalculateLayoutInputHorizontal
void TMPro::TextMeshPro::CalculateLayoutInputHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::CalculateLayoutInputHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.CalculateLayoutInputVertical
void TMPro::TextMeshPro::CalculateLayoutInputVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::CalculateLayoutInputVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.Awake
void TMPro::TextMeshPro::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.OnEnable
void TMPro::TextMeshPro::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.OnDisable
void TMPro::TextMeshPro::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.OnDestroy
void TMPro::TextMeshPro::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.LoadFontAsset
void TMPro::TextMeshPro::LoadFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::LoadFontAsset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.GetMaterial
UnityEngine::Material* TMPro::TextMeshPro::GetMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TextMeshPro.GetMaterials
::Array<UnityEngine::Material*>* TMPro::TextMeshPro::GetMaterials(::Array<UnityEngine::Material*>* mats) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mats)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method, mats);
}
// Autogenerated method: TMPro.TextMeshPro.SetSharedMaterial
void TMPro::TextMeshPro::SetSharedMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetSharedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TextMeshPro.GetSharedMaterials
::Array<UnityEngine::Material*>* TMPro::TextMeshPro::GetSharedMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetSharedMaterials
void TMPro::TextMeshPro::SetSharedMaterials(::Array<UnityEngine::Material*>* materials) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, materials);
}
// Autogenerated method: TMPro.TextMeshPro.SetOutlineThickness
void TMPro::TextMeshPro::SetOutlineThickness(float thickness) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetOutlineThickness");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOutlineThickness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thickness)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, thickness);
}
// Autogenerated method: TMPro.TextMeshPro.SetFaceColor
void TMPro::TextMeshPro::SetFaceColor(UnityEngine::Color32 color) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetFaceColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFaceColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: TMPro.TextMeshPro.SetOutlineColor
void TMPro::TextMeshPro::SetOutlineColor(UnityEngine::Color32 color) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetOutlineColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOutlineColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: TMPro.TextMeshPro.SetShaderDepth
void TMPro::TextMeshPro::SetShaderDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetShaderDepth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetShaderDepth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetCulling
void TMPro::TextMeshPro::SetCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.GetPaddingForMaterial
float TMPro::TextMeshPro::GetPaddingForMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetPaddingForMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TextMeshPro.GetPaddingForMaterial
float TMPro::TextMeshPro::GetPaddingForMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetPaddingForMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetArraySizes
int TMPro::TextMeshPro::SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetArraySizes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArraySizes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, chars);
}
// Autogenerated method: TMPro.TextMeshPro.ComputeMarginSize
void TMPro::TextMeshPro::ComputeMarginSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::ComputeMarginSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeMarginSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.OnDidApplyAnimationProperties
void TMPro::TextMeshPro::OnDidApplyAnimationProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::OnDidApplyAnimationProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.OnTransformParentChanged
void TMPro::TextMeshPro::OnTransformParentChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::OnTransformParentChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformParentChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.OnRectTransformDimensionsChange
void TMPro::TextMeshPro::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.InternalUpdate
void TMPro::TextMeshPro::InternalUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::InternalUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.GenerateTextMesh
void TMPro::TextMeshPro::GenerateTextMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GenerateTextMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTextMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.GetTextContainerLocalCorners
::Array<UnityEngine::Vector3>* TMPro::TextMeshPro::GetTextContainerLocalCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetTextContainerLocalCorners");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextContainerLocalCorners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetActiveSubMeshes
void TMPro::TextMeshPro::SetActiveSubMeshes(bool state) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetActiveSubMeshes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActiveSubMeshes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: TMPro.TextMeshPro.ClearSubMeshObjects
void TMPro::TextMeshPro::ClearSubMeshObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::ClearSubMeshObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSubMeshObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.GetCompoundBounds
UnityEngine::Bounds TMPro::TextMeshPro::GetCompoundBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetCompoundBounds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCompoundBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.AdjustLineOffset
void TMPro::TextMeshPro::AdjustLineOffset(int startIndex, int endIndex, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::AdjustLineOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustLineOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endIndex), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startIndex, endIndex, offset);
}
// Autogenerated method: TMPro.TextMeshPro.get_autoSizeTextContainer
bool TMPro::TextMeshPro::get_autoSizeTextContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_autoSizeTextContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoSizeTextContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.set_autoSizeTextContainer
void TMPro::TextMeshPro::set_autoSizeTextContainer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::set_autoSizeTextContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_autoSizeTextContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextMeshPro.get_transform
UnityEngine::Transform* TMPro::TextMeshPro::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.get_mesh
UnityEngine::Mesh* TMPro::TextMeshPro::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::get_mesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetVerticesDirty
void TMPro::TextMeshPro::SetVerticesDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetVerticesDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVerticesDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetLayoutDirty
void TMPro::TextMeshPro::SetLayoutDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetLayoutDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetMaterialDirty
void TMPro::TextMeshPro::SetMaterialDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetMaterialDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaterialDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.SetAllDirty
void TMPro::TextMeshPro::SetAllDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::SetAllDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAllDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.Rebuild
void TMPro::TextMeshPro::Rebuild(UnityEngine::UI::CanvasUpdate update) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(update)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, update);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateMaterial
void TMPro::TextMeshPro::UpdateMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateMeshPadding
void TMPro::TextMeshPro::UpdateMeshPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateMeshPadding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMeshPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.ForceMeshUpdate
void TMPro::TextMeshPro::ForceMeshUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::ForceMeshUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceMeshUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshPro.ForceMeshUpdate
void TMPro::TextMeshPro::ForceMeshUpdate(bool ignoreInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::ForceMeshUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceMeshUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreInactive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ignoreInactive);
}
// Autogenerated method: TMPro.TextMeshPro.GetTextInfo
TMPro::TMP_TextInfo* TMPro::TextMeshPro::GetTextInfo(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::GetTextInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_TextInfo*, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TextMeshPro.ClearMesh
void TMPro::TextMeshPro::ClearMesh(bool updateMesh) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::ClearMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateMesh)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, updateMesh);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateGeometry
void TMPro::TextMeshPro::UpdateGeometry(UnityEngine::Mesh* mesh, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateGeometry");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, index);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateVertexData
void TMPro::TextMeshPro::UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateVertexData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flags);
}
// Autogenerated method: TMPro.TextMeshPro.UpdateVertexData
void TMPro::TextMeshPro::UpdateVertexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::UpdateVertexData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TextMeshPro::UpdateEnvMapMatrix
// Il2CppName: UpdateEnvMapMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::UpdateEnvMapMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateEnvMapMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetMask
// Il2CppName: SetMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(TMPro::MaskingTypes)>(&TextMeshPro::SetMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::MaskingTypes>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetMaskCoordinates
// Il2CppName: SetMaskCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(UnityEngine::Vector4)>(&TextMeshPro::SetMaskCoordinates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetMaskCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetMaskCoordinates
// Il2CppName: SetMaskCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(UnityEngine::Vector4, float, float)>(&TextMeshPro::SetMaskCoordinates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetMaskCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::EnableMasking
// Il2CppName: EnableMasking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::EnableMasking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "EnableMasking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::DisableMasking
// Il2CppName: DisableMasking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::DisableMasking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "DisableMasking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateMask
// Il2CppName: UpdateMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::UpdateMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::CreateMaterialInstance
// Il2CppName: CreateMaterialInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::CreateMaterialInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "CreateMaterialInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetPerspectiveCorrection
// Il2CppName: SetPerspectiveCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::SetPerspectiveCorrection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetPerspectiveCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::OnPreRenderObject
// Il2CppName: OnPreRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::OnPreRenderObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "OnPreRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetMeshFilters
// Il2CppName: SetMeshFilters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(bool)>(&TextMeshPro::SetMeshFilters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetMeshFilters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateSDFScale
// Il2CppName: UpdateSDFScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(float)>(&TextMeshPro::UpdateSDFScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateSDFScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_sortingLayerID
// Il2CppName: get_sortingLayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextMeshPro::*)()>(&TextMeshPro::get_sortingLayerID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::set_sortingLayerID
// Il2CppName: set_sortingLayerID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(int)>(&TextMeshPro::set_sortingLayerID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "set_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_sortingOrder
// Il2CppName: get_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextMeshPro::*)()>(&TextMeshPro::get_sortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::set_sortingOrder
// Il2CppName: set_sortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(int)>(&TextMeshPro::set_sortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "set_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_textContainer
// Il2CppName: get_textContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextContainer* (TextMeshPro::*)()>(&TextMeshPro::get_textContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_textContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_renderer
// Il2CppName: get_renderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Renderer* (TextMeshPro::*)()>(&TextMeshPro::get_renderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_renderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_meshFilter
// Il2CppName: get_meshFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MeshFilter* (TextMeshPro::*)()>(&TextMeshPro::get_meshFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_meshFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_maskType
// Il2CppName: get_maskType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::MaskingTypes (TextMeshPro::*)()>(&TextMeshPro::get_maskType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_maskType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::set_maskType
// Il2CppName: set_maskType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(TMPro::MaskingTypes)>(&TextMeshPro::set_maskType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "set_maskType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::MaskingTypes>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetMask
// Il2CppName: SetMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(TMPro::MaskingTypes, UnityEngine::Vector4)>(&TextMeshPro::SetMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::MaskingTypes>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetMask
// Il2CppName: SetMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(TMPro::MaskingTypes, UnityEngine::Vector4, float, float)>(&TextMeshPro::SetMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::MaskingTypes>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateFontAsset
// Il2CppName: UpdateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::UpdateFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::CalculateLayoutInputHorizontal
// Il2CppName: CalculateLayoutInputHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::CalculateLayoutInputHorizontal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::CalculateLayoutInputVertical
// Il2CppName: CalculateLayoutInputVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::CalculateLayoutInputVertical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::LoadFontAsset
// Il2CppName: LoadFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::LoadFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "LoadFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TextMeshPro::*)(UnityEngine::Material*)>(&TextMeshPro::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetMaterials
// Il2CppName: GetMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TextMeshPro::*)(::Array<UnityEngine::Material*>*)>(&TextMeshPro::GetMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetSharedMaterial
// Il2CppName: SetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(UnityEngine::Material*)>(&TextMeshPro::SetSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetSharedMaterials
// Il2CppName: GetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TextMeshPro::*)()>(&TextMeshPro::GetSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetSharedMaterials
// Il2CppName: SetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(::Array<UnityEngine::Material*>*)>(&TextMeshPro::SetSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetOutlineThickness
// Il2CppName: SetOutlineThickness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(float)>(&TextMeshPro::SetOutlineThickness)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetOutlineThickness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetFaceColor
// Il2CppName: SetFaceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(UnityEngine::Color32)>(&TextMeshPro::SetFaceColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetFaceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetOutlineColor
// Il2CppName: SetOutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(UnityEngine::Color32)>(&TextMeshPro::SetOutlineColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetOutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetShaderDepth
// Il2CppName: SetShaderDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::SetShaderDepth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetShaderDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetCulling
// Il2CppName: SetCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::SetCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TextMeshPro::*)(UnityEngine::Material*)>(&TextMeshPro::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TextMeshPro::*)()>(&TextMeshPro::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetArraySizes
// Il2CppName: SetArraySizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextMeshPro::*)(::Array<TMPro::TMP_Text::UnicodeChar>*)>(&TextMeshPro::SetArraySizes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetArraySizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::ComputeMarginSize
// Il2CppName: ComputeMarginSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::ComputeMarginSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "ComputeMarginSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::OnDidApplyAnimationProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::OnTransformParentChanged
// Il2CppName: OnTransformParentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::OnTransformParentChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "OnTransformParentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::OnRectTransformDimensionsChange
// Il2CppName: OnRectTransformDimensionsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::OnRectTransformDimensionsChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::InternalUpdate
// Il2CppName: InternalUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::InternalUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "InternalUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GenerateTextMesh
// Il2CppName: GenerateTextMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::GenerateTextMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GenerateTextMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetTextContainerLocalCorners
// Il2CppName: GetTextContainerLocalCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (TextMeshPro::*)()>(&TextMeshPro::GetTextContainerLocalCorners)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetTextContainerLocalCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetActiveSubMeshes
// Il2CppName: SetActiveSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(bool)>(&TextMeshPro::SetActiveSubMeshes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetActiveSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::ClearSubMeshObjects
// Il2CppName: ClearSubMeshObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::ClearSubMeshObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "ClearSubMeshObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetCompoundBounds
// Il2CppName: GetCompoundBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (TextMeshPro::*)()>(&TextMeshPro::GetCompoundBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetCompoundBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::AdjustLineOffset
// Il2CppName: AdjustLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(int, int, float)>(&TextMeshPro::AdjustLineOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "AdjustLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_autoSizeTextContainer
// Il2CppName: get_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextMeshPro::*)()>(&TextMeshPro::get_autoSizeTextContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::set_autoSizeTextContainer
// Il2CppName: set_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(bool)>(&TextMeshPro::set_autoSizeTextContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "set_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (TextMeshPro::*)()>(&TextMeshPro::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (TextMeshPro::*)()>(&TextMeshPro::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetVerticesDirty
// Il2CppName: SetVerticesDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::SetVerticesDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetVerticesDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetLayoutDirty
// Il2CppName: SetLayoutDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::SetLayoutDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetLayoutDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetMaterialDirty
// Il2CppName: SetMaterialDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::SetMaterialDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetMaterialDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::SetAllDirty
// Il2CppName: SetAllDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::SetAllDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "SetAllDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(UnityEngine::UI::CanvasUpdate)>(&TextMeshPro::Rebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateMaterial
// Il2CppName: UpdateMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::UpdateMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateMeshPadding
// Il2CppName: UpdateMeshPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::UpdateMeshPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateMeshPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::ForceMeshUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(bool)>(&TextMeshPro::ForceMeshUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::GetTextInfo
// Il2CppName: GetTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_TextInfo* (TextMeshPro::*)(::Il2CppString*)>(&TextMeshPro::GetTextInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "GetTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(bool)>(&TextMeshPro::ClearMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(UnityEngine::Mesh*, int)>(&TextMeshPro::UpdateGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)(TMPro::TMP_VertexDataUpdateFlags)>(&TextMeshPro::UpdateVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_VertexDataUpdateFlags>()});
  }
};
// Writing MetadataGetter for method: TextMeshPro::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::UpdateVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshPro::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshPro::*)()>(&TextMeshPro::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshPro*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: TMPro.TMP_SubMeshUI
#include "TMPro/TMP_SubMeshUI.hpp"
// Including type: UnityEngine.CanvasRenderer
#include "UnityEngine/CanvasRenderer.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: TMPro.TMP_TextInfo
#include "TMPro/TMP_TextInfo.hpp"
// Including type: TMPro.TMP_VertexDataUpdateFlags
#include "TMPro/TMP_VertexDataUpdateFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TextMeshProUGUI.GetCanvas
UnityEngine::Canvas* TMPro::TextMeshProUGUI::GetCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Canvas*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateEnvMapMatrix
void TMPro::TextMeshProUGUI::UpdateEnvMapMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateEnvMapMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEnvMapMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.EnableMasking
void TMPro::TextMeshProUGUI::EnableMasking() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::EnableMasking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableMasking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.DisableMasking
void TMPro::TextMeshProUGUI::DisableMasking() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::DisableMasking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableMasking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateMask
void TMPro::TextMeshProUGUI::UpdateMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetPerspectiveCorrection
void TMPro::TextMeshProUGUI::SetPerspectiveCorrection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetPerspectiveCorrection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPerspectiveCorrection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetMeshArrays
void TMPro::TextMeshProUGUI::SetMeshArrays(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetMeshArrays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMeshArrays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, size);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnPreRenderCanvas
void TMPro::TextMeshProUGUI::OnPreRenderCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnPreRenderCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRenderCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateSDFScale
void TMPro::TextMeshProUGUI::UpdateSDFScale(float scaleDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateSDFScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSDFScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scaleDelta)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scaleDelta);
}
// Autogenerated method: TMPro.TextMeshProUGUI.CalculateLayoutInputHorizontal
void TMPro::TextMeshProUGUI::CalculateLayoutInputHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::CalculateLayoutInputHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.CalculateLayoutInputVertical
void TMPro::TextMeshProUGUI::CalculateLayoutInputVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::CalculateLayoutInputVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateSubObjectPivot
void TMPro::TextMeshProUGUI::UpdateSubObjectPivot() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateSubObjectPivot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSubObjectPivot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.get_maskOffset
UnityEngine::Vector4 TMPro::TextMeshProUGUI::get_maskOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::get_maskOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maskOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.set_maskOffset
void TMPro::TextMeshProUGUI::set_maskOffset(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::set_maskOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maskOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateFontAsset
void TMPro::TextMeshProUGUI::UpdateFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.Awake
void TMPro::TextMeshProUGUI::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnEnable
void TMPro::TextMeshProUGUI::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnDisable
void TMPro::TextMeshProUGUI::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnDestroy
void TMPro::TextMeshProUGUI::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.LoadFontAsset
void TMPro::TextMeshProUGUI::LoadFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::LoadFontAsset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetMaterial
UnityEngine::Material* TMPro::TextMeshProUGUI::GetMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetMaterials
::Array<UnityEngine::Material*>* TMPro::TextMeshProUGUI::GetMaterials(::Array<UnityEngine::Material*>* mats) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mats)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method, mats);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetSharedMaterial
void TMPro::TextMeshProUGUI::SetSharedMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetSharedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetSharedMaterials
::Array<UnityEngine::Material*>* TMPro::TextMeshProUGUI::GetSharedMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetSharedMaterials
void TMPro::TextMeshProUGUI::SetSharedMaterials(::Array<UnityEngine::Material*>* materials) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, materials);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetOutlineThickness
void TMPro::TextMeshProUGUI::SetOutlineThickness(float thickness) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetOutlineThickness");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOutlineThickness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thickness)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, thickness);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetFaceColor
void TMPro::TextMeshProUGUI::SetFaceColor(UnityEngine::Color32 color) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetFaceColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFaceColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetOutlineColor
void TMPro::TextMeshProUGUI::SetOutlineColor(UnityEngine::Color32 color) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetOutlineColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOutlineColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetShaderDepth
void TMPro::TextMeshProUGUI::SetShaderDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetShaderDepth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetShaderDepth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetCulling
void TMPro::TextMeshProUGUI::SetCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetPaddingForMaterial
float TMPro::TextMeshProUGUI::GetPaddingForMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetPaddingForMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetPaddingForMaterial
float TMPro::TextMeshProUGUI::GetPaddingForMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetPaddingForMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetArraySizes
int TMPro::TextMeshProUGUI::SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetArraySizes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArraySizes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, chars);
}
// Autogenerated method: TMPro.TextMeshProUGUI.ComputeMarginSize
void TMPro::TextMeshProUGUI::ComputeMarginSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::ComputeMarginSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeMarginSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnDidApplyAnimationProperties
void TMPro::TextMeshProUGUI::OnDidApplyAnimationProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnDidApplyAnimationProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnCanvasHierarchyChanged
void TMPro::TextMeshProUGUI::OnCanvasHierarchyChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnCanvasHierarchyChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCanvasHierarchyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnTransformParentChanged
void TMPro::TextMeshProUGUI::OnTransformParentChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnTransformParentChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformParentChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.OnRectTransformDimensionsChange
void TMPro::TextMeshProUGUI::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.InternalUpdate
void TMPro::TextMeshProUGUI::InternalUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::InternalUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GenerateTextMesh
void TMPro::TextMeshProUGUI::GenerateTextMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GenerateTextMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTextMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetTextContainerLocalCorners
::Array<UnityEngine::Vector3>* TMPro::TextMeshProUGUI::GetTextContainerLocalCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetTextContainerLocalCorners");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextContainerLocalCorners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetActiveSubMeshes
void TMPro::TextMeshProUGUI::SetActiveSubMeshes(bool state) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetActiveSubMeshes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActiveSubMeshes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetCompoundBounds
UnityEngine::Bounds TMPro::TextMeshProUGUI::GetCompoundBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetCompoundBounds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCompoundBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.AdjustLineOffset
void TMPro::TextMeshProUGUI::AdjustLineOffset(int startIndex, int endIndex, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::AdjustLineOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustLineOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endIndex), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startIndex, endIndex, offset);
}
// Autogenerated method: TMPro.TextMeshProUGUI.get_materialForRendering
UnityEngine::Material* TMPro::TextMeshProUGUI::get_materialForRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::get_materialForRendering");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialForRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.get_autoSizeTextContainer
bool TMPro::TextMeshProUGUI::get_autoSizeTextContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::get_autoSizeTextContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoSizeTextContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.set_autoSizeTextContainer
void TMPro::TextMeshProUGUI::set_autoSizeTextContainer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::set_autoSizeTextContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_autoSizeTextContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextMeshProUGUI.get_mesh
UnityEngine::Mesh* TMPro::TextMeshProUGUI::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::get_mesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.get_canvasRenderer
UnityEngine::CanvasRenderer* TMPro::TextMeshProUGUI::get_canvasRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::get_canvasRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canvasRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::CanvasRenderer*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetVerticesDirty
void TMPro::TextMeshProUGUI::SetVerticesDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetVerticesDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVerticesDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetLayoutDirty
void TMPro::TextMeshProUGUI::SetLayoutDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetLayoutDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetMaterialDirty
void TMPro::TextMeshProUGUI::SetMaterialDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetMaterialDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaterialDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.SetAllDirty
void TMPro::TextMeshProUGUI::SetAllDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::SetAllDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAllDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.Rebuild
void TMPro::TextMeshProUGUI::Rebuild(UnityEngine::UI::CanvasUpdate update) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(update)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, update);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetModifiedMaterial
UnityEngine::Material* TMPro::TextMeshProUGUI::GetModifiedMaterial(UnityEngine::Material* baseMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetModifiedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetModifiedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseMaterial)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, baseMaterial);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateMaterial
void TMPro::TextMeshProUGUI::UpdateMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.RecalculateClipping
void TMPro::TextMeshProUGUI::RecalculateClipping() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::RecalculateClipping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateClipping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.RecalculateMasking
void TMPro::TextMeshProUGUI::RecalculateMasking() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::RecalculateMasking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateMasking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.Cull
void TMPro::TextMeshProUGUI::Cull(UnityEngine::Rect clipRect, bool validRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::Cull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipRect), ::il2cpp_utils::ExtractType(validRect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clipRect, validRect);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateMeshPadding
void TMPro::TextMeshProUGUI::UpdateMeshPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateMeshPadding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMeshPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.InternalCrossFadeColor
void TMPro::TextMeshProUGUI::InternalCrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::InternalCrossFadeColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCrossFadeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(ignoreTimeScale), ::il2cpp_utils::ExtractType(useAlpha)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetColor, duration, ignoreTimeScale, useAlpha);
}
// Autogenerated method: TMPro.TextMeshProUGUI.InternalCrossFadeAlpha
void TMPro::TextMeshProUGUI::InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::InternalCrossFadeAlpha");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCrossFadeAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alpha), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(ignoreTimeScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, alpha, duration, ignoreTimeScale);
}
// Autogenerated method: TMPro.TextMeshProUGUI.ForceMeshUpdate
void TMPro::TextMeshProUGUI::ForceMeshUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::ForceMeshUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceMeshUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.ForceMeshUpdate
void TMPro::TextMeshProUGUI::ForceMeshUpdate(bool ignoreInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::ForceMeshUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceMeshUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreInactive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ignoreInactive);
}
// Autogenerated method: TMPro.TextMeshProUGUI.GetTextInfo
TMPro::TMP_TextInfo* TMPro::TextMeshProUGUI::GetTextInfo(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::GetTextInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_TextInfo*, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TextMeshProUGUI.ClearMesh
void TMPro::TextMeshProUGUI::ClearMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::ClearMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateGeometry
void TMPro::TextMeshProUGUI::UpdateGeometry(UnityEngine::Mesh* mesh, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateGeometry");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, index);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateVertexData
void TMPro::TextMeshProUGUI::UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateVertexData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flags);
}
// Autogenerated method: TMPro.TextMeshProUGUI.UpdateVertexData
void TMPro::TextMeshProUGUI::UpdateVertexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::UpdateVertexData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TextMeshProUGUI::GetCanvas
// Il2CppName: GetCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Canvas* (TextMeshProUGUI::*)()>(&TextMeshProUGUI::GetCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateEnvMapMatrix
// Il2CppName: UpdateEnvMapMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::UpdateEnvMapMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateEnvMapMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::EnableMasking
// Il2CppName: EnableMasking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::EnableMasking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "EnableMasking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::DisableMasking
// Il2CppName: DisableMasking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::DisableMasking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "DisableMasking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateMask
// Il2CppName: UpdateMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::UpdateMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetPerspectiveCorrection
// Il2CppName: SetPerspectiveCorrection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::SetPerspectiveCorrection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetPerspectiveCorrection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetMeshArrays
// Il2CppName: SetMeshArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(int)>(&TextMeshProUGUI::SetMeshArrays)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetMeshArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnPreRenderCanvas
// Il2CppName: OnPreRenderCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnPreRenderCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnPreRenderCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateSDFScale
// Il2CppName: UpdateSDFScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(float)>(&TextMeshProUGUI::UpdateSDFScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateSDFScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::CalculateLayoutInputHorizontal
// Il2CppName: CalculateLayoutInputHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::CalculateLayoutInputHorizontal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::CalculateLayoutInputVertical
// Il2CppName: CalculateLayoutInputVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::CalculateLayoutInputVertical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateSubObjectPivot
// Il2CppName: UpdateSubObjectPivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::UpdateSubObjectPivot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateSubObjectPivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::get_maskOffset
// Il2CppName: get_maskOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (TextMeshProUGUI::*)()>(&TextMeshProUGUI::get_maskOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "get_maskOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::set_maskOffset
// Il2CppName: set_maskOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::Vector4)>(&TextMeshProUGUI::set_maskOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "set_maskOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateFontAsset
// Il2CppName: UpdateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::UpdateFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::LoadFontAsset
// Il2CppName: LoadFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::LoadFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "LoadFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TextMeshProUGUI::*)(UnityEngine::Material*)>(&TextMeshProUGUI::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetMaterials
// Il2CppName: GetMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TextMeshProUGUI::*)(::Array<UnityEngine::Material*>*)>(&TextMeshProUGUI::GetMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetSharedMaterial
// Il2CppName: SetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::Material*)>(&TextMeshProUGUI::SetSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetSharedMaterials
// Il2CppName: GetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TextMeshProUGUI::*)()>(&TextMeshProUGUI::GetSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetSharedMaterials
// Il2CppName: SetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(::Array<UnityEngine::Material*>*)>(&TextMeshProUGUI::SetSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetOutlineThickness
// Il2CppName: SetOutlineThickness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(float)>(&TextMeshProUGUI::SetOutlineThickness)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetOutlineThickness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetFaceColor
// Il2CppName: SetFaceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::Color32)>(&TextMeshProUGUI::SetFaceColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetFaceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetOutlineColor
// Il2CppName: SetOutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::Color32)>(&TextMeshProUGUI::SetOutlineColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetOutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetShaderDepth
// Il2CppName: SetShaderDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::SetShaderDepth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetShaderDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetCulling
// Il2CppName: SetCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::SetCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TextMeshProUGUI::*)(UnityEngine::Material*)>(&TextMeshProUGUI::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TextMeshProUGUI::*)()>(&TextMeshProUGUI::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetArraySizes
// Il2CppName: SetArraySizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TextMeshProUGUI::*)(::Array<TMPro::TMP_Text::UnicodeChar>*)>(&TextMeshProUGUI::SetArraySizes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetArraySizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::ComputeMarginSize
// Il2CppName: ComputeMarginSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::ComputeMarginSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "ComputeMarginSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnDidApplyAnimationProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnCanvasHierarchyChanged
// Il2CppName: OnCanvasHierarchyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnCanvasHierarchyChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnCanvasHierarchyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnTransformParentChanged
// Il2CppName: OnTransformParentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnTransformParentChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnTransformParentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::OnRectTransformDimensionsChange
// Il2CppName: OnRectTransformDimensionsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::OnRectTransformDimensionsChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::InternalUpdate
// Il2CppName: InternalUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::InternalUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "InternalUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GenerateTextMesh
// Il2CppName: GenerateTextMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::GenerateTextMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GenerateTextMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetTextContainerLocalCorners
// Il2CppName: GetTextContainerLocalCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (TextMeshProUGUI::*)()>(&TextMeshProUGUI::GetTextContainerLocalCorners)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetTextContainerLocalCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetActiveSubMeshes
// Il2CppName: SetActiveSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(bool)>(&TextMeshProUGUI::SetActiveSubMeshes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetActiveSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetCompoundBounds
// Il2CppName: GetCompoundBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (TextMeshProUGUI::*)()>(&TextMeshProUGUI::GetCompoundBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetCompoundBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::AdjustLineOffset
// Il2CppName: AdjustLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(int, int, float)>(&TextMeshProUGUI::AdjustLineOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "AdjustLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::get_materialForRendering
// Il2CppName: get_materialForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TextMeshProUGUI::*)()>(&TextMeshProUGUI::get_materialForRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "get_materialForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::get_autoSizeTextContainer
// Il2CppName: get_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextMeshProUGUI::*)()>(&TextMeshProUGUI::get_autoSizeTextContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "get_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::set_autoSizeTextContainer
// Il2CppName: set_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(bool)>(&TextMeshProUGUI::set_autoSizeTextContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "set_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (TextMeshProUGUI::*)()>(&TextMeshProUGUI::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::get_canvasRenderer
// Il2CppName: get_canvasRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::CanvasRenderer* (TextMeshProUGUI::*)()>(&TextMeshProUGUI::get_canvasRenderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "get_canvasRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetVerticesDirty
// Il2CppName: SetVerticesDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::SetVerticesDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetVerticesDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetLayoutDirty
// Il2CppName: SetLayoutDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::SetLayoutDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetLayoutDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetMaterialDirty
// Il2CppName: SetMaterialDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::SetMaterialDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetMaterialDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::SetAllDirty
// Il2CppName: SetAllDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::SetAllDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "SetAllDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::UI::CanvasUpdate)>(&TextMeshProUGUI::Rebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetModifiedMaterial
// Il2CppName: GetModifiedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TextMeshProUGUI::*)(UnityEngine::Material*)>(&TextMeshProUGUI::GetModifiedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetModifiedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateMaterial
// Il2CppName: UpdateMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::UpdateMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::RecalculateClipping
// Il2CppName: RecalculateClipping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::RecalculateClipping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "RecalculateClipping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::RecalculateMasking
// Il2CppName: RecalculateMasking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::RecalculateMasking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "RecalculateMasking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::Cull
// Il2CppName: Cull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::Rect, bool)>(&TextMeshProUGUI::Cull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "Cull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateMeshPadding
// Il2CppName: UpdateMeshPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::UpdateMeshPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateMeshPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::InternalCrossFadeColor
// Il2CppName: InternalCrossFadeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::Color, float, bool, bool)>(&TextMeshProUGUI::InternalCrossFadeColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "InternalCrossFadeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::InternalCrossFadeAlpha
// Il2CppName: InternalCrossFadeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(float, float, bool)>(&TextMeshProUGUI::InternalCrossFadeAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "InternalCrossFadeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::ForceMeshUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(bool)>(&TextMeshProUGUI::ForceMeshUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::GetTextInfo
// Il2CppName: GetTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_TextInfo* (TextMeshProUGUI::*)(::Il2CppString*)>(&TextMeshProUGUI::GetTextInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "GetTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::ClearMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(UnityEngine::Mesh*, int)>(&TextMeshProUGUI::UpdateGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)(TMPro::TMP_VertexDataUpdateFlags)>(&TextMeshProUGUI::UpdateVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_VertexDataUpdateFlags>()});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::UpdateVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProUGUI::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProUGUI::*)()>(&TextMeshProUGUI::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProUGUI*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TextContainerAnchors
#include "TMPro/TextContainerAnchors.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors TopLeft
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_TopLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_TopLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "TopLeft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors TopLeft
void TMPro::TextContainerAnchors::_set_TopLeft(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_TopLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "TopLeft", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors Top
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_Top");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "Top"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors Top
void TMPro::TextContainerAnchors::_set_Top(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_Top");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "Top", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors TopRight
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_TopRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_TopRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "TopRight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors TopRight
void TMPro::TextContainerAnchors::_set_TopRight(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_TopRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "TopRight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors Left
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "Left"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors Left
void TMPro::TextContainerAnchors::_set_Left(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors Middle
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors Middle
void TMPro::TextContainerAnchors::_set_Middle(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors Right
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "Right"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors Right
void TMPro::TextContainerAnchors::_set_Right(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors BottomLeft
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_BottomLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_BottomLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "BottomLeft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors BottomLeft
void TMPro::TextContainerAnchors::_set_BottomLeft(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_BottomLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "BottomLeft", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors Bottom
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_Bottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_Bottom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "Bottom"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors Bottom
void TMPro::TextContainerAnchors::_set_Bottom(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_Bottom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "Bottom", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors BottomRight
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_BottomRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_BottomRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "BottomRight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors BottomRight
void TMPro::TextContainerAnchors::_set_BottomRight(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_BottomRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "BottomRight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextContainerAnchors Custom
TMPro::TextContainerAnchors TMPro::TextContainerAnchors::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextContainerAnchors>("TMPro", "TextContainerAnchors", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextContainerAnchors Custom
void TMPro::TextContainerAnchors::_set_Custom(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainerAnchors::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainerAnchors", "Custom", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TextContainer
#include "TMPro/TextContainer.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector2 k_defaultSize
UnityEngine::Vector2 TMPro::TextContainer::_get_k_defaultSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::_get_k_defaultSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TextContainer", "k_defaultSize"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector2 k_defaultSize
void TMPro::TextContainer::_set_k_defaultSize(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::_set_k_defaultSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextContainer", "k_defaultSize", value));
}
// Autogenerated method: TMPro.TextContainer.get_hasChanged
bool TMPro::TextContainer::get_hasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_hasChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_hasChanged
void TMPro::TextContainer::set_hasChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_hasChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hasChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_pivot
UnityEngine::Vector2 TMPro::TextContainer::get_pivot() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_pivot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pivot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_pivot
void TMPro::TextContainer::set_pivot(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_pivot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pivot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_anchorPosition
TMPro::TextContainerAnchors TMPro::TextContainer::get_anchorPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_anchorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_anchorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextContainerAnchors, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_anchorPosition
void TMPro::TextContainer::set_anchorPosition(TMPro::TextContainerAnchors value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_anchorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_anchorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_rect
UnityEngine::Rect TMPro::TextContainer::get_rect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_rect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rect, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_rect
void TMPro::TextContainer::set_rect(UnityEngine::Rect value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_rect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_size
UnityEngine::Vector2 TMPro::TextContainer::get_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_size
void TMPro::TextContainer::set_size(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_width
float TMPro::TextContainer::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_width
void TMPro::TextContainer::set_width(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_height
float TMPro::TextContainer::get_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_height");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_height", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_height
void TMPro::TextContainer::set_height(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_height");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_height", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_isDefaultWidth
bool TMPro::TextContainer::get_isDefaultWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_isDefaultWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDefaultWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.get_isDefaultHeight
bool TMPro::TextContainer::get_isDefaultHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_isDefaultHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDefaultHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.get_isAutoFitting
bool TMPro::TextContainer::get_isAutoFitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_isAutoFitting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAutoFitting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_isAutoFitting
void TMPro::TextContainer::set_isAutoFitting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_isAutoFitting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isAutoFitting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_corners
::Array<UnityEngine::Vector3>* TMPro::TextContainer::get_corners() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_corners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_corners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.get_worldCorners
::Array<UnityEngine::Vector3>* TMPro::TextContainer::get_worldCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_worldCorners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldCorners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.get_margins
UnityEngine::Vector4 TMPro::TextContainer::get_margins() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_margins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_margins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.set_margins
void TMPro::TextContainer::set_margins(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::set_margins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_margins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TextContainer.get_rectTransform
UnityEngine::RectTransform* TMPro::TextContainer::get_rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_rectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.get_textMeshPro
TMPro::TextMeshPro* TMPro::TextContainer::get_textMeshPro() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::get_textMeshPro");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textMeshPro", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextMeshPro*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.OnContainerChanged
void TMPro::TextContainer::OnContainerChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::OnContainerChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnContainerChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.SetRect
void TMPro::TextContainer::SetRect(UnityEngine::Vector2 size) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::SetRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, size);
}
// Autogenerated method: TMPro.TextContainer.UpdateCorners
void TMPro::TextContainer::UpdateCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::UpdateCorners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCorners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.GetPivot
UnityEngine::Vector2 TMPro::TextContainer::GetPivot(TMPro::TextContainerAnchors anchor) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::GetPivot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPivot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(anchor)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, anchor);
}
// Autogenerated method: TMPro.TextContainer.GetAnchorPosition
TMPro::TextContainerAnchors TMPro::TextContainer::GetAnchorPosition(UnityEngine::Vector2 pivot) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::GetAnchorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnchorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pivot)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextContainerAnchors, false>(this, ___internal__method, pivot);
}
// Autogenerated method: TMPro.TextContainer.Awake
void TMPro::TextContainer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.OnEnable
void TMPro::TextContainer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.OnDisable
void TMPro::TextContainer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer.OnRectTransformDimensionsChange
void TMPro::TextContainer::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TextContainer..cctor
void TMPro::TextContainer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextContainer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TextContainer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TextContainer::get_hasChanged
// Il2CppName: get_hasChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextContainer::*)()>(&TextContainer::get_hasChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_hasChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_hasChanged
// Il2CppName: set_hasChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(bool)>(&TextContainer::set_hasChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_hasChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_pivot
// Il2CppName: get_pivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TextContainer::*)()>(&TextContainer::get_pivot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_pivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_pivot
// Il2CppName: set_pivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(UnityEngine::Vector2)>(&TextContainer::set_pivot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_pivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_anchorPosition
// Il2CppName: get_anchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextContainerAnchors (TextContainer::*)()>(&TextContainer::get_anchorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_anchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_anchorPosition
// Il2CppName: set_anchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(TMPro::TextContainerAnchors)>(&TextContainer::set_anchorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_anchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextContainerAnchors>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_rect
// Il2CppName: get_rect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rect (TextContainer::*)()>(&TextContainer::get_rect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_rect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_rect
// Il2CppName: set_rect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(UnityEngine::Rect)>(&TextContainer::set_rect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_rect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_size
// Il2CppName: get_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TextContainer::*)()>(&TextContainer::get_size)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_size
// Il2CppName: set_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(UnityEngine::Vector2)>(&TextContainer::set_size)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TextContainer::*)()>(&TextContainer::get_width)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(float)>(&TextContainer::set_width)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_height
// Il2CppName: get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TextContainer::*)()>(&TextContainer::get_height)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_height
// Il2CppName: set_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(float)>(&TextContainer::set_height)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_isDefaultWidth
// Il2CppName: get_isDefaultWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextContainer::*)()>(&TextContainer::get_isDefaultWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_isDefaultWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::get_isDefaultHeight
// Il2CppName: get_isDefaultHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextContainer::*)()>(&TextContainer::get_isDefaultHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_isDefaultHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::get_isAutoFitting
// Il2CppName: get_isAutoFitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextContainer::*)()>(&TextContainer::get_isAutoFitting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_isAutoFitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_isAutoFitting
// Il2CppName: set_isAutoFitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(bool)>(&TextContainer::set_isAutoFitting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_isAutoFitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_corners
// Il2CppName: get_corners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (TextContainer::*)()>(&TextContainer::get_corners)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_corners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::get_worldCorners
// Il2CppName: get_worldCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (TextContainer::*)()>(&TextContainer::get_worldCorners)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_worldCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::get_margins
// Il2CppName: get_margins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (TextContainer::*)()>(&TextContainer::get_margins)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_margins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::set_margins
// Il2CppName: set_margins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(UnityEngine::Vector4)>(&TextContainer::set_margins)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "set_margins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: TextContainer::get_rectTransform
// Il2CppName: get_rectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (TextContainer::*)()>(&TextContainer::get_rectTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_rectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::get_textMeshPro
// Il2CppName: get_textMeshPro
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextMeshPro* (TextContainer::*)()>(&TextContainer::get_textMeshPro)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "get_textMeshPro", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::OnContainerChanged
// Il2CppName: OnContainerChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::OnContainerChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "OnContainerChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::SetRect
// Il2CppName: SetRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)(UnityEngine::Vector2)>(&TextContainer::SetRect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "SetRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TextContainer::UpdateCorners
// Il2CppName: UpdateCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::UpdateCorners)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "UpdateCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::GetPivot
// Il2CppName: GetPivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TextContainer::*)(TMPro::TextContainerAnchors)>(&TextContainer::GetPivot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "GetPivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextContainerAnchors>()});
  }
};
// Writing MetadataGetter for method: TextContainer::GetAnchorPosition
// Il2CppName: GetAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextContainerAnchors (TextContainer::*)(UnityEngine::Vector2)>(&TextContainer::GetAnchorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "GetAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TextContainer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::OnRectTransformDimensionsChange
// Il2CppName: OnRectTransformDimensionsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::OnRectTransformDimensionsChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextContainer::*)()>(&TextContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextContainer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TextContainer::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextContainer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.SpriteAssetImportFormats
#include "TMPro/SpriteAssetUtilities/SpriteAssetImportFormats.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats None
TMPro::SpriteAssetUtilities::SpriteAssetImportFormats TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::SpriteAssetUtilities::SpriteAssetImportFormats>("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "None"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats None
void TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_None(TMPro::SpriteAssetUtilities::SpriteAssetImportFormats value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats TexturePacker
TMPro::SpriteAssetUtilities::SpriteAssetImportFormats TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_TexturePacker() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_get_TexturePacker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::SpriteAssetUtilities::SpriteAssetImportFormats>("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "TexturePacker"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.SpriteAssetUtilities.SpriteAssetImportFormats TexturePacker
void TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_TexturePacker(TMPro::SpriteAssetUtilities::SpriteAssetImportFormats value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::SpriteAssetUtilities::SpriteAssetImportFormats::_set_TexturePacker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro.SpriteAssetUtilities", "SpriteAssetImportFormats", "TexturePacker", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.TexturePacker
#include "TMPro/SpriteAssetUtilities/TexturePacker.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteFrame
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteFrame.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteSize
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteSize.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteData
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteData.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteDataObject
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteDataObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TexturePacker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TexturePacker::*)()>(&TexturePacker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TexturePacker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TexturePacker::*)()>(&TexturePacker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TexturePacker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteFrame
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteFrame.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.SpriteAssetUtilities.TexturePacker/SpriteFrame.ToString
::Il2CppString* TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: TexturePacker::SpriteFrame::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TexturePacker::SpriteFrame::*)()>(&TexturePacker::SpriteFrame::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TexturePacker::SpriteFrame), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteSize
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteSize.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.SpriteAssetUtilities.TexturePacker/SpriteSize.ToString
::Il2CppString* TMPro::SpriteAssetUtilities::TexturePacker::SpriteSize::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::SpriteAssetUtilities::TexturePacker::SpriteSize::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: TexturePacker::SpriteSize::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TexturePacker::SpriteSize::*)()>(&TexturePacker::SpriteSize::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TexturePacker::SpriteSize), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteDataObject
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteDataObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TexturePacker::SpriteDataObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TexturePacker::SpriteDataObject::*)()>(&TexturePacker::SpriteDataObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TexturePacker::SpriteDataObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TexturePacker::SpriteDataObject::*)()>(&TexturePacker::SpriteDataObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TexturePacker::SpriteDataObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.ActivationMixerPlayable
#include "UnityEngine/Timeline/ActivationMixerPlayable.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Playables.ScriptPlayable`1
#include "UnityEngine/Playables/ScriptPlayable_1.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.Create
UnityEngine::Playables::ScriptPlayable_1<UnityEngine::Timeline::ActivationMixerPlayable*> UnityEngine::Timeline::ActivationMixerPlayable::Create(UnityEngine::Playables::PlayableGraph graph, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationMixerPlayable::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ActivationMixerPlayable", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::ScriptPlayable_1<UnityEngine::Timeline::ActivationMixerPlayable*>, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.get_postPlaybackState
UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationMixerPlayable::get_postPlaybackState() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationMixerPlayable::get_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ActivationTrack::PostPlaybackState, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.set_postPlaybackState
void UnityEngine::Timeline::ActivationMixerPlayable::set_postPlaybackState(UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationMixerPlayable::set_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.OnPlayableDestroy
void UnityEngine::Timeline::ActivationMixerPlayable::OnPlayableDestroy(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationMixerPlayable::OnPlayableDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPlayableDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Timeline.ActivationMixerPlayable.ProcessFrame
void UnityEngine::Timeline::ActivationMixerPlayable::ProcessFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationMixerPlayable::ProcessFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(playerData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info, playerData);
}
// Writing MetadataGetter for method: ActivationMixerPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::ScriptPlayable_1<UnityEngine::Timeline::ActivationMixerPlayable*> (*)(UnityEngine::Playables::PlayableGraph, int)>(&ActivationMixerPlayable::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationMixerPlayable*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ActivationMixerPlayable::get_postPlaybackState
// Il2CppName: get_postPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ActivationTrack::PostPlaybackState (ActivationMixerPlayable::*)()>(&ActivationMixerPlayable::get_postPlaybackState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationMixerPlayable*), "get_postPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivationMixerPlayable::set_postPlaybackState
// Il2CppName: set_postPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationMixerPlayable::*)(UnityEngine::Timeline::ActivationTrack::PostPlaybackState)>(&ActivationMixerPlayable::set_postPlaybackState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationMixerPlayable*), "set_postPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::ActivationTrack::PostPlaybackState>()});
  }
};
// Writing MetadataGetter for method: ActivationMixerPlayable::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationMixerPlayable::*)(UnityEngine::Playables::Playable)>(&ActivationMixerPlayable::OnPlayableDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationMixerPlayable*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: ActivationMixerPlayable::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationMixerPlayable::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&ActivationMixerPlayable::ProcessFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationMixerPlayable*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ActivationMixerPlayable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationMixerPlayable::*)()>(&ActivationMixerPlayable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationMixerPlayable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationMixerPlayable::*)()>(&ActivationMixerPlayable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationMixerPlayable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationPlayableAsset
#include "UnityEngine/Timeline/ActivationPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ActivationPlayableAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ActivationPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::ActivationPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Writing MetadataGetter for method: ActivationPlayableAsset::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (ActivationPlayableAsset::*)()>(&ActivationPlayableAsset::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationPlayableAsset*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivationPlayableAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (ActivationPlayableAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&ActivationPlayableAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationPlayableAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: ActivationPlayableAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationPlayableAsset::*)()>(&ActivationPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationPlayableAsset::*)()>(&ActivationPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationTrack
#include "UnityEngine/Timeline/ActivationTrack.hpp"
// Including type: UnityEngine.Timeline.ActivationMixerPlayable
#include "UnityEngine/Timeline/ActivationMixerPlayable.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.get_postPlaybackState
UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::get_postPlaybackState() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::get_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ActivationTrack::PostPlaybackState, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.set_postPlaybackState
void UnityEngine::Timeline::ActivationTrack::set_postPlaybackState(UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::set_postPlaybackState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_postPlaybackState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.UpdateTrackMode
void UnityEngine::Timeline::ActivationTrack::UpdateTrackMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::UpdateTrackMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTrackMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.CanCompileClips
bool UnityEngine::Timeline::ActivationTrack::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::CanCompileClips");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCompileClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.CreateTrackMixer
UnityEngine::Playables::Playable UnityEngine::Timeline::ActivationTrack::CreateTrackMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::CreateTrackMixer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTrackMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.GatherProperties
void UnityEngine::Timeline::ActivationTrack::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::GatherProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(driver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.ActivationTrack.OnCreateClip
void UnityEngine::Timeline::ActivationTrack::OnCreateClip(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::OnCreateClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Writing MetadataGetter for method: ActivationTrack::get_postPlaybackState
// Il2CppName: get_postPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ActivationTrack::PostPlaybackState (ActivationTrack::*)()>(&ActivationTrack::get_postPlaybackState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), "get_postPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivationTrack::set_postPlaybackState
// Il2CppName: set_postPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationTrack::*)(UnityEngine::Timeline::ActivationTrack::PostPlaybackState)>(&ActivationTrack::set_postPlaybackState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), "set_postPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::ActivationTrack::PostPlaybackState>()});
  }
};
// Writing MetadataGetter for method: ActivationTrack::UpdateTrackMode
// Il2CppName: UpdateTrackMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationTrack::*)()>(&ActivationTrack::UpdateTrackMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), "UpdateTrackMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivationTrack::CanCompileClips
// Il2CppName: CanCompileClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ActivationTrack::*)()>(&ActivationTrack::CanCompileClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), "CanCompileClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivationTrack::CreateTrackMixer
// Il2CppName: CreateTrackMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (ActivationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, int)>(&ActivationTrack::CreateTrackMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), "CreateTrackMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ActivationTrack::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationTrack::*)(UnityEngine::Playables::PlayableDirector*, UnityEngine::Timeline::IPropertyCollector*)>(&ActivationTrack::GatherProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>()});
  }
};
// Writing MetadataGetter for method: ActivationTrack::OnCreateClip
// Il2CppName: OnCreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationTrack::*)(UnityEngine::Timeline::TimelineClip*)>(&ActivationTrack::OnCreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), "OnCreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: ActivationTrack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationTrack::*)()>(&ActivationTrack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivationTrack::*)()>(&ActivationTrack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivationTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ActivationTrack/PostPlaybackState
#include "UnityEngine/Timeline/ActivationTrack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Active
UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Active"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Active
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Active(UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Active", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Inactive
UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Inactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Inactive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Inactive"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Inactive
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Inactive(UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Inactive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Inactive", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Revert
UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Revert() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_Revert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Revert"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState Revert
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Revert(UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_Revert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "Revert", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState LeaveAsIs
UnityEngine::Timeline::ActivationTrack::PostPlaybackState UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_LeaveAsIs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_get_LeaveAsIs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ActivationTrack::PostPlaybackState>("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "LeaveAsIs"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ActivationTrack/PostPlaybackState LeaveAsIs
void UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_LeaveAsIs(UnityEngine::Timeline::ActivationTrack::PostPlaybackState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ActivationTrack::PostPlaybackState::_set_LeaveAsIs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ActivationTrack/PostPlaybackState", "LeaveAsIs", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationOutputWeightProcessor
#include "UnityEngine/Timeline/AnimationOutputWeightProcessor.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationOutputWeightProcessor.FindMixers
void UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMixers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationOutputWeightProcessor.FindMixers
void UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers(UnityEngine::Playables::Playable parent, int port, UnityEngine::Playables::Playable node) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationOutputWeightProcessor::FindMixers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindMixers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parent, port, node);
}
// Autogenerated method: UnityEngine.Timeline.AnimationOutputWeightProcessor.Evaluate
void UnityEngine::Timeline::AnimationOutputWeightProcessor::Evaluate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationOutputWeightProcessor::Evaluate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnimationOutputWeightProcessor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationOutputWeightProcessor::*)(UnityEngine::Animations::AnimationPlayableOutput)>(&AnimationOutputWeightProcessor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOutputWeightProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationPlayableOutput>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationOutputWeightProcessor::*)(UnityEngine::Animations::AnimationPlayableOutput)>(&AnimationOutputWeightProcessor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOutputWeightProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationPlayableOutput>()});
  }
};
// Writing MetadataGetter for method: AnimationOutputWeightProcessor::FindMixers
// Il2CppName: FindMixers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationOutputWeightProcessor::*)()>(&AnimationOutputWeightProcessor::FindMixers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOutputWeightProcessor*), "FindMixers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationOutputWeightProcessor::FindMixers
// Il2CppName: FindMixers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationOutputWeightProcessor::*)(UnityEngine::Playables::Playable, int, UnityEngine::Playables::Playable)>(&AnimationOutputWeightProcessor::FindMixers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOutputWeightProcessor*), "FindMixers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: AnimationOutputWeightProcessor::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationOutputWeightProcessor::*)()>(&AnimationOutputWeightProcessor::Evaluate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationOutputWeightProcessor*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset
#include "UnityEngine/Timeline/AnimationPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/Versions
#include "UnityEngine/Timeline/AnimationPlayableAsset_Versions.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/AnimationPlayableAssetUpgrade
#include "UnityEngine/Timeline/AnimationPlayableAsset_AnimationPlayableAssetUpgrade.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45
#include "UnityEngine/Timeline/AnimationPlayableAsset_-get_outputs-d__45.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 k_LatestVersion
int UnityEngine::Timeline::AnimationPlayableAsset::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "AnimationPlayableAsset", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 k_LatestVersion
void UnityEngine::Timeline::AnimationPlayableAsset::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset", "k_LatestVersion", value));
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_position
UnityEngine::Vector3 UnityEngine::Timeline::AnimationPlayableAsset::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_position
void UnityEngine::Timeline::AnimationPlayableAsset::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_rotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationPlayableAsset::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_rotation
void UnityEngine::Timeline::AnimationPlayableAsset::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_eulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationPlayableAsset::get_eulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_eulerAngles
void UnityEngine::Timeline::AnimationPlayableAsset::set_eulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_useTrackMatchFields
bool UnityEngine::Timeline::AnimationPlayableAsset::get_useTrackMatchFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_useTrackMatchFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useTrackMatchFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_useTrackMatchFields
void UnityEngine::Timeline::AnimationPlayableAsset::set_useTrackMatchFields(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_useTrackMatchFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useTrackMatchFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_matchTargetFields
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::AnimationPlayableAsset::get_matchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::MatchTargetFields, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_matchTargetFields
void UnityEngine::Timeline::AnimationPlayableAsset::set_matchTargetFields(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_removeStartOffset
bool UnityEngine::Timeline::AnimationPlayableAsset::get_removeStartOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_removeStartOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_removeStartOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_removeStartOffset
void UnityEngine::Timeline::AnimationPlayableAsset::set_removeStartOffset(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_removeStartOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_removeStartOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_applyFootIK
bool UnityEngine::Timeline::AnimationPlayableAsset::get_applyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_applyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_applyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_applyFootIK
void UnityEngine::Timeline::AnimationPlayableAsset::set_applyFootIK(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_applyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_applyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_loop
UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::get_loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_loop
void UnityEngine::Timeline::AnimationPlayableAsset::set_loop(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_hasRootTransforms
bool UnityEngine::Timeline::AnimationPlayableAsset::get_hasRootTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_hasRootTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasRootTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_appliedOffsetMode
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AnimationPlayableAsset::get_appliedOffsetMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_appliedOffsetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_appliedOffsetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AppliedOffsetMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_appliedOffsetMode
void UnityEngine::Timeline::AnimationPlayableAsset::set_appliedOffsetMode(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_appliedOffsetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_appliedOffsetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_clip
UnityEngine::AnimationClip* UnityEngine::Timeline::AnimationPlayableAsset::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_clip
void UnityEngine::Timeline::AnimationPlayableAsset::set_clip(UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::set_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip, UnityEngine::Vector3 positionOffset, UnityEngine::Vector3 eulerOffset, bool removeStartOffset, UnityEngine::Timeline::AppliedOffsetMode mode, bool applyFootIK, UnityEngine::Timeline::AnimationPlayableAsset::LoopMode loop) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(eulerOffset), ::il2cpp_utils::ExtractType(removeStartOffset), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(applyFootIK), ::il2cpp_utils::ExtractType(loop)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip, positionOffset, eulerOffset, removeStartOffset, mode, applyFootIK, loop);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ShouldApplyOffset
bool UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyOffset(UnityEngine::Timeline::AppliedOffsetMode mode, UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "ShouldApplyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ShouldApplyScaleRemove
bool UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyScaleRemove(UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyScaleRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "ShouldApplyScaleRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::AnimationPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ResetOffsets
void UnityEngine::Timeline::AnimationPlayableAsset::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::ResetOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.GatherProperties
void UnityEngine::Timeline::AnimationPlayableAsset::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(driver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.HasRootTransforms
bool UnityEngine::Timeline::AnimationPlayableAsset::HasRootTransforms(UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::HasRootTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "HasRootTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.OnUpgradeFromVersion
void UnityEngine::Timeline::AnimationPlayableAsset::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::OnUpgradeFromVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpgradeFromVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldVersion)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_duration
double UnityEngine::Timeline::AnimationPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationPlayableAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset..cctor
void UnityEngine::Timeline::AnimationPlayableAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AnimationPlayableAsset::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::Vector3)>(&AnimationPlayableAsset::set_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::Quaternion)>(&AnimationPlayableAsset::set_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_eulerAngles
// Il2CppName: get_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_eulerAngles
// Il2CppName: set_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::Vector3)>(&AnimationPlayableAsset::set_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_useTrackMatchFields
// Il2CppName: get_useTrackMatchFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_useTrackMatchFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_useTrackMatchFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_useTrackMatchFields
// Il2CppName: set_useTrackMatchFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(bool)>(&AnimationPlayableAsset::set_useTrackMatchFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_useTrackMatchFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_matchTargetFields
// Il2CppName: get_matchTargetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::MatchTargetFields (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_matchTargetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_matchTargetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_matchTargetFields
// Il2CppName: set_matchTargetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::Timeline::MatchTargetFields)>(&AnimationPlayableAsset::set_matchTargetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_matchTargetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::MatchTargetFields>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_removeStartOffset
// Il2CppName: get_removeStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_removeStartOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_removeStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_removeStartOffset
// Il2CppName: set_removeStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(bool)>(&AnimationPlayableAsset::set_removeStartOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_removeStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_applyFootIK
// Il2CppName: get_applyFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_applyFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_applyFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_applyFootIK
// Il2CppName: set_applyFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(bool)>(&AnimationPlayableAsset::set_applyFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_applyFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_loop
// Il2CppName: get_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_loop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_loop
// Il2CppName: set_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode)>(&AnimationPlayableAsset::set_loop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_hasRootTransforms
// Il2CppName: get_hasRootTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_hasRootTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_hasRootTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_appliedOffsetMode
// Il2CppName: get_appliedOffsetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::AppliedOffsetMode (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_appliedOffsetMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_appliedOffsetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_appliedOffsetMode
// Il2CppName: set_appliedOffsetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::Timeline::AppliedOffsetMode)>(&AnimationPlayableAsset::set_appliedOffsetMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_appliedOffsetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::set_clip
// Il2CppName: set_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::AnimationClip*)>(&AnimationPlayableAsset::set_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "set_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::AnimationClip*, UnityEngine::Vector3, UnityEngine::Vector3, bool, UnityEngine::Timeline::AppliedOffsetMode, bool, UnityEngine::Timeline::AnimationPlayableAsset::LoopMode)>(&AnimationPlayableAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::ShouldApplyOffset
// Il2CppName: ShouldApplyOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::AppliedOffsetMode, UnityEngine::AnimationClip*)>(&AnimationPlayableAsset::ShouldApplyOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "ShouldApplyOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::ShouldApplyScaleRemove
// Il2CppName: ShouldApplyScaleRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::AppliedOffsetMode)>(&AnimationPlayableAsset::ShouldApplyScaleRemove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "ShouldApplyScaleRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::ResetOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(UnityEngine::Playables::PlayableDirector*, UnityEngine::Timeline::IPropertyCollector*)>(&AnimationPlayableAsset::GatherProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::HasRootTransforms
// Il2CppName: HasRootTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::AnimationClip*)>(&AnimationPlayableAsset::HasRootTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "HasRootTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::OnUpgradeFromVersion
// Il2CppName: OnUpgradeFromVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)(int)>(&AnimationPlayableAsset::OnUpgradeFromVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "OnUpgradeFromVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AnimationPlayableAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&AnimationPlayableAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::*)()>(&AnimationPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationPlayableAsset::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/LoopMode
#include "UnityEngine/Timeline/AnimationPlayableAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [TooltipAttribute] Offset: 0xDD878C
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode UseSourceAsset
UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_UseSourceAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_UseSourceAsset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "UseSourceAsset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode UseSourceAsset
void UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_UseSourceAsset(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_UseSourceAsset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "UseSourceAsset", value));
}
// [TooltipAttribute] Offset: 0xDD87C4
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode On
UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_On() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_On");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "On"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode On
void UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_On(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_On");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "On", value));
}
// [TooltipAttribute] Offset: 0xDD87FC
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode Off
UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "Off"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/LoopMode Off
void UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_Off(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::LoopMode::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/LoopMode", "Off", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/Versions
#include "UnityEngine/Timeline/AnimationPlayableAsset_Versions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions Initial
UnityEngine::Timeline::AnimationPlayableAsset::Versions UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AnimationPlayableAsset::Versions>("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions Initial
void UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_Initial(UnityEngine::Timeline::AnimationPlayableAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "Initial", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions RotationAsEuler
UnityEngine::Timeline::AnimationPlayableAsset::Versions UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_RotationAsEuler() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::Versions::_get_RotationAsEuler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AnimationPlayableAsset::Versions>("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "RotationAsEuler"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AnimationPlayableAsset/Versions RotationAsEuler
void UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_RotationAsEuler(UnityEngine::Timeline::AnimationPlayableAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::Versions::_set_RotationAsEuler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset/Versions", "RotationAsEuler", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/AnimationPlayableAssetUpgrade
#include "UnityEngine/Timeline/AnimationPlayableAsset_AnimationPlayableAssetUpgrade.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/AnimationPlayableAssetUpgrade.ConvertRotationToEuler
void UnityEngine::Timeline::AnimationPlayableAsset::AnimationPlayableAssetUpgrade::ConvertRotationToEuler(UnityEngine::Timeline::AnimationPlayableAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::AnimationPlayableAssetUpgrade::ConvertRotationToEuler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset/AnimationPlayableAssetUpgrade", "ConvertRotationToEuler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asset);
}
// Writing MetadataGetter for method: AnimationPlayableAsset::AnimationPlayableAssetUpgrade::ConvertRotationToEuler
// Il2CppName: ConvertRotationToEuler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::AnimationPlayableAsset*)>(&AnimationPlayableAsset::AnimationPlayableAssetUpgrade::ConvertRotationToEuler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::AnimationPlayableAssetUpgrade*), "ConvertRotationToEuler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationPlayableAsset*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45
#include "UnityEngine/Timeline/AnimationPlayableAsset_-get_outputs-d__45.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.IDisposable.Dispose
void UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.MoveNext
bool UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPlayableAsset::$get_outputs$d__45::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::$get_outputs$d__45::*)(int)>(&AnimationPlayableAsset::$get_outputs$d__45::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::$get_outputs$d__45::*)(int)>(&AnimationPlayableAsset::$get_outputs$d__45::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::$get_outputs$d__45::*)()>(&AnimationPlayableAsset::$get_outputs$d__45::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationPlayableAsset::$get_outputs$d__45::*)()>(&AnimationPlayableAsset::$get_outputs$d__45::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (AnimationPlayableAsset::$get_outputs$d__45::*)()>(&AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPlayableAsset::$get_outputs$d__45::*)()>(&AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AnimationPlayableAsset::$get_outputs$d__45::*)()>(&AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* (AnimationPlayableAsset::$get_outputs$d__45::*)()>(&AnimationPlayableAsset::$get_outputs$d__45::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AnimationPlayableAsset::$get_outputs$d__45::*)()>(&AnimationPlayableAsset::$get_outputs$d__45::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPlayableAsset::$get_outputs$d__45*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPreviewUpdateCallback
#include "UnityEngine/Timeline/AnimationPreviewUpdateCallback.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Experimental.Animations.IAnimationWindowPreview
#include "UnityEngine/Experimental/Animations/IAnimationWindowPreview.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationPreviewUpdateCallback.Evaluate
void UnityEngine::Timeline::AnimationPreviewUpdateCallback::Evaluate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPreviewUpdateCallback::Evaluate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPreviewUpdateCallback.FetchPreviewComponents
void UnityEngine::Timeline::AnimationPreviewUpdateCallback::FetchPreviewComponents() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationPreviewUpdateCallback::FetchPreviewComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FetchPreviewComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnimationPreviewUpdateCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPreviewUpdateCallback::*)(UnityEngine::Animations::AnimationPlayableOutput)>(&AnimationPreviewUpdateCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPreviewUpdateCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationPlayableOutput>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPreviewUpdateCallback::*)(UnityEngine::Animations::AnimationPlayableOutput)>(&AnimationPreviewUpdateCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPreviewUpdateCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationPlayableOutput>()});
  }
};
// Writing MetadataGetter for method: AnimationPreviewUpdateCallback::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPreviewUpdateCallback::*)()>(&AnimationPreviewUpdateCallback::Evaluate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPreviewUpdateCallback*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationPreviewUpdateCallback::FetchPreviewComponents
// Il2CppName: FetchPreviewComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationPreviewUpdateCallback::*)()>(&AnimationPreviewUpdateCallback::FetchPreviewComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationPreviewUpdateCallback*), "FetchPreviewComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MatchTargetFields
#include "UnityEngine/Timeline/MatchTargetFields.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields PositionX
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_PositionX() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_get_PositionX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "PositionX"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields PositionX
void UnityEngine::Timeline::MatchTargetFields::_set_PositionX(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_set_PositionX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "PositionX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields PositionY
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_PositionY() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_get_PositionY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "PositionY"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields PositionY
void UnityEngine::Timeline::MatchTargetFields::_set_PositionY(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_set_PositionY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "PositionY", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields PositionZ
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_PositionZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_get_PositionZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "PositionZ"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields PositionZ
void UnityEngine::Timeline::MatchTargetFields::_set_PositionZ(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_set_PositionZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "PositionZ", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields RotationX
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_RotationX() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_get_RotationX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "RotationX"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields RotationX
void UnityEngine::Timeline::MatchTargetFields::_set_RotationX(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_set_RotationX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "RotationX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields RotationY
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_RotationY() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_get_RotationY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "RotationY"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields RotationY
void UnityEngine::Timeline::MatchTargetFields::_set_RotationY(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_set_RotationY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "RotationY", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields RotationZ
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFields::_get_RotationZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_get_RotationZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFields", "RotationZ"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields RotationZ
void UnityEngine::Timeline::MatchTargetFields::_set_RotationZ(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFields::_set_RotationZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFields", "RotationZ", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackOffset
#include "UnityEngine/Timeline/TrackOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackOffset ApplyTransformOffsets
UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::TrackOffset::_get_ApplyTransformOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackOffset::_get_ApplyTransformOffsets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackOffset>("UnityEngine.Timeline", "TrackOffset", "ApplyTransformOffsets"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackOffset ApplyTransformOffsets
void UnityEngine::Timeline::TrackOffset::_set_ApplyTransformOffsets(UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackOffset::_set_ApplyTransformOffsets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackOffset", "ApplyTransformOffsets", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackOffset ApplySceneOffsets
UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::TrackOffset::_get_ApplySceneOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackOffset::_get_ApplySceneOffsets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackOffset>("UnityEngine.Timeline", "TrackOffset", "ApplySceneOffsets"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackOffset ApplySceneOffsets
void UnityEngine::Timeline::TrackOffset::_set_ApplySceneOffsets(UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackOffset::_set_ApplySceneOffsets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackOffset", "ApplySceneOffsets", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackOffset Auto
UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::TrackOffset::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackOffset::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackOffset>("UnityEngine.Timeline", "TrackOffset", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackOffset Auto
void UnityEngine::Timeline::TrackOffset::_set_Auto(UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackOffset::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackOffset", "Auto", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AppliedOffsetMode
#include "UnityEngine/Timeline/AppliedOffsetMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode NoRootTransform
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_NoRootTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_get_NoRootTransform");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "NoRootTransform"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode NoRootTransform
void UnityEngine::Timeline::AppliedOffsetMode::_set_NoRootTransform(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_set_NoRootTransform");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "NoRootTransform", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffset
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffset
void UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffset(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffset
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffset
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffset(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffsetLegacy
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffsetLegacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_get_TransformOffsetLegacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffsetLegacy"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode TransformOffsetLegacy
void UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffsetLegacy(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_set_TransformOffsetLegacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "TransformOffsetLegacy", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacy
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacy"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacy
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacy(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacy", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetEditor
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetEditor
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetEditor(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetEditor", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacyEditor
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacyEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_get_SceneOffsetLegacyEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::AppliedOffsetMode>("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacyEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.AppliedOffsetMode SceneOffsetLegacyEditor
void UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacyEditor(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AppliedOffsetMode::_set_SceneOffsetLegacyEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AppliedOffsetMode", "SceneOffsetLegacyEditor", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MatchTargetFieldConstants
#include "UnityEngine/Timeline/MatchTargetFieldConstants.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields All
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "All"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields All
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_All(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "All", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields None
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields None
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_None(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields Position
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_get_Position");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "Position"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields Position
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_Position(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_set_Position");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "Position", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.MatchTargetFields Rotation
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::_get_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_get_Rotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::MatchTargetFields>("UnityEngine.Timeline", "MatchTargetFieldConstants", "Rotation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.MatchTargetFields Rotation
void UnityEngine::Timeline::MatchTargetFieldConstants::_set_Rotation(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::_set_Rotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "MatchTargetFieldConstants", "Rotation", value));
}
// Autogenerated method: UnityEngine.Timeline.MatchTargetFieldConstants.HasAny
bool UnityEngine::Timeline::MatchTargetFieldConstants::HasAny(UnityEngine::Timeline::MatchTargetFields me, UnityEngine::Timeline::MatchTargetFields fields) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::HasAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "MatchTargetFieldConstants", "HasAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(me), ::il2cpp_utils::ExtractType(fields)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, me, fields);
}
// Autogenerated method: UnityEngine.Timeline.MatchTargetFieldConstants.Toggle
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::MatchTargetFieldConstants::Toggle(UnityEngine::Timeline::MatchTargetFields me, UnityEngine::Timeline::MatchTargetFields flag) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::Toggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "MatchTargetFieldConstants", "Toggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(me), ::il2cpp_utils::ExtractType(flag)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::MatchTargetFields, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, me, flag);
}
// Autogenerated method: UnityEngine.Timeline.MatchTargetFieldConstants..cctor
void UnityEngine::Timeline::MatchTargetFieldConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MatchTargetFieldConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "MatchTargetFieldConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: MatchTargetFieldConstants::HasAny
// Il2CppName: HasAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::MatchTargetFields, UnityEngine::Timeline::MatchTargetFields)>(&MatchTargetFieldConstants::HasAny)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchTargetFieldConstants*), "HasAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::MatchTargetFields>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::MatchTargetFields>()});
  }
};
// Writing MetadataGetter for method: MatchTargetFieldConstants::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::MatchTargetFields (*)(UnityEngine::Timeline::MatchTargetFields, UnityEngine::Timeline::MatchTargetFields)>(&MatchTargetFieldConstants::Toggle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchTargetFieldConstants*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::MatchTargetFields>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::MatchTargetFields>()});
  }
};
// Writing MetadataGetter for method: MatchTargetFieldConstants::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MatchTargetFieldConstants::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MatchTargetFieldConstants*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AnimationTrack
#include "UnityEngine/Timeline/AnimationTrack.hpp"
// Including type: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade
#include "UnityEngine/Timeline/AnimationTrack_AnimationTrackUpgrade.hpp"
// Including type: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49
#include "UnityEngine/Timeline/AnimationTrack_-get_outputs-d__49.hpp"
// Including type: UnityEngine.AvatarMask
#include "UnityEngine/AvatarMask.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Timeline.IntervalTree`1
#include "UnityEngine/Timeline/IntervalTree_1.hpp"
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: UnityEngine.Timeline.AppliedOffsetMode
#include "UnityEngine/Timeline/AppliedOffsetMode.hpp"
// Including type: UnityEngine.Animations.AnimationLayerMixerPlayable
#include "UnityEngine/Animations/AnimationLayerMixerPlayable.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String k_DefaultInfiniteClipName
::Il2CppString* UnityEngine::Timeline::AnimationTrack::_get_k_DefaultInfiniteClipName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::_get_k_DefaultInfiniteClipName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine.Timeline", "AnimationTrack", "k_DefaultInfiniteClipName"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_DefaultInfiniteClipName
void UnityEngine::Timeline::AnimationTrack::_set_k_DefaultInfiniteClipName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::_set_k_DefaultInfiniteClipName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "k_DefaultInfiniteClipName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_DefaultRecordableClipName
::Il2CppString* UnityEngine::Timeline::AnimationTrack::_get_k_DefaultRecordableClipName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::_get_k_DefaultRecordableClipName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine.Timeline", "AnimationTrack", "k_DefaultRecordableClipName"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_DefaultRecordableClipName
void UnityEngine::Timeline::AnimationTrack::_set_k_DefaultRecordableClipName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::_set_k_DefaultRecordableClipName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "k_DefaultRecordableClipName", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
System::Collections::Generic::Queue_1<UnityEngine::Transform*>* UnityEngine::Timeline::AnimationTrack::_get_s_CachedQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::_get_s_CachedQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::Queue_1<UnityEngine::Transform*>*>("UnityEngine.Timeline", "AnimationTrack", "s_CachedQueue"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
void UnityEngine::Timeline::AnimationTrack::_set_s_CachedQueue(System::Collections::Generic::Queue_1<UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::_set_s_CachedQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "s_CachedQueue", value));
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_position
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_position
void UnityEngine::Timeline::AnimationTrack::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_rotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_rotation
void UnityEngine::Timeline::AnimationTrack::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_eulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_eulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_eulerAngles
void UnityEngine::Timeline::AnimationTrack::set_eulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_applyOffsets
bool UnityEngine::Timeline::AnimationTrack::get_applyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_applyOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_applyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_applyOffsets
void UnityEngine::Timeline::AnimationTrack::set_applyOffsets(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_applyOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_applyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_trackOffset
UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::AnimationTrack::get_trackOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_trackOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_trackOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackOffset, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_trackOffset
void UnityEngine::Timeline::AnimationTrack::set_trackOffset(UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_trackOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_trackOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_matchTargetFields
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::AnimationTrack::get_matchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::MatchTargetFields, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_matchTargetFields
void UnityEngine::Timeline::AnimationTrack::set_matchTargetFields(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_matchTargetFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClip
UnityEngine::AnimationClip* UnityEngine::Timeline::AnimationTrack::get_infiniteClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClip
void UnityEngine::Timeline::AnimationTrack::set_infiniteClip(UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipRemoveOffset
bool UnityEngine::Timeline::AnimationTrack::get_infiniteClipRemoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipRemoveOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipRemoveOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipRemoveOffset
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipRemoveOffset(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipRemoveOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipRemoveOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_avatarMask
UnityEngine::AvatarMask* UnityEngine::Timeline::AnimationTrack::get_avatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_avatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_avatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AvatarMask*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_avatarMask
void UnityEngine::Timeline::AnimationTrack::set_avatarMask(UnityEngine::AvatarMask* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_avatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_avatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_applyAvatarMask
bool UnityEngine::Timeline::AnimationTrack::get_applyAvatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_applyAvatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_applyAvatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_applyAvatarMask
void UnityEngine::Timeline::AnimationTrack::set_applyAvatarMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_applyAvatarMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_applyAvatarMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_inClipMode
bool UnityEngine::Timeline::AnimationTrack::get_inClipMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_inClipMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inClipMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetPosition
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetPosition
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetRotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetRotation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetEulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetEulerAngles
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetEulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipApplyFootIK
bool UnityEngine::Timeline::AnimationTrack::get_infiniteClipApplyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipApplyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipApplyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipApplyFootIK
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipApplyFootIK(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipApplyFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipApplyFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipTimeOffset
double UnityEngine::Timeline::AnimationTrack::get_infiniteClipTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipTimeOffset
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipTimeOffset(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipPreExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_infiniteClipPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipPreExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipPostExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_infiniteClipPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipPostExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipLoop
UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationTrack::get_infiniteClipLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_infiniteClipLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_infiniteClipLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipLoop
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipLoop(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_infiniteClipLoop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_infiniteClipLoop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.ResetOffsets
void UnityEngine::Timeline::AnimationTrack::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::ResetOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateClip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AnimationTrack::CreateClip(UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CreateClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateInfiniteClip
void UnityEngine::Timeline::AnimationTrack::CreateInfiniteClip(::Il2CppString* infiniteClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CreateInfiniteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateInfiniteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(infiniteClipName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, infiniteClipName);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateRecordableClip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AnimationTrack::CreateRecordableClip(::Il2CppString* animClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CreateRecordableClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateRecordableClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animClipName)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, animClipName);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UpdateClipOffsets
void UnityEngine::Timeline::AnimationTrack::UpdateClipOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::UpdateClipOffsets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateClipOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CompileTrackPlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CompileTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Timeline::AnimationTrack* track, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CompileTrackPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileTrackPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(track), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, track, go, tree, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UnityEngine.Timeline.ILayerable.CreateLayerMixer
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::UnityEngine_Timeline_ILayerable_CreateLayerMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::UnityEngine.Timeline.ILayerable.CreateLayerMixer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ILayerable.CreateLayerMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetDefaultBlendCount
int UnityEngine::Timeline::AnimationTrack::GetDefaultBlendCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GetDefaultBlendCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultBlendCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AttachDefaultBlend
void UnityEngine::Timeline::AnimationTrack::AttachDefaultBlend(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Animations::AnimationLayerMixerPlayable mixer, bool requireOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::AttachDefaultBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachDefaultBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(mixer), ::il2cpp_utils::ExtractType(requireOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, graph, mixer, requireOffset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AttachOffsetPlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::AttachOffsetPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable playable, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::AttachOffsetPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AttachOffsetPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, playable, pos, rot);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.RequiresMotionXPlayable
bool UnityEngine::Timeline::AnimationTrack::RequiresMotionXPlayable(UnityEngine::Timeline::AppliedOffsetMode mode, UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::RequiresMotionXPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequiresMotionXPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, mode, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UsesAbsoluteMotion
bool UnityEngine::Timeline::AnimationTrack::UsesAbsoluteMotion(UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::UsesAbsoluteMotion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "UsesAbsoluteMotion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.HasController
bool UnityEngine::Timeline::AnimationTrack::HasController(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::HasController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetBinding
UnityEngine::Animator* UnityEngine::Timeline::AnimationTrack::GetBinding(UnityEngine::Playables::PlayableDirector* director) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GetBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animator*, false>(this, ___internal__method, director);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateGroupMixer
UnityEngine::Animations::AnimationLayerMixerPlayable UnityEngine::Timeline::AnimationTrack::CreateGroupMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CreateGroupMixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "CreateGroupMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationLayerMixerPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateInfiniteTrackPlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CreateInfiniteTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CreateInfiniteTrackPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateInfiniteTrackPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.ApplyTrackOffset
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::ApplyTrackOffset(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable root, UnityEngine::GameObject* go, UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::ApplyTrackOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTrackOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(mode)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, root, go, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AssignAnimationClip
void UnityEngine::Timeline::AnimationTrack::AssignAnimationClip(UnityEngine::Timeline::TimelineClip* clip, UnityEngine::AnimationClip* animClip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::AssignAnimationClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignAnimationClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(animClip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip, animClip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetAnimationClips
void UnityEngine::Timeline::AnimationTrack::GetAnimationClips(System::Collections::Generic::List_1<UnityEngine::AnimationClip*>* animClips) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GetAnimationClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnimationClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animClips)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animClips);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetOffsetMode
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AnimationTrack::GetOffsetMode(UnityEngine::GameObject* go, bool animatesRootTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GetOffsetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOffsetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(animatesRootTransform)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AppliedOffsetMode, false>(this, ___internal__method, go, animatesRootTransform);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.IsRootTransformDisabledByMask
bool UnityEngine::Timeline::AnimationTrack::IsRootTransformDisabledByMask(UnityEngine::GameObject* gameObject, UnityEngine::Transform* genericRootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::IsRootTransformDisabledByMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsRootTransformDisabledByMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(genericRootNode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, gameObject, genericRootNode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetGenericRootNode
UnityEngine::Transform* UnityEngine::Timeline::AnimationTrack::GetGenericRootNode(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GetGenericRootNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGenericRootNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AnimatesRootTransform
bool UnityEngine::Timeline::AnimationTrack::AnimatesRootTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::AnimatesRootTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimatesRootTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.FindInHierarchyBreadthFirst
UnityEngine::Transform* UnityEngine::Timeline::AnimationTrack::FindInHierarchyBreadthFirst(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::FindInHierarchyBreadthFirst");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "FindInHierarchyBreadthFirst", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, name);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetPosition
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_openClipOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_openClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetPosition
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_openClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipOffsetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetRotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_openClipOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_openClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetRotation
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_openClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipOffsetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetEulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_openClipOffsetEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_openClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetEulerAngles
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetEulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_openClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipPreExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_openClipPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_openClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipPreExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_openClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_openClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipPostExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_openClipPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_openClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipPostExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_openClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::set_openClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_openClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CanCompileClips
bool UnityEngine::Timeline::AnimationTrack::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CanCompileClips");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCompileClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.OnCreateClip
void UnityEngine::Timeline::AnimationTrack::OnCreateClip(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::OnCreateClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CalculateItemsHash
int UnityEngine::Timeline::AnimationTrack::CalculateItemsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CalculateItemsHash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateItemsHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateMixerPlayableGraph
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CreateMixerPlayableGraph(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::CreateMixerPlayableGraph");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMixerPlayableGraph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetEvaluationTime
void UnityEngine::Timeline::AnimationTrack::GetEvaluationTime(double& outStart, double& outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GetEvaluationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEvaluationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outStart, outDuration);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetSequenceTime
void UnityEngine::Timeline::AnimationTrack::GetSequenceTime(double& outStart, double& outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GetSequenceTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSequenceTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outStart, outDuration);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GatherProperties
void UnityEngine::Timeline::AnimationTrack::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::GatherProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(driver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.OnUpgradeFromVersion
void UnityEngine::Timeline::AnimationTrack::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::OnUpgradeFromVersion");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpgradeFromVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldVersion)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack..cctor
void UnityEngine::Timeline::AnimationTrack::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AnimationTrack::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationTrack::*)()>(&AnimationTrack::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Vector3)>(&AnimationTrack::set_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (AnimationTrack::*)()>(&AnimationTrack::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Quaternion)>(&AnimationTrack::set_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_eulerAngles
// Il2CppName: get_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationTrack::*)()>(&AnimationTrack::get_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_eulerAngles
// Il2CppName: set_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Vector3)>(&AnimationTrack::set_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_applyOffsets
// Il2CppName: get_applyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)()>(&AnimationTrack::get_applyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_applyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_applyOffsets
// Il2CppName: set_applyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(bool)>(&AnimationTrack::set_applyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_applyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_trackOffset
// Il2CppName: get_trackOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackOffset (AnimationTrack::*)()>(&AnimationTrack::get_trackOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_trackOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_trackOffset
// Il2CppName: set_trackOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::TrackOffset)>(&AnimationTrack::set_trackOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_trackOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackOffset>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_matchTargetFields
// Il2CppName: get_matchTargetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::MatchTargetFields (AnimationTrack::*)()>(&AnimationTrack::get_matchTargetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_matchTargetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_matchTargetFields
// Il2CppName: set_matchTargetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::MatchTargetFields)>(&AnimationTrack::set_matchTargetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_matchTargetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::MatchTargetFields>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClip
// Il2CppName: get_infiniteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClip
// Il2CppName: set_infiniteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::AnimationClip*)>(&AnimationTrack::set_infiniteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipRemoveOffset
// Il2CppName: get_infiniteClipRemoveOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipRemoveOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipRemoveOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipRemoveOffset
// Il2CppName: set_infiniteClipRemoveOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(bool)>(&AnimationTrack::set_infiniteClipRemoveOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipRemoveOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_avatarMask
// Il2CppName: get_avatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AvatarMask* (AnimationTrack::*)()>(&AnimationTrack::get_avatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_avatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_avatarMask
// Il2CppName: set_avatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::AvatarMask*)>(&AnimationTrack::set_avatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_avatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AvatarMask*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_applyAvatarMask
// Il2CppName: get_applyAvatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)()>(&AnimationTrack::get_applyAvatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_applyAvatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_applyAvatarMask
// Il2CppName: set_applyAvatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(bool)>(&AnimationTrack::set_applyAvatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_applyAvatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_inClipMode
// Il2CppName: get_inClipMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)()>(&AnimationTrack::get_inClipMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_inClipMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipOffsetPosition
// Il2CppName: get_infiniteClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipOffsetPosition
// Il2CppName: set_infiniteClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Vector3)>(&AnimationTrack::set_infiniteClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipOffsetRotation
// Il2CppName: get_infiniteClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipOffsetRotation
// Il2CppName: set_infiniteClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Quaternion)>(&AnimationTrack::set_infiniteClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipOffsetEulerAngles
// Il2CppName: get_infiniteClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipOffsetEulerAngles
// Il2CppName: set_infiniteClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Vector3)>(&AnimationTrack::set_infiniteClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipApplyFootIK
// Il2CppName: get_infiniteClipApplyFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipApplyFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipApplyFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipApplyFootIK
// Il2CppName: set_infiniteClipApplyFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(bool)>(&AnimationTrack::set_infiniteClipApplyFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipApplyFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipTimeOffset
// Il2CppName: get_infiniteClipTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipTimeOffset
// Il2CppName: set_infiniteClipTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(double)>(&AnimationTrack::set_infiniteClipTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipPreExtrapolation
// Il2CppName: get_infiniteClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipPreExtrapolation
// Il2CppName: set_infiniteClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&AnimationTrack::set_infiniteClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipPostExtrapolation
// Il2CppName: get_infiniteClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipPostExtrapolation
// Il2CppName: set_infiniteClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&AnimationTrack::set_infiniteClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_infiniteClipLoop
// Il2CppName: get_infiniteClipLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode (AnimationTrack::*)()>(&AnimationTrack::get_infiniteClipLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_infiniteClipLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_infiniteClipLoop
// Il2CppName: set_infiniteClipLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode)>(&AnimationTrack::set_infiniteClipLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_infiniteClipLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)()>(&AnimationTrack::ResetOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CreateClip
// Il2CppName: CreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (AnimationTrack::*)(UnityEngine::AnimationClip*)>(&AnimationTrack::CreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CreateInfiniteClip
// Il2CppName: CreateInfiniteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(::Il2CppString*)>(&AnimationTrack::CreateInfiniteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CreateInfiniteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CreateRecordableClip
// Il2CppName: CreateRecordableClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (AnimationTrack::*)(::Il2CppString*)>(&AnimationTrack::CreateRecordableClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CreateRecordableClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::UpdateClipOffsets
// Il2CppName: UpdateClipOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)()>(&AnimationTrack::UpdateClipOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "UpdateClipOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CompileTrackPlayable
// Il2CppName: CompileTrackPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Timeline::AnimationTrack*, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*, UnityEngine::Timeline::AppliedOffsetMode)>(&AnimationTrack::CompileTrackPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CompileTrackPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationTrack*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::UnityEngine_Timeline_ILayerable_CreateLayerMixer
// Il2CppName: UnityEngine.Timeline.ILayerable.CreateLayerMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, int)>(&AnimationTrack::UnityEngine_Timeline_ILayerable_CreateLayerMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "UnityEngine.Timeline.ILayerable.CreateLayerMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GetDefaultBlendCount
// Il2CppName: GetDefaultBlendCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AnimationTrack::*)()>(&AnimationTrack::GetDefaultBlendCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GetDefaultBlendCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::AttachDefaultBlend
// Il2CppName: AttachDefaultBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Animations::AnimationLayerMixerPlayable, bool)>(&AnimationTrack::AttachDefaultBlend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "AttachDefaultBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationLayerMixerPlayable>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::AttachOffsetPlayable
// Il2CppName: AttachOffsetPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::Playable, UnityEngine::Vector3, UnityEngine::Quaternion)>(&AnimationTrack::AttachOffsetPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "AttachOffsetPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::RequiresMotionXPlayable
// Il2CppName: RequiresMotionXPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)(UnityEngine::Timeline::AppliedOffsetMode, UnityEngine::GameObject*)>(&AnimationTrack::RequiresMotionXPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "RequiresMotionXPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::UsesAbsoluteMotion
// Il2CppName: UsesAbsoluteMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::AppliedOffsetMode)>(&AnimationTrack::UsesAbsoluteMotion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "UsesAbsoluteMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::HasController
// Il2CppName: HasController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)(UnityEngine::GameObject*)>(&AnimationTrack::HasController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "HasController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GetBinding
// Il2CppName: GetBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animator* (AnimationTrack::*)(UnityEngine::Playables::PlayableDirector*)>(&AnimationTrack::GetBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GetBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CreateGroupMixer
// Il2CppName: CreateGroupMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationLayerMixerPlayable (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, int)>(&AnimationTrack::CreateGroupMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CreateGroupMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CreateInfiniteTrackPlayable
// Il2CppName: CreateInfiniteTrackPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*, UnityEngine::Timeline::AppliedOffsetMode)>(&AnimationTrack::CreateInfiniteTrackPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CreateInfiniteTrackPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::ApplyTrackOffset
// Il2CppName: ApplyTrackOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::Playable, UnityEngine::GameObject*, UnityEngine::Timeline::AppliedOffsetMode)>(&AnimationTrack::ApplyTrackOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "ApplyTrackOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::AssignAnimationClip
// Il2CppName: AssignAnimationClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::AnimationClip*)>(&AnimationTrack::AssignAnimationClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "AssignAnimationClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GetAnimationClips
// Il2CppName: GetAnimationClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(System::Collections::Generic::List_1<UnityEngine::AnimationClip*>*)>(&AnimationTrack::GetAnimationClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GetAnimationClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::AnimationClip*>*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GetOffsetMode
// Il2CppName: GetOffsetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::AppliedOffsetMode (AnimationTrack::*)(UnityEngine::GameObject*, bool)>(&AnimationTrack::GetOffsetMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GetOffsetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::IsRootTransformDisabledByMask
// Il2CppName: IsRootTransformDisabledByMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)(UnityEngine::GameObject*, UnityEngine::Transform*)>(&AnimationTrack::IsRootTransformDisabledByMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "IsRootTransformDisabledByMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GetGenericRootNode
// Il2CppName: GetGenericRootNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (AnimationTrack::*)(UnityEngine::GameObject*)>(&AnimationTrack::GetGenericRootNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GetGenericRootNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::AnimatesRootTransform
// Il2CppName: AnimatesRootTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)()>(&AnimationTrack::AnimatesRootTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "AnimatesRootTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::FindInHierarchyBreadthFirst
// Il2CppName: FindInHierarchyBreadthFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(UnityEngine::Transform*, ::Il2CppString*)>(&AnimationTrack::FindInHierarchyBreadthFirst)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "FindInHierarchyBreadthFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_openClipOffsetPosition
// Il2CppName: get_openClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationTrack::*)()>(&AnimationTrack::get_openClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_openClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_openClipOffsetPosition
// Il2CppName: set_openClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Vector3)>(&AnimationTrack::set_openClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_openClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_openClipOffsetRotation
// Il2CppName: get_openClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (AnimationTrack::*)()>(&AnimationTrack::get_openClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_openClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_openClipOffsetRotation
// Il2CppName: set_openClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Quaternion)>(&AnimationTrack::set_openClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_openClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_openClipOffsetEulerAngles
// Il2CppName: get_openClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AnimationTrack::*)()>(&AnimationTrack::get_openClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_openClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_openClipOffsetEulerAngles
// Il2CppName: set_openClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Vector3)>(&AnimationTrack::set_openClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_openClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_openClipPreExtrapolation
// Il2CppName: get_openClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (AnimationTrack::*)()>(&AnimationTrack::get_openClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_openClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_openClipPreExtrapolation
// Il2CppName: set_openClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&AnimationTrack::set_openClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_openClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_openClipPostExtrapolation
// Il2CppName: get_openClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (AnimationTrack::*)()>(&AnimationTrack::get_openClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_openClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::set_openClipPostExtrapolation
// Il2CppName: set_openClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&AnimationTrack::set_openClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "set_openClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CanCompileClips
// Il2CppName: CanCompileClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::*)()>(&AnimationTrack::CanCompileClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CanCompileClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (AnimationTrack::*)()>(&AnimationTrack::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::OnCreateClip
// Il2CppName: OnCreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Timeline::TimelineClip*)>(&AnimationTrack::OnCreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "OnCreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CalculateItemsHash
// Il2CppName: CalculateItemsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AnimationTrack::*)()>(&AnimationTrack::CalculateItemsHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CalculateItemsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::CreateMixerPlayableGraph
// Il2CppName: CreateMixerPlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*)>(&AnimationTrack::CreateMixerPlayableGraph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "CreateMixerPlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GetEvaluationTime
// Il2CppName: GetEvaluationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(double&, double&)>(&AnimationTrack::GetEvaluationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GetEvaluationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GetSequenceTime
// Il2CppName: GetSequenceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(double&, double&)>(&AnimationTrack::GetSequenceTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GetSequenceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(UnityEngine::Playables::PlayableDirector*, UnityEngine::Timeline::IPropertyCollector*)>(&AnimationTrack::GatherProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::OnUpgradeFromVersion
// Il2CppName: OnUpgradeFromVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)(int)>(&AnimationTrack::OnUpgradeFromVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), "OnUpgradeFromVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)()>(&AnimationTrack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::*)()>(&AnimationTrack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AnimationTrack::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade
#include "UnityEngine/Timeline/AnimationTrack_AnimationTrackUpgrade.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade.ConvertRotationsToEuler
void UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRotationsToEuler(UnityEngine::Timeline::AnimationTrack* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRotationsToEuler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack/AnimationTrackUpgrade", "ConvertRotationsToEuler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade.ConvertRootMotion
void UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRootMotion(UnityEngine::Timeline::AnimationTrack* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertRootMotion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack/AnimationTrackUpgrade", "ConvertRootMotion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade.ConvertInfiniteTrack
void UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertInfiniteTrack(UnityEngine::Timeline::AnimationTrack* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade::ConvertInfiniteTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack/AnimationTrackUpgrade", "ConvertInfiniteTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, track);
}
// Writing MetadataGetter for method: AnimationTrack::AnimationTrackUpgrade::ConvertRotationsToEuler
// Il2CppName: ConvertRotationsToEuler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::AnimationTrack*)>(&AnimationTrack::AnimationTrackUpgrade::ConvertRotationsToEuler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::AnimationTrackUpgrade*), "ConvertRotationsToEuler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationTrack*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::AnimationTrackUpgrade::ConvertRootMotion
// Il2CppName: ConvertRootMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::AnimationTrack*)>(&AnimationTrack::AnimationTrackUpgrade::ConvertRootMotion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::AnimationTrackUpgrade*), "ConvertRootMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationTrack*>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::AnimationTrackUpgrade::ConvertInfiniteTrack
// Il2CppName: ConvertInfiniteTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::AnimationTrack*)>(&AnimationTrack::AnimationTrackUpgrade::ConvertInfiniteTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::AnimationTrackUpgrade*), "ConvertInfiniteTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationTrack*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49
#include "UnityEngine/Timeline/AnimationTrack_-get_outputs-d__49.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.IDisposable.Dispose
void UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.MoveNext
bool UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::$get_outputs$d__49::*)(int)>(&AnimationTrack::$get_outputs$d__49::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::$get_outputs$d__49::*)(int)>(&AnimationTrack::$get_outputs$d__49::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::$get_outputs$d__49::*)()>(&AnimationTrack::$get_outputs$d__49::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AnimationTrack::$get_outputs$d__49::*)()>(&AnimationTrack::$get_outputs$d__49::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (AnimationTrack::$get_outputs$d__49::*)()>(&AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationTrack::$get_outputs$d__49::*)()>(&AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AnimationTrack::$get_outputs$d__49::*)()>(&AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* (AnimationTrack::$get_outputs$d__49::*)()>(&AnimationTrack::$get_outputs$d__49::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AnimationTrack::$get_outputs$d__49::*)()>(&AnimationTrack::$get_outputs$d__49::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationTrack::$get_outputs$d__49*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.ICurvesOwner
#include "UnityEngine/Timeline/ICurvesOwner.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_curves
UnityEngine::AnimationClip* UnityEngine::Timeline::ICurvesOwner::get_curves() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::get_curves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_curves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_hasCurves
bool UnityEngine::Timeline::ICurvesOwner::get_hasCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::get_hasCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_duration
double UnityEngine::Timeline::ICurvesOwner::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.CreateCurves
void UnityEngine::Timeline::ICurvesOwner::CreateCurves(::Il2CppString* curvesClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::CreateCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curvesClipName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, curvesClipName);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
::Il2CppString* UnityEngine::Timeline::ICurvesOwner::get_defaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::get_defaultCurvesName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultCurvesName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_asset
UnityEngine::Object* UnityEngine::Timeline::ICurvesOwner::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::get_asset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_assetOwner
UnityEngine::Object* UnityEngine::Timeline::ICurvesOwner::get_assetOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::get_assetOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_assetOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ICurvesOwner.get_targetTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::ICurvesOwner::get_targetTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ICurvesOwner::get_targetTrack");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_targetTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ICurvesOwner::get_curves
// Il2CppName: get_curves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (ICurvesOwner::*)()>(&ICurvesOwner::get_curves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "get_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICurvesOwner::get_hasCurves
// Il2CppName: get_hasCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ICurvesOwner::*)()>(&ICurvesOwner::get_hasCurves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "get_hasCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICurvesOwner::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ICurvesOwner::*)()>(&ICurvesOwner::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICurvesOwner::CreateCurves
// Il2CppName: CreateCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICurvesOwner::*)(::Il2CppString*)>(&ICurvesOwner::CreateCurves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "CreateCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ICurvesOwner::get_defaultCurvesName
// Il2CppName: get_defaultCurvesName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ICurvesOwner::*)()>(&ICurvesOwner::get_defaultCurvesName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "get_defaultCurvesName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICurvesOwner::get_asset
// Il2CppName: get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (ICurvesOwner::*)()>(&ICurvesOwner::get_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICurvesOwner::get_assetOwner
// Il2CppName: get_assetOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (ICurvesOwner::*)()>(&ICurvesOwner::get_assetOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "get_assetOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICurvesOwner::get_targetTrack
// Il2CppName: get_targetTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (ICurvesOwner::*)()>(&ICurvesOwner::get_targetTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICurvesOwner*), "get_targetTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.TimelineClip/Versions
#include "UnityEngine/Timeline/TimelineClip_Versions.hpp"
// Including type: UnityEngine.Timeline.TimelineClip/TimelineClipUpgrade
#include "UnityEngine/Timeline/TimelineClip_TimelineClipUpgrade.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_LatestVersion
int UnityEngine::Timeline::TimelineClip::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "TimelineClip", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_LatestVersion
void UnityEngine::Timeline::TimelineClip::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "k_LatestVersion", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::TimelineClip::_get_kDefaultClipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_kDefaultClipCaps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "TimelineClip", "kDefaultClipCaps"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
void UnityEngine::Timeline::TimelineClip::_set_kDefaultClipCaps(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_kDefaultClipCaps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kDefaultClipCaps", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Single kDefaultClipDurationInSeconds
float UnityEngine::Timeline::TimelineClip::_get_kDefaultClipDurationInSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_kDefaultClipDurationInSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine.Timeline", "TimelineClip", "kDefaultClipDurationInSeconds"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Single kDefaultClipDurationInSeconds
void UnityEngine::Timeline::TimelineClip::_set_kDefaultClipDurationInSeconds(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_kDefaultClipDurationInSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kDefaultClipDurationInSeconds", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Double kTimeScaleMin
double UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMin"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Double kTimeScaleMin
void UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMin(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMin", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Double kTimeScaleMax
double UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_kTimeScaleMax");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMax"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Double kTimeScaleMax
void UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMax(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_kTimeScaleMax");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kTimeScaleMax", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.String kDefaultCurvesName
::Il2CppString* UnityEngine::Timeline::TimelineClip::_get_kDefaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_kDefaultCurvesName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine.Timeline", "TimelineClip", "kDefaultCurvesName"));
}
// Autogenerated static field setter
// Set static field: static readonly System.String kDefaultCurvesName
void UnityEngine::Timeline::TimelineClip::_set_kDefaultCurvesName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_kDefaultCurvesName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kDefaultCurvesName", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Double kMinDuration
double UnityEngine::Timeline::TimelineClip::_get_kMinDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_kMinDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kMinDuration"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Double kMinDuration
void UnityEngine::Timeline::TimelineClip::_set_kMinDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_kMinDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kMinDuration", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Double kMaxTimeValue
double UnityEngine::Timeline::TimelineClip::_get_kMaxTimeValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_get_kMaxTimeValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "TimelineClip", "kMaxTimeValue"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Double kMaxTimeValue
void UnityEngine::Timeline::TimelineClip::_set_kMaxTimeValue(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::_set_kMaxTimeValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip", "kMaxTimeValue", value));
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UpgradeToLatestVersion
void UnityEngine::Timeline::TimelineClip::UpgradeToLatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::UpgradeToLatestVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeToLatestVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasPreExtrapolation
bool UnityEngine::Timeline::TimelineClip::get_hasPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_hasPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPreExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasPostExtrapolation
bool UnityEngine::Timeline::TimelineClip::get_hasPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_hasPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPostExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_timeScale
double UnityEngine::Timeline::TimelineClip::get_timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_timeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_timeScale
void UnityEngine::Timeline::TimelineClip::set_timeScale(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_timeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_start
double UnityEngine::Timeline::TimelineClip::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_start
void UnityEngine::Timeline::TimelineClip::set_start(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_duration
double UnityEngine::Timeline::TimelineClip::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_duration
void UnityEngine::Timeline::TimelineClip::set_duration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_end
double UnityEngine::Timeline::TimelineClip::get_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_end");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_end", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_clipIn
double UnityEngine::Timeline::TimelineClip::get_clipIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_clipIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_clipIn
void UnityEngine::Timeline::TimelineClip::set_clipIn(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_clipIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clipIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_displayName
::Il2CppString* UnityEngine::Timeline::TimelineClip::get_displayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_displayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_displayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_displayName
void UnityEngine::Timeline::TimelineClip::set_displayName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_displayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_displayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_clipAssetDuration
double UnityEngine::Timeline::TimelineClip::get_clipAssetDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_clipAssetDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipAssetDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_curves
UnityEngine::AnimationClip* UnityEngine::Timeline::TimelineClip::get_curves() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_curves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_curves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_curves
void UnityEngine::Timeline::TimelineClip::set_curves(UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_curves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_curves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
::Il2CppString* UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasCurves
bool UnityEngine::Timeline::TimelineClip::get_hasCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_hasCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_asset
UnityEngine::Object* UnityEngine::Timeline::TimelineClip::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_asset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_asset
void UnityEngine::Timeline::TimelineClip::set_asset(UnityEngine::Object* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.Timeline.ICurvesOwner.get_assetOwner
UnityEngine::Object* UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::UnityEngine.Timeline.ICurvesOwner.get_assetOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ICurvesOwner.get_assetOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.Timeline.ICurvesOwner.get_targetTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::UnityEngine.Timeline.ICurvesOwner.get_targetTrack");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ICurvesOwner.get_targetTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_underlyingAsset
UnityEngine::Object* UnityEngine::Timeline::TimelineClip::get_underlyingAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_underlyingAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_underlyingAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_underlyingAsset
void UnityEngine::Timeline::TimelineClip::set_underlyingAsset(UnityEngine::Object* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_underlyingAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_underlyingAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_parentTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineClip::get_parentTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_parentTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_parentTrack
void UnityEngine::Timeline::TimelineClip::set_parentTrack(UnityEngine::Timeline::TrackAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_parentTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parentTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetParentTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineClip::GetParentTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::GetParentTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SetParentTrack_Internal
void UnityEngine::Timeline::TimelineClip::SetParentTrack_Internal(UnityEngine::Timeline::TrackAsset* newParentTrack) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::SetParentTrack_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetParentTrack_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newParentTrack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newParentTrack);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_easeInDuration
double UnityEngine::Timeline::TimelineClip::get_easeInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_easeInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_easeInDuration
void UnityEngine::Timeline::TimelineClip::set_easeInDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_easeInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_easeInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_easeOutDuration
double UnityEngine::Timeline::TimelineClip::get_easeOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_easeOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_easeOutDuration
void UnityEngine::Timeline::TimelineClip::set_easeOutDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_easeOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_easeOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_eastOutTime
double UnityEngine::Timeline::TimelineClip::get_eastOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_eastOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eastOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_easeOutTime
double UnityEngine::Timeline::TimelineClip::get_easeOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_easeOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendInDuration
double UnityEngine::Timeline::TimelineClip::get_blendInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_blendInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendInDuration
void UnityEngine::Timeline::TimelineClip::set_blendInDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_blendInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendOutDuration
double UnityEngine::Timeline::TimelineClip::get_blendOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_blendOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendOutDuration
void UnityEngine::Timeline::TimelineClip::set_blendOutDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_blendOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendInCurveMode
UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::get_blendInCurveMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_blendInCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendInCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::BlendCurveMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendInCurveMode
void UnityEngine::Timeline::TimelineClip::set_blendInCurveMode(UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_blendInCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendInCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_blendOutCurveMode
UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::get_blendOutCurveMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_blendOutCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_blendOutCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::BlendCurveMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_blendOutCurveMode
void UnityEngine::Timeline::TimelineClip::set_blendOutCurveMode(UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_blendOutCurveMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_blendOutCurveMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasBlendIn
bool UnityEngine::Timeline::TimelineClip::get_hasBlendIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_hasBlendIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasBlendIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_hasBlendOut
bool UnityEngine::Timeline::TimelineClip::get_hasBlendOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_hasBlendOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasBlendOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixInCurve
UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::get_mixInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_mixInCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixInCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationCurve*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_mixInCurve
void UnityEngine::Timeline::TimelineClip::set_mixInCurve(UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_mixInCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mixInCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixInPercentage
float UnityEngine::Timeline::TimelineClip::get_mixInPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_mixInPercentage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixInPercentage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixInDuration
double UnityEngine::Timeline::TimelineClip::get_mixInDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_mixInDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixInDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutCurve
UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::get_mixOutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_mixOutCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationCurve*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_mixOutCurve
void UnityEngine::Timeline::TimelineClip::set_mixOutCurve(UnityEngine::AnimationCurve* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_mixOutCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mixOutCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutTime
double UnityEngine::Timeline::TimelineClip::get_mixOutTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_mixOutTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutDuration
double UnityEngine::Timeline::TimelineClip::get_mixOutDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_mixOutDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_mixOutPercentage
float UnityEngine::Timeline::TimelineClip::get_mixOutPercentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_mixOutPercentage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixOutPercentage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_recordable
bool UnityEngine::Timeline::TimelineClip::get_recordable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_recordable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_recordable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_recordable
void UnityEngine::Timeline::TimelineClip::set_recordable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_recordable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_recordable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_exposedParameters
System::Collections::Generic::List_1<::Il2CppString*>* UnityEngine::Timeline::TimelineClip::get_exposedParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_exposedParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_exposedParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::TimelineClip::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_clipCaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.Hash
int UnityEngine::Timeline::TimelineClip::Hash() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::Hash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.EvaluateMixOut
float UnityEngine::Timeline::TimelineClip::EvaluateMixOut(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::EvaluateMixOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateMixOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.EvaluateMixIn
float UnityEngine::Timeline::TimelineClip::EvaluateMixIn(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::EvaluateMixIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateMixIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetDefaultMixInCurve
UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::GetDefaultMixInCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::GetDefaultMixInCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "GetDefaultMixInCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationCurve*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetDefaultMixOutCurve
UnityEngine::AnimationCurve* UnityEngine::Timeline::TimelineClip::GetDefaultMixOutCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::GetDefaultMixOutCurve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "GetDefaultMixOutCurve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationCurve*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ToLocalTime
double UnityEngine::Timeline::TimelineClip::ToLocalTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ToLocalTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToLocalTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ToLocalTimeUnbound
double UnityEngine::Timeline::TimelineClip::ToLocalTimeUnbound(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ToLocalTimeUnbound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToLocalTimeUnbound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.FromLocalTimeUnbound
double UnityEngine::Timeline::TimelineClip::FromLocalTimeUnbound(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::FromLocalTimeUnbound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromLocalTimeUnbound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_animationClip
UnityEngine::AnimationClip* UnityEngine::Timeline::TimelineClip::get_animationClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_animationClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animationClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SanitizeTimeValue
double UnityEngine::Timeline::TimelineClip::SanitizeTimeValue(double value, double defaultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::SanitizeTimeValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "SanitizeTimeValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(defaultValue)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, defaultValue);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_postExtrapolationMode
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::get_postExtrapolationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_postExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_postExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_postExtrapolationMode
void UnityEngine::Timeline::TimelineClip::set_postExtrapolationMode(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_postExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_postExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_preExtrapolationMode
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::get_preExtrapolationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_preExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.set_preExtrapolationMode
void UnityEngine::Timeline::TimelineClip::set_preExtrapolationMode(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::set_preExtrapolationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_preExtrapolationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SetPostExtrapolationTime
void UnityEngine::Timeline::TimelineClip::SetPostExtrapolationTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::SetPostExtrapolationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPostExtrapolationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.SetPreExtrapolationTime
void UnityEngine::Timeline::TimelineClip::SetPreExtrapolationTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::SetPreExtrapolationTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPreExtrapolationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.IsExtrapolatedTime
bool UnityEngine::Timeline::TimelineClip::IsExtrapolatedTime(double sequenceTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::IsExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceTime)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceTime);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.IsPreExtrapolatedTime
bool UnityEngine::Timeline::TimelineClip::IsPreExtrapolatedTime(double sequenceTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::IsPreExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPreExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceTime)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceTime);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.IsPostExtrapolatedTime
bool UnityEngine::Timeline::TimelineClip::IsPostExtrapolatedTime(double sequenceTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::IsPostExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPostExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceTime)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceTime);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_extrapolatedStart
double UnityEngine::Timeline::TimelineClip::get_extrapolatedStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_extrapolatedStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extrapolatedStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.get_extrapolatedDuration
double UnityEngine::Timeline::TimelineClip::get_extrapolatedDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::get_extrapolatedDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extrapolatedDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.GetExtrapolatedTime
double UnityEngine::Timeline::TimelineClip::GetExtrapolatedTime(double time, UnityEngine::Timeline::TimelineClip::ClipExtrapolation mode, double duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::GetExtrapolatedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "GetExtrapolatedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time, mode, duration);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.CreateCurves
void UnityEngine::Timeline::TimelineClip::CreateCurves(::Il2CppString* curvesClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::CreateCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curvesClipName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, curvesClipName);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ConformEaseValues
void UnityEngine::Timeline::TimelineClip::ConformEaseValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ConformEaseValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConformEaseValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.CalculateEasingRatio
double UnityEngine::Timeline::TimelineClip::CalculateEasingRatio(double easeIn, double easeOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::CalculateEasingRatio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", "CalculateEasingRatio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(easeIn), ::il2cpp_utils::ExtractType(easeOut)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, easeIn, easeOut);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.UpdateDirty
void UnityEngine::Timeline::TimelineClip::UpdateDirty(double oldValue, double newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::UpdateDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldValue), ::il2cpp_utils::ExtractType(newValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldValue, newValue);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip..cctor
void UnityEngine::Timeline::TimelineClip::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClip.ToString
::Il2CppString* UnityEngine::Timeline::TimelineClip::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TimelineClip::UpgradeToLatestVersion
// Il2CppName: UpgradeToLatestVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::UpgradeToLatestVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UpgradeToLatestVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_hasPreExtrapolation
// Il2CppName: get_hasPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_hasPostExtrapolation
// Il2CppName: get_hasPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_timeScale
// Il2CppName: get_timeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_timeScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_timeScale
// Il2CppName: set_timeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_timeScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_start
// Il2CppName: set_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_duration
// Il2CppName: set_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_end
// Il2CppName: get_end
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_end)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_clipIn
// Il2CppName: get_clipIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_clipIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_clipIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_clipIn
// Il2CppName: set_clipIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_clipIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_clipIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_displayName
// Il2CppName: get_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TimelineClip::*)()>(&TimelineClip::get_displayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_displayName
// Il2CppName: set_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(::Il2CppString*)>(&TimelineClip::set_displayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_clipAssetDuration
// Il2CppName: get_clipAssetDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_clipAssetDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_clipAssetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_curves
// Il2CppName: get_curves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (TimelineClip::*)()>(&TimelineClip::get_curves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_curves
// Il2CppName: set_curves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::AnimationClip*)>(&TimelineClip::set_curves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TimelineClip::*)()>(&TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_hasCurves
// Il2CppName: get_hasCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasCurves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_asset
// Il2CppName: get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TimelineClip::*)()>(&TimelineClip::get_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_asset
// Il2CppName: set_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Object*)>(&TimelineClip::set_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_assetOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TimelineClip::*)()>(&TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_assetOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_targetTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineClip::*)()>(&TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_targetTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_underlyingAsset
// Il2CppName: get_underlyingAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TimelineClip::*)()>(&TimelineClip::get_underlyingAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_underlyingAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_underlyingAsset
// Il2CppName: set_underlyingAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Object*)>(&TimelineClip::set_underlyingAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_underlyingAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_parentTrack
// Il2CppName: get_parentTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineClip::*)()>(&TimelineClip::get_parentTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_parentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_parentTrack
// Il2CppName: set_parentTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::set_parentTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_parentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::GetParentTrack
// Il2CppName: GetParentTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineClip::*)()>(&TimelineClip::GetParentTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetParentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::SetParentTrack_Internal
// Il2CppName: SetParentTrack_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::SetParentTrack_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SetParentTrack_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_easeInDuration
// Il2CppName: get_easeInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_easeInDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_easeInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_easeInDuration
// Il2CppName: set_easeInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_easeInDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_easeInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_easeOutDuration
// Il2CppName: get_easeOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_easeOutDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_easeOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_easeOutDuration
// Il2CppName: set_easeOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_easeOutDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_easeOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_eastOutTime
// Il2CppName: get_eastOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_eastOutTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_eastOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_easeOutTime
// Il2CppName: get_easeOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_easeOutTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_easeOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_blendInDuration
// Il2CppName: get_blendInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_blendInDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_blendInDuration
// Il2CppName: set_blendInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_blendInDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_blendOutDuration
// Il2CppName: get_blendOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_blendOutDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_blendOutDuration
// Il2CppName: set_blendOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_blendOutDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_blendInCurveMode
// Il2CppName: get_blendInCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::BlendCurveMode (TimelineClip::*)()>(&TimelineClip::get_blendInCurveMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendInCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_blendInCurveMode
// Il2CppName: set_blendInCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::BlendCurveMode)>(&TimelineClip::set_blendInCurveMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendInCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::BlendCurveMode>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_blendOutCurveMode
// Il2CppName: get_blendOutCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::BlendCurveMode (TimelineClip::*)()>(&TimelineClip::get_blendOutCurveMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendOutCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_blendOutCurveMode
// Il2CppName: set_blendOutCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::BlendCurveMode)>(&TimelineClip::set_blendOutCurveMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendOutCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::BlendCurveMode>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_hasBlendIn
// Il2CppName: get_hasBlendIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasBlendIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasBlendIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_hasBlendOut
// Il2CppName: get_hasBlendOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasBlendOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasBlendOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_mixInCurve
// Il2CppName: get_mixInCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (TimelineClip::*)()>(&TimelineClip::get_mixInCurve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_mixInCurve
// Il2CppName: set_mixInCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::AnimationCurve*)>(&TimelineClip::set_mixInCurve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_mixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationCurve*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_mixInPercentage
// Il2CppName: get_mixInPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)()>(&TimelineClip::get_mixInPercentage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixInPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_mixInDuration
// Il2CppName: get_mixInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_mixInDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_mixOutCurve
// Il2CppName: get_mixOutCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (TimelineClip::*)()>(&TimelineClip::get_mixOutCurve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_mixOutCurve
// Il2CppName: set_mixOutCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::AnimationCurve*)>(&TimelineClip::set_mixOutCurve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_mixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationCurve*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_mixOutTime
// Il2CppName: get_mixOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_mixOutTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_mixOutDuration
// Il2CppName: get_mixOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_mixOutDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_mixOutPercentage
// Il2CppName: get_mixOutPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)()>(&TimelineClip::get_mixOutPercentage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_recordable
// Il2CppName: get_recordable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_recordable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_recordable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_recordable
// Il2CppName: set_recordable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(bool)>(&TimelineClip::set_recordable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_recordable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_exposedParameters
// Il2CppName: get_exposedParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<::Il2CppString*>* (TimelineClip::*)()>(&TimelineClip::get_exposedParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_exposedParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (TimelineClip::*)()>(&TimelineClip::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TimelineClip::*)()>(&TimelineClip::Hash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::EvaluateMixOut
// Il2CppName: EvaluateMixOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)(double)>(&TimelineClip::EvaluateMixOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "EvaluateMixOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::EvaluateMixIn
// Il2CppName: EvaluateMixIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)(double)>(&TimelineClip::EvaluateMixIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "EvaluateMixIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::GetDefaultMixInCurve
// Il2CppName: GetDefaultMixInCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (*)()>(&TimelineClip::GetDefaultMixInCurve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetDefaultMixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::GetDefaultMixOutCurve
// Il2CppName: GetDefaultMixOutCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (*)()>(&TimelineClip::GetDefaultMixOutCurve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetDefaultMixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::ToLocalTime
// Il2CppName: ToLocalTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)(double)>(&TimelineClip::ToLocalTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ToLocalTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::ToLocalTimeUnbound
// Il2CppName: ToLocalTimeUnbound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)(double)>(&TimelineClip::ToLocalTimeUnbound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ToLocalTimeUnbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::FromLocalTimeUnbound
// Il2CppName: FromLocalTimeUnbound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)(double)>(&TimelineClip::FromLocalTimeUnbound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "FromLocalTimeUnbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_animationClip
// Il2CppName: get_animationClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (TimelineClip::*)()>(&TimelineClip::get_animationClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_animationClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::SanitizeTimeValue
// Il2CppName: SanitizeTimeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&TimelineClip::SanitizeTimeValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SanitizeTimeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_postExtrapolationMode
// Il2CppName: get_postExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (TimelineClip::*)()>(&TimelineClip::get_postExtrapolationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_postExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_postExtrapolationMode
// Il2CppName: set_postExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&TimelineClip::set_postExtrapolationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_postExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_preExtrapolationMode
// Il2CppName: get_preExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (TimelineClip::*)()>(&TimelineClip::get_preExtrapolationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_preExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::set_preExtrapolationMode
// Il2CppName: set_preExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&TimelineClip::set_preExtrapolationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_preExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::SetPostExtrapolationTime
// Il2CppName: SetPostExtrapolationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::SetPostExtrapolationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SetPostExtrapolationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::SetPreExtrapolationTime
// Il2CppName: SetPreExtrapolationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::SetPreExtrapolationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SetPreExtrapolationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::IsExtrapolatedTime
// Il2CppName: IsExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)(double)>(&TimelineClip::IsExtrapolatedTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "IsExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::IsPreExtrapolatedTime
// Il2CppName: IsPreExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)(double)>(&TimelineClip::IsPreExtrapolatedTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "IsPreExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::IsPostExtrapolatedTime
// Il2CppName: IsPostExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)(double)>(&TimelineClip::IsPostExtrapolatedTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "IsPostExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_extrapolatedStart
// Il2CppName: get_extrapolatedStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_extrapolatedStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_extrapolatedStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::get_extrapolatedDuration
// Il2CppName: get_extrapolatedDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_extrapolatedDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_extrapolatedDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::GetExtrapolatedTime
// Il2CppName: GetExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, UnityEngine::Timeline::TimelineClip::ClipExtrapolation, double)>(&TimelineClip::GetExtrapolatedTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::CreateCurves
// Il2CppName: CreateCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(::Il2CppString*)>(&TimelineClip::CreateCurves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "CreateCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::ConformEaseValues
// Il2CppName: ConformEaseValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::ConformEaseValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ConformEaseValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::CalculateEasingRatio
// Il2CppName: CalculateEasingRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&TimelineClip::CalculateEasingRatio)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "CalculateEasingRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::UpdateDirty
// Il2CppName: UpdateDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double, double)>(&TimelineClip::UpdateDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UpdateDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineClip::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TimelineClip::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineClip::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TimelineClip::*)()>(&TimelineClip::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/Versions
#include "UnityEngine/Timeline/TimelineClip_Versions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/Versions Initial
UnityEngine::Timeline::TimelineClip::Versions UnityEngine::Timeline::TimelineClip::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::Versions>("UnityEngine.Timeline", "TimelineClip/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/Versions Initial
void UnityEngine::Timeline::TimelineClip::Versions::_set_Initial(UnityEngine::Timeline::TimelineClip::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/Versions", "Initial", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/Versions ClipInFromGlobalToLocal
UnityEngine::Timeline::TimelineClip::Versions UnityEngine::Timeline::TimelineClip::Versions::_get_ClipInFromGlobalToLocal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::Versions::_get_ClipInFromGlobalToLocal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::Versions>("UnityEngine.Timeline", "TimelineClip/Versions", "ClipInFromGlobalToLocal"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/Versions ClipInFromGlobalToLocal
void UnityEngine::Timeline::TimelineClip::Versions::_set_ClipInFromGlobalToLocal(UnityEngine::Timeline::TimelineClip::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::Versions::_set_ClipInFromGlobalToLocal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/Versions", "ClipInFromGlobalToLocal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/TimelineClipUpgrade
#include "UnityEngine/Timeline/TimelineClip_TimelineClipUpgrade.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TimelineClip/TimelineClipUpgrade.UpgradeClipInFromGlobalToLocal
void UnityEngine::Timeline::TimelineClip::TimelineClipUpgrade::UpgradeClipInFromGlobalToLocal(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::TimelineClipUpgrade::UpgradeClipInFromGlobalToLocal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClip/TimelineClipUpgrade", "UpgradeClipInFromGlobalToLocal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Writing MetadataGetter for method: TimelineClip::TimelineClipUpgrade::UpgradeClipInFromGlobalToLocal
// Il2CppName: UpgradeClipInFromGlobalToLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineClip::TimelineClipUpgrade::UpgradeClipInFromGlobalToLocal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClip::TimelineClipUpgrade*), "UpgradeClipInFromGlobalToLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/ClipExtrapolation
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation None
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation None
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_None(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Hold
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Hold() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Hold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Hold"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Hold
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Hold(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Hold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Hold", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Loop
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Loop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Loop"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Loop
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Loop(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Loop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Loop", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation PingPong
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_PingPong() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_PingPong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "PingPong"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation PingPong
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_PingPong(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_PingPong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "PingPong", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Continue
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Continue() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_get_Continue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Continue"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Continue
void UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Continue(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::ClipExtrapolation::_set_Continue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation", "Continue", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClip/BlendCurveMode
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Auto
UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::BlendCurveMode>("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Auto
void UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Auto(UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Manual
UnityEngine::Timeline::TimelineClip::BlendCurveMode UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Manual() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::BlendCurveMode::_get_Manual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineClip::BlendCurveMode>("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Manual"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Manual
void UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Manual(UnityEngine::Timeline::TimelineClip::BlendCurveMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::BlendCurveMode::_set_Manual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineClip/BlendCurveMode", "Manual", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TimelineAsset
#include "UnityEngine/Timeline/TimelineAsset.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/Versions
#include "UnityEngine/Timeline/TimelineAsset_Versions.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/TimelineAssetUpgrade
#include "UnityEngine/Timeline/TimelineAsset_TimelineAssetUpgrade.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/MediaType
#include "UnityEngine/Timeline/TimelineAsset_MediaType.hpp"
// Including type: UnityEngine.Timeline.MarkerTrack
#include "UnityEngine/Timeline/MarkerTrack.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/EditorSettings
#include "UnityEngine/Timeline/TimelineAsset_EditorSettings.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27
#include "UnityEngine/Timeline/TimelineAsset_-get_outputs-d__27.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: UnityEngine.Timeline.DiscreteTime
#include "UnityEngine/Timeline/DiscreteTime.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_LatestVersion
int UnityEngine::Timeline::TimelineAsset::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "TimelineAsset", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_LatestVersion
void UnityEngine::Timeline::TimelineAsset::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset", "k_LatestVersion", value));
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpgradeToLatestVersion
void UnityEngine::Timeline::TimelineAsset::UpgradeToLatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::UpgradeToLatestVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeToLatestVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_editorSettings
UnityEngine::Timeline::TimelineAsset::EditorSettings* UnityEngine::Timeline::TimelineAsset::get_editorSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_editorSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_editorSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineAsset::EditorSettings*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_fixedDuration
double UnityEngine::Timeline::TimelineAsset::get_fixedDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_fixedDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fixedDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.set_fixedDuration
void UnityEngine::Timeline::TimelineAsset::set_fixedDuration(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::set_fixedDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fixedDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_durationMode
UnityEngine::Timeline::TimelineAsset::DurationMode UnityEngine::Timeline::TimelineAsset::get_durationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_durationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_durationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineAsset::DurationMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.set_durationMode
void UnityEngine::Timeline::TimelineAsset::set_durationMode(UnityEngine::Timeline::TimelineAsset::DurationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::set_durationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_durationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::TimelineAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_outputTrackCount
int UnityEngine::Timeline::TimelineAsset::get_outputTrackCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_outputTrackCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputTrackCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_rootTrackCount
int UnityEngine::Timeline::TimelineAsset::get_rootTrackCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_rootTrackCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootTrackCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.OnValidate
void UnityEngine::Timeline::TimelineAsset::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetValidFramerate
float UnityEngine::Timeline::TimelineAsset::GetValidFramerate(float framerate) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::GetValidFramerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineAsset", "GetValidFramerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(framerate)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, framerate);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetRootTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::GetRootTrack(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::GetRootTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetRootTracks
System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TimelineAsset::GetRootTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::GetRootTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetOutputTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::GetOutputTrack(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::GetOutputTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutputTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GetOutputTracks
System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TimelineAsset::GetOutputTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::GetOutputTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutputTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpdateRootTrackCache
void UnityEngine::Timeline::TimelineAsset::UpdateRootTrackCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::UpdateRootTrackCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRootTrackCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpdateOutputTrackCache
void UnityEngine::Timeline::TimelineAsset::UpdateOutputTrackCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::UpdateOutputTrackCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateOutputTrackCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_flattenedTracks
System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TimelineAsset::get_flattenedTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_flattenedTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flattenedTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_markerTrack
UnityEngine::Timeline::MarkerTrack* UnityEngine::Timeline::TimelineAsset::get_markerTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_markerTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_markerTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::MarkerTrack*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_trackObjects
System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* UnityEngine::Timeline::TimelineAsset::get_trackObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_trackObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_trackObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.AddTrackInternal
void UnityEngine::Timeline::TimelineAsset::AddTrackInternal(UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::AddTrackInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTrackInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.RemoveTrack
void UnityEngine::Timeline::TimelineAsset::RemoveTrack(UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::RemoveTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.__internalAwake
void UnityEngine::Timeline::TimelineAsset::__internalAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::__internalAwake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__internalAwake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.GatherProperties
void UnityEngine::Timeline::TimelineAsset::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(driver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CreateMarkerTrack
void UnityEngine::Timeline::TimelineAsset::CreateMarkerTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::CreateMarkerTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMarkerTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.Invalidate
void UnityEngine::Timeline::TimelineAsset::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.UpdateFixedDurationWithItemsDuration
void UnityEngine::Timeline::TimelineAsset::UpdateFixedDurationWithItemsDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::UpdateFixedDurationWithItemsDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFixedDurationWithItemsDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CalculateItemsDuration
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::TimelineAsset::CalculateItemsDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::CalculateItemsDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateItemsDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.AddSubTracksRecursive
void UnityEngine::Timeline::TimelineAsset::AddSubTracksRecursive(UnityEngine::Timeline::TrackAsset* track, System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>*& allTracks) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::AddSubTracksRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineAsset", "AddSubTracksRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track), ::il2cpp_utils::ExtractType(allTracks)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, track, allTracks);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CreateTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::CreateTrack(System::Type* type, UnityEngine::Timeline::TrackAsset* parent, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::CreateTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, type, parent, name);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteClip
bool UnityEngine::Timeline::TimelineAsset::DeleteClip(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DeleteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteTrack
bool UnityEngine::Timeline::TimelineAsset::DeleteTrack(UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DeleteTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.MoveLastTrackBefore
void UnityEngine::Timeline::TimelineAsset::MoveLastTrackBefore(UnityEngine::Timeline::TrackAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MoveLastTrackBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveLastTrackBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.AllocateTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TimelineAsset::AllocateTrack(UnityEngine::Timeline::TrackAsset* trackAssetParent, ::Il2CppString* trackName, System::Type* trackType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::AllocateTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllocateTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trackAssetParent), ::il2cpp_utils::ExtractType(trackName), ::il2cpp_utils::ExtractType(trackType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method, trackAssetParent, trackName, trackType);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteRecordedAnimation
void UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation(UnityEngine::Timeline::TrackAsset* track) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteRecordedAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(track)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, track);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.DeleteRecordedAnimation
void UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DeleteRecordedAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteRecordedAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_duration
double UnityEngine::Timeline::TimelineAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TimelineAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::TimelineAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Writing MetadataGetter for method: TimelineAsset::UpgradeToLatestVersion
// Il2CppName: UpgradeToLatestVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::UpgradeToLatestVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "UpgradeToLatestVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_editorSettings
// Il2CppName: get_editorSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineAsset::EditorSettings* (TimelineAsset::*)()>(&TimelineAsset::get_editorSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_editorSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_fixedDuration
// Il2CppName: get_fixedDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineAsset::*)()>(&TimelineAsset::get_fixedDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_fixedDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::set_fixedDuration
// Il2CppName: set_fixedDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(double)>(&TimelineAsset::set_fixedDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "set_fixedDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_durationMode
// Il2CppName: get_durationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineAsset::DurationMode (TimelineAsset::*)()>(&TimelineAsset::get_durationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_durationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::set_durationMode
// Il2CppName: set_durationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(UnityEngine::Timeline::TimelineAsset::DurationMode)>(&TimelineAsset::set_durationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "set_durationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineAsset::DurationMode>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (TimelineAsset::*)()>(&TimelineAsset::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_outputTrackCount
// Il2CppName: get_outputTrackCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TimelineAsset::*)()>(&TimelineAsset::get_outputTrackCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_outputTrackCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_rootTrackCount
// Il2CppName: get_rootTrackCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TimelineAsset::*)()>(&TimelineAsset::get_rootTrackCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_rootTrackCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::GetValidFramerate
// Il2CppName: GetValidFramerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&TimelineAsset::GetValidFramerate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "GetValidFramerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::GetRootTrack
// Il2CppName: GetRootTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineAsset::*)(int)>(&TimelineAsset::GetRootTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "GetRootTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::GetRootTracks
// Il2CppName: GetRootTracks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* (TimelineAsset::*)()>(&TimelineAsset::GetRootTracks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "GetRootTracks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::GetOutputTrack
// Il2CppName: GetOutputTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineAsset::*)(int)>(&TimelineAsset::GetOutputTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "GetOutputTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::GetOutputTracks
// Il2CppName: GetOutputTracks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* (TimelineAsset::*)()>(&TimelineAsset::GetOutputTracks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "GetOutputTracks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::UpdateRootTrackCache
// Il2CppName: UpdateRootTrackCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::UpdateRootTrackCache)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "UpdateRootTrackCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::UpdateOutputTrackCache
// Il2CppName: UpdateOutputTrackCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::UpdateOutputTrackCache)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "UpdateOutputTrackCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_flattenedTracks
// Il2CppName: get_flattenedTracks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* (TimelineAsset::*)()>(&TimelineAsset::get_flattenedTracks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_flattenedTracks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_markerTrack
// Il2CppName: get_markerTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::MarkerTrack* (TimelineAsset::*)()>(&TimelineAsset::get_markerTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_markerTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_trackObjects
// Il2CppName: get_trackObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* (TimelineAsset::*)()>(&TimelineAsset::get_trackObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_trackObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::AddTrackInternal
// Il2CppName: AddTrackInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineAsset::AddTrackInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "AddTrackInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::RemoveTrack
// Il2CppName: RemoveTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineAsset::RemoveTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "RemoveTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::__internalAwake
// Il2CppName: __internalAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::__internalAwake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "__internalAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(UnityEngine::Playables::PlayableDirector*, UnityEngine::Timeline::IPropertyCollector*)>(&TimelineAsset::GatherProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::CreateMarkerTrack
// Il2CppName: CreateMarkerTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::CreateMarkerTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "CreateMarkerTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::Invalidate
// Il2CppName: Invalidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::Invalidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "Invalidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::UpdateFixedDurationWithItemsDuration
// Il2CppName: UpdateFixedDurationWithItemsDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::UpdateFixedDurationWithItemsDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "UpdateFixedDurationWithItemsDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::CalculateItemsDuration
// Il2CppName: CalculateItemsDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (TimelineAsset::*)()>(&TimelineAsset::CalculateItemsDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "CalculateItemsDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::AddSubTracksRecursive
// Il2CppName: AddSubTracksRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::TrackAsset*, System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>*&)>(&TimelineAsset::AddSubTracksRecursive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "AddSubTracksRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>*&>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::CreateTrack
// Il2CppName: CreateTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineAsset::*)(System::Type*, UnityEngine::Timeline::TrackAsset*, ::Il2CppString*)>(&TimelineAsset::CreateTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "CreateTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::CreateTrack
// Il2CppName: CreateTrack
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TimelineAsset::CreateTrack
// Il2CppName: CreateTrack
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TimelineAsset::CreateTrack
// Il2CppName: CreateTrack
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TimelineAsset::DeleteClip
// Il2CppName: DeleteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineAsset::*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineAsset::DeleteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "DeleteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::DeleteTrack
// Il2CppName: DeleteTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineAsset::DeleteTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "DeleteTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::MoveLastTrackBefore
// Il2CppName: MoveLastTrackBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineAsset::MoveLastTrackBefore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "MoveLastTrackBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::AllocateTrack
// Il2CppName: AllocateTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineAsset::*)(UnityEngine::Timeline::TrackAsset*, ::Il2CppString*, System::Type*)>(&TimelineAsset::AllocateTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "AllocateTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::DeleteRecordedAnimation
// Il2CppName: DeleteRecordedAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineAsset::DeleteRecordedAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "DeleteRecordedAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::DeleteRecordedAnimation
// Il2CppName: DeleteRecordedAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineAsset::DeleteRecordedAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "DeleteRecordedAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineAsset::*)()>(&TimelineAsset::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (TimelineAsset::*)()>(&TimelineAsset::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TimelineAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&TimelineAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::*)()>(&TimelineAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/Versions
#include "UnityEngine/Timeline/TimelineAsset_Versions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/Versions Initial
UnityEngine::Timeline::TimelineAsset::Versions UnityEngine::Timeline::TimelineAsset::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::Versions>("UnityEngine.Timeline", "TimelineAsset/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/Versions Initial
void UnityEngine::Timeline::TimelineAsset::Versions::_set_Initial(UnityEngine::Timeline::TimelineAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/Versions", "Initial", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/MediaType
#include "UnityEngine/Timeline/TimelineAsset_MediaType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Animation
UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_get_Animation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Animation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Animation
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Animation(UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_set_Animation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Animation", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Audio
UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Audio() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_get_Audio");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Audio"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Audio
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Audio(UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_set_Audio");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Audio", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Texture
UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_get_Texture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Texture"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Texture
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Texture(UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_set_Texture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Texture", value));
}
// [ObsoleteAttribute] Offset: 0xDD8834
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Video
UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Video() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_get_Video");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Video"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Video
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Video(UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_set_Video");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Video", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Script
UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Script() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_get_Script");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Script"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Script
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Script(UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_set_Script");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Script", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Hybrid
UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Hybrid() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_get_Hybrid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Hybrid"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Hybrid
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Hybrid(UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_set_Hybrid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Hybrid", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Group
UnityEngine::Timeline::TimelineAsset::MediaType UnityEngine::Timeline::TimelineAsset::MediaType::_get_Group() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_get_Group");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::MediaType>("UnityEngine.Timeline", "TimelineAsset/MediaType", "Group"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/MediaType Group
void UnityEngine::Timeline::TimelineAsset::MediaType::_set_Group(UnityEngine::Timeline::TimelineAsset::MediaType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::MediaType::_set_Group");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/MediaType", "Group", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/DurationMode
#include "UnityEngine/Timeline/TimelineAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode BasedOnClips
UnityEngine::Timeline::TimelineAsset::DurationMode UnityEngine::Timeline::TimelineAsset::DurationMode::_get_BasedOnClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DurationMode::_get_BasedOnClips");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::DurationMode>("UnityEngine.Timeline", "TimelineAsset/DurationMode", "BasedOnClips"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode BasedOnClips
void UnityEngine::Timeline::TimelineAsset::DurationMode::_set_BasedOnClips(UnityEngine::Timeline::TimelineAsset::DurationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DurationMode::_set_BasedOnClips");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/DurationMode", "BasedOnClips", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode FixedLength
UnityEngine::Timeline::TimelineAsset::DurationMode UnityEngine::Timeline::TimelineAsset::DurationMode::_get_FixedLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DurationMode::_get_FixedLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TimelineAsset::DurationMode>("UnityEngine.Timeline", "TimelineAsset/DurationMode", "FixedLength"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode FixedLength
void UnityEngine::Timeline::TimelineAsset::DurationMode::_set_FixedLength(UnityEngine::Timeline::TimelineAsset::DurationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::DurationMode::_set_FixedLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/DurationMode", "FixedLength", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineAsset/EditorSettings
#include "UnityEngine/Timeline/TimelineAsset_EditorSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.Single kMinFps
float UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMinFps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMinFps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMinFps"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Single kMinFps
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMinFps(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMinFps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMinFps", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Single kMaxFps
float UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMaxFps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kMaxFps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMaxFps"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Single kMaxFps
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMaxFps(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kMaxFps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kMaxFps", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Single kDefaultFps
float UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kDefaultFps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::_get_kDefaultFps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kDefaultFps"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Single kDefaultFps
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kDefaultFps(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::_set_kDefaultFps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TimelineAsset/EditorSettings", "kDefaultFps", value));
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.get_fps
float UnityEngine::Timeline::TimelineAsset::EditorSettings::get_fps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::get_fps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.set_fps
void UnityEngine::Timeline::TimelineAsset::EditorSettings::set_fps(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::set_fps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.get_scenePreview
bool UnityEngine::Timeline::TimelineAsset::EditorSettings::get_scenePreview() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::get_scenePreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scenePreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings.set_scenePreview
void UnityEngine::Timeline::TimelineAsset::EditorSettings::set_scenePreview(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::set_scenePreview");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scenePreview", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/EditorSettings..cctor
void UnityEngine::Timeline::TimelineAsset::EditorSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::EditorSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineAsset/EditorSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TimelineAsset::EditorSettings::get_fps
// Il2CppName: get_fps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineAsset::EditorSettings::*)()>(&TimelineAsset::EditorSettings::get_fps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::EditorSettings*), "get_fps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::EditorSettings::set_fps
// Il2CppName: set_fps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::EditorSettings::*)(float)>(&TimelineAsset::EditorSettings::set_fps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::EditorSettings*), "set_fps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::EditorSettings::get_scenePreview
// Il2CppName: get_scenePreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineAsset::EditorSettings::*)()>(&TimelineAsset::EditorSettings::get_scenePreview)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::EditorSettings*), "get_scenePreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::EditorSettings::set_scenePreview
// Il2CppName: set_scenePreview
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::EditorSettings::*)(bool)>(&TimelineAsset::EditorSettings::set_scenePreview)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::EditorSettings*), "set_scenePreview", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::EditorSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TimelineAsset::EditorSettings::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::EditorSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::EditorSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::EditorSettings::*)()>(&TimelineAsset::EditorSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::EditorSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::EditorSettings::*)()>(&TimelineAsset::EditorSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::EditorSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27
#include "UnityEngine/Timeline/TimelineAsset_-get_outputs-d__27.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.IDisposable.Dispose
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.MoveNext
bool UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.<>m__Finally1
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.<>m__Finally2
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::$$m__Finally2() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::<>m__Finally2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TimelineAsset/<get_outputs>d__27.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::$get_outputs$d__27::*)(int)>(&TimelineAsset::$get_outputs$d__27::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::$get_outputs$d__27::*)(int)>(&TimelineAsset::$get_outputs$d__27::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::$$m__Finally2
// Il2CppName: <>m__Finally2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::$$m__Finally2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "<>m__Finally2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TimelineAsset::$get_outputs$d__27::*)()>(&TimelineAsset::$get_outputs$d__27::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineAsset::$get_outputs$d__27*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/Versions
#include "UnityEngine/Timeline/TrackAsset_Versions.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/TrackAssetUpgrade
#include "UnityEngine/Timeline/TrackAsset_TrackAssetUpgrade.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65
#include "UnityEngine/Timeline/TrackAsset_-get_outputs-d__65.hpp"
// Including type: UnityEngine.Timeline.TrackAsset/<>c
#include "UnityEngine/Timeline/TrackAsset_--c.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Timeline.TrackBindingTypeAttribute
#include "UnityEngine/Timeline/TrackBindingTypeAttribute.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset
#include "UnityEngine/Timeline/TimelineAsset.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.IPlayableAsset
#include "UnityEngine/Playables/IPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
// Including type: UnityEngine.Timeline.IntervalTree`1
#include "UnityEngine/Timeline/IntervalTree_1.hpp"
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_LatestVersion
int UnityEngine::Timeline::TrackAsset::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "TrackAsset", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_LatestVersion
void UnityEngine::Timeline::TrackAsset::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "k_LatestVersion", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Timeline.TrackAsset/TransientBuildData s_BuildData
UnityEngine::Timeline::TrackAsset::TransientBuildData UnityEngine::Timeline::TrackAsset::_get_s_BuildData() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_get_s_BuildData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackAsset::TransientBuildData>("UnityEngine.Timeline", "TrackAsset", "s_BuildData"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Timeline.TrackAsset/TransientBuildData s_BuildData
void UnityEngine::Timeline::TrackAsset::_set_s_BuildData(UnityEngine::Timeline::TrackAsset::TransientBuildData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_set_s_BuildData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "s_BuildData", value));
}
// Autogenerated static field getter
// Get static field: static System.String kDefaultCurvesName
::Il2CppString* UnityEngine::Timeline::TrackAsset::_get_kDefaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_get_kDefaultCurvesName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine.Timeline", "TrackAsset", "kDefaultCurvesName"));
}
// Autogenerated static field setter
// Set static field: static System.String kDefaultCurvesName
void UnityEngine::Timeline::TrackAsset::_set_kDefaultCurvesName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_set_kDefaultCurvesName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "kDefaultCurvesName", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDD82DC
// Autogenerated static field getter
// Get static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnClipPlayableCreate
System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* UnityEngine::Timeline::TrackAsset::_get_OnClipPlayableCreate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_get_OnClipPlayableCreate");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*>("UnityEngine.Timeline", "TrackAsset", "OnClipPlayableCreate")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnClipPlayableCreate
void UnityEngine::Timeline::TrackAsset::_set_OnClipPlayableCreate(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_set_OnClipPlayableCreate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "OnClipPlayableCreate", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDD82EC
// Autogenerated static field getter
// Get static field: static private System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnTrackAnimationPlayableCreate
System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* UnityEngine::Timeline::TrackAsset::_get_OnTrackAnimationPlayableCreate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_get_OnTrackAnimationPlayableCreate");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*>("UnityEngine.Timeline", "TrackAsset", "OnTrackAnimationPlayableCreate")));
}
// Autogenerated static field setter
// Set static field: static private System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnTrackAnimationPlayableCreate
void UnityEngine::Timeline::TrackAsset::_set_OnTrackAnimationPlayableCreate(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_set_OnTrackAnimationPlayableCreate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "OnTrackAnimationPlayableCreate", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
::Array<UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TrackAsset::_get_s_EmptyCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_get_s_EmptyCache");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Timeline::TrackAsset*>*>("UnityEngine.Timeline", "TrackAsset", "s_EmptyCache"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
void UnityEngine::Timeline::TrackAsset::_set_s_EmptyCache(::Array<UnityEngine::Timeline::TrackAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_set_s_EmptyCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "s_EmptyCache", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
System::Collections::Generic::Dictionary_2<System::Type*, UnityEngine::Timeline::TrackBindingTypeAttribute*>* UnityEngine::Timeline::TrackAsset::_get_s_TrackBindingTypeAttributeCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_get_s_TrackBindingTypeAttributeCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, UnityEngine::Timeline::TrackBindingTypeAttribute*>*>("UnityEngine.Timeline", "TrackAsset", "s_TrackBindingTypeAttributeCache")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
void UnityEngine::Timeline::TrackAsset::_set_s_TrackBindingTypeAttributeCache(System::Collections::Generic::Dictionary_2<System::Type*, UnityEngine::Timeline::TrackBindingTypeAttribute*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::_set_s_TrackBindingTypeAttributeCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset", "s_TrackBindingTypeAttributeCache", value));
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnBeforeTrackSerialize
void UnityEngine::Timeline::TrackAsset::OnBeforeTrackSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::OnBeforeTrackSerialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeTrackSerialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnAfterTrackDeserialize
void UnityEngine::Timeline::TrackAsset::OnAfterTrackDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::OnAfterTrackDeserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAfterTrackDeserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnUpgradeFromVersion
void UnityEngine::Timeline::TrackAsset::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::OnUpgradeFromVersion");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpgradeFromVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldVersion)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UpgradeToLatestVersion
void UnityEngine::Timeline::TrackAsset::UpgradeToLatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UpgradeToLatestVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeToLatestVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.add_OnClipPlayableCreate
void UnityEngine::Timeline::TrackAsset::add_OnClipPlayableCreate(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::add_OnClipPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "add_OnClipPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.remove_OnClipPlayableCreate
void UnityEngine::Timeline::TrackAsset::remove_OnClipPlayableCreate(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::remove_OnClipPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "remove_OnClipPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.add_OnTrackAnimationPlayableCreate
void UnityEngine::Timeline::TrackAsset::add_OnTrackAnimationPlayableCreate(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::add_OnTrackAnimationPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "add_OnTrackAnimationPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.remove_OnTrackAnimationPlayableCreate
void UnityEngine::Timeline::TrackAsset::remove_OnTrackAnimationPlayableCreate(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::remove_OnTrackAnimationPlayableCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "remove_OnTrackAnimationPlayableCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_start
double UnityEngine::Timeline::TrackAsset::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_end
double UnityEngine::Timeline::TrackAsset::get_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_end");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_end", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_muted
bool UnityEngine::Timeline::TrackAsset::get_muted() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_muted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_muted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_muted
void UnityEngine::Timeline::TrackAsset::set_muted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::set_muted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_muted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_mutedInHierarchy
bool UnityEngine::Timeline::TrackAsset::get_mutedInHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_mutedInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mutedInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_timelineAsset
UnityEngine::Timeline::TimelineAsset* UnityEngine::Timeline::TrackAsset::get_timelineAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_timelineAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timelineAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_parent
UnityEngine::Playables::PlayableAsset* UnityEngine::Timeline::TrackAsset::get_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_parent
void UnityEngine::Timeline::TrackAsset::set_parent(UnityEngine::Playables::PlayableAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::set_parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetClips
System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TimelineClip*>* UnityEngine::Timeline::TrackAsset::GetClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TimelineClip*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_clips
::Array<UnityEngine::Timeline::TimelineClip*>* UnityEngine::Timeline::TrackAsset::get_clips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_clips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Timeline::TimelineClip*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_isEmpty
bool UnityEngine::Timeline::TrackAsset::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_isEmpty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_hasClips
bool UnityEngine::Timeline::TrackAsset::get_hasClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_hasClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_hasCurves
bool UnityEngine::Timeline::TrackAsset::get_hasCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_hasCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_isSubTrack
bool UnityEngine::Timeline::TrackAsset::get_isSubTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_isSubTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSubTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetChildTracks
System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* UnityEngine::Timeline::TrackAsset::GetChildTracks() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetChildTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChildTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_customPlayableTypename
::Il2CppString* UnityEngine::Timeline::TrackAsset::get_customPlayableTypename() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_customPlayableTypename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_customPlayableTypename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_customPlayableTypename
void UnityEngine::Timeline::TrackAsset::set_customPlayableTypename(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::set_customPlayableTypename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_customPlayableTypename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_curves
UnityEngine::AnimationClip* UnityEngine::Timeline::TrackAsset::get_curves() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_curves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_curves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_curves
void UnityEngine::Timeline::TrackAsset::set_curves(UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::set_curves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_curves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
::Il2CppString* UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_asset
UnityEngine::Object* UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_asset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ICurvesOwner.get_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_assetOwner
UnityEngine::Object* UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_assetOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_assetOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ICurvesOwner.get_assetOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UnityEngine.Timeline.ICurvesOwner.get_targetTrack
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_targetTrack() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UnityEngine.Timeline.ICurvesOwner.get_targetTrack");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ICurvesOwner.get_targetTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_subTracksObjects
System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* UnityEngine::Timeline::TrackAsset::get_subTracksObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_subTracksObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_subTracksObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_locked
bool UnityEngine::Timeline::TrackAsset::get_locked() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_locked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_locked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.set_locked
void UnityEngine::Timeline::TrackAsset::set_locked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::set_locked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_locked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_lockedInHierarchy
bool UnityEngine::Timeline::TrackAsset::get_lockedInHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_lockedInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lockedInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_supportsNotifications
bool UnityEngine::Timeline::TrackAsset::get_supportsNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_supportsNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_supportsNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.__internalAwake
void UnityEngine::Timeline::TrackAsset::__internalAwake() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::__internalAwake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__internalAwake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateCurves
void UnityEngine::Timeline::TrackAsset::CreateCurves(::Il2CppString* curvesClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateCurves");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curvesClipName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, curvesClipName);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateTrackMixer
UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreateTrackMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateTrackMixer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTrackMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(inputCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateDefaultClip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateDefaultClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateDefaultClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDefaultClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.DeleteClip
bool UnityEngine::Timeline::TrackAsset::DeleteClip(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::DeleteClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateMarker
UnityEngine::Timeline::IMarker* UnityEngine::Timeline::TrackAsset::CreateMarker(System::Type* type, double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::IMarker*, false>(this, ___internal__method, type, time);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.DeleteMarker
bool UnityEngine::Timeline::TrackAsset::DeleteMarker(UnityEngine::Timeline::IMarker* marker) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::DeleteMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(marker)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, marker);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarkers
System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::IMarker*>* UnityEngine::Timeline::TrackAsset::GetMarkers() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetMarkers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarkers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::IMarker*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarkerCount
int UnityEngine::Timeline::TrackAsset::GetMarkerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetMarkerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarkerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarker
UnityEngine::Timeline::IMarker* UnityEngine::Timeline::TrackAsset::GetMarker(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::IMarker*, false>(this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClip(System::Type* requestedType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, requestedType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateAndAddNewClipOfType
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateAndAddNewClipOfType(System::Type* requestedType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateAndAddNewClipOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateAndAddNewClipOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, requestedType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClipOfType
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClipOfType(System::Type* requestedType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateClipOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClipOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(requestedType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, requestedType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClipFromPlayableAsset
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClipFromPlayableAsset(UnityEngine::Playables::IPlayableAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateClipFromPlayableAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClipFromPlayableAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateClipFromAsset
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateClipFromAsset(UnityEngine::ScriptableObject* playableAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateClipFromAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClipFromAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playableAsset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, playableAsset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetMarkersRaw
System::Collections::Generic::IEnumerable_1<UnityEngine::ScriptableObject*>* UnityEngine::Timeline::TrackAsset::GetMarkersRaw() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetMarkersRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMarkersRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::ScriptableObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ClearMarkers
void UnityEngine::Timeline::TrackAsset::ClearMarkers() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::ClearMarkers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMarkers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.AddMarker
void UnityEngine::Timeline::TrackAsset::AddMarker(UnityEngine::ScriptableObject* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::AddMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.DeleteMarkerRaw
bool UnityEngine::Timeline::TrackAsset::DeleteMarkerRaw(UnityEngine::ScriptableObject* marker) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::DeleteMarkerRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteMarkerRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(marker)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, marker);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetTimeRangeHash
int UnityEngine::Timeline::TrackAsset::GetTimeRangeHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetTimeRangeHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeRangeHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.AddClip
void UnityEngine::Timeline::TrackAsset::AddClip(UnityEngine::Timeline::TimelineClip* newClip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::AddClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newClip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newClip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateNotificationsPlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreateNotificationsPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable mixerPlayable, UnityEngine::GameObject* go, UnityEngine::Playables::Playable timelinePlayable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateNotificationsPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNotificationsPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(mixerPlayable), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(timelinePlayable)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, mixerPlayable, go, timelinePlayable);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreatePlayableGraph
UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreatePlayableGraph(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Playables::Playable timelinePlayable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreatePlayableGraph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayableGraph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(timelinePlayable)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree, timelinePlayable);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CompileClips
UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CompileClips(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, System::Collections::Generic::IList_1<UnityEngine::Timeline::TimelineClip*>* timelineClips, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CompileClips");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(timelineClips), ::il2cpp_utils::ExtractType(tree)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, timelineClips, tree);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GatherCompilableTracks
void UnityEngine::Timeline::TrackAsset::GatherCompilableTracks(System::Collections::Generic::IList_1<UnityEngine::Timeline::TrackAsset*>* tracks) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GatherCompilableTracks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherCompilableTracks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tracks)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tracks);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GatherNotifications
void UnityEngine::Timeline::TrackAsset::GatherNotifications(System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>* markers) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GatherNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(markers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, markers);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateMixerPlayableGraph
UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreateMixerPlayableGraph(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateMixerPlayableGraph");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMixerPlayableGraph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(tree)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ConfigureTrackAnimation
void UnityEngine::Timeline::TrackAsset::ConfigureTrackAnimation(UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::GameObject* go, UnityEngine::Playables::Playable blend) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::ConfigureTrackAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConfigureTrackAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(blend)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tree, go, blend);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.SortClips
void UnityEngine::Timeline::TrackAsset::SortClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::SortClips");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ClearClipsInternal
void UnityEngine::Timeline::TrackAsset::ClearClipsInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::ClearClipsInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearClipsInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ClearSubTracksInternal
void UnityEngine::Timeline::TrackAsset::ClearSubTracksInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::ClearSubTracksInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSubTracksInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnClipMove
void UnityEngine::Timeline::TrackAsset::OnClipMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::OnClipMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnClipMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreateNewClipContainerInternal
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::TrackAsset::CreateNewClipContainerInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateNewClipContainerInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNewClipContainerInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.AddChild
void UnityEngine::Timeline::TrackAsset::AddChild(UnityEngine::Timeline::TrackAsset* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::AddChild");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddChild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, child);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.MoveLastTrackBefore
void UnityEngine::Timeline::TrackAsset::MoveLastTrackBefore(UnityEngine::Timeline::TrackAsset* asset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::MoveLastTrackBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveLastTrackBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asset);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.RemoveSubTrack
bool UnityEngine::Timeline::TrackAsset::RemoveSubTrack(UnityEngine::Timeline::TrackAsset* child) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::RemoveSubTrack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSubTrack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, child);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.RemoveClip
void UnityEngine::Timeline::TrackAsset::RemoveClip(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::RemoveClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetEvaluationTime
void UnityEngine::Timeline::TrackAsset::GetEvaluationTime(double& outStart, double& outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetEvaluationTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEvaluationTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outStart, outDuration);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetSequenceTime
void UnityEngine::Timeline::TrackAsset::GetSequenceTime(double& outStart, double& outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetSequenceTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSequenceTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outStart, outDuration);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GatherProperties
void UnityEngine::Timeline::TrackAsset::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(driver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetGameObjectBinding
UnityEngine::GameObject* UnityEngine::Timeline::TrackAsset::GetGameObjectBinding(UnityEngine::Playables::PlayableDirector* director) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetGameObjectBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameObjectBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, director);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.ValidateClipType
bool UnityEngine::Timeline::TrackAsset::ValidateClipType(System::Type* clipType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::ValidateClipType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateClipType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, clipType);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.OnCreateClip
void UnityEngine::Timeline::TrackAsset::OnCreateClip(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::OnCreateClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnCreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UpdateDuration
void UnityEngine::Timeline::TrackAsset::UpdateDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UpdateDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CalculateItemsHash
int UnityEngine::Timeline::TrackAsset::CalculateItemsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CalculateItemsHash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateItemsHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* gameObject, UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, gameObject, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.Invalidate
void UnityEngine::Timeline::TrackAsset::Invalidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Invalidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invalidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetNotificationDuration
double UnityEngine::Timeline::TrackAsset::GetNotificationDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetNotificationDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNotificationDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCompileClips
bool UnityEngine::Timeline::TrackAsset::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CanCompileClips");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCompileClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCreateTrackMixer
bool UnityEngine::Timeline::TrackAsset::CanCreateTrackMixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CanCreateTrackMixer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCreateTrackMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.IsCompilable
bool UnityEngine::Timeline::TrackAsset::IsCompilable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::IsCompilable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsCompilable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.UpdateChildTrackCache
void UnityEngine::Timeline::TrackAsset::UpdateChildTrackCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::UpdateChildTrackCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateChildTrackCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.Hash
int UnityEngine::Timeline::TrackAsset::Hash() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Hash");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetClipsHash
int UnityEngine::Timeline::TrackAsset::GetClipsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetClipsHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClipsHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.GetAnimationClipHash
int UnityEngine::Timeline::TrackAsset::GetAnimationClipHash(UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::GetAnimationClipHash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", "GetAnimationClipHash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.HasNotifications
bool UnityEngine::Timeline::TrackAsset::HasNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::HasNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCompileNotifications
bool UnityEngine::Timeline::TrackAsset::CanCompileNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CanCompileNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCompileNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CanCreateMixerRecursive
bool UnityEngine::Timeline::TrackAsset::CanCreateMixerRecursive() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CanCreateMixerRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCreateMixerRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_duration
double UnityEngine::Timeline::TrackAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TrackAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::TrackAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset..cctor
void UnityEngine::Timeline::TrackAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TrackAsset::OnBeforeTrackSerialize
// Il2CppName: OnBeforeTrackSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::OnBeforeTrackSerialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "OnBeforeTrackSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::OnAfterTrackDeserialize
// Il2CppName: OnAfterTrackDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::OnAfterTrackDeserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "OnAfterTrackDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::OnUpgradeFromVersion
// Il2CppName: OnUpgradeFromVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(int)>(&TrackAsset::OnUpgradeFromVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "OnUpgradeFromVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::UpgradeToLatestVersion
// Il2CppName: UpgradeToLatestVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::UpgradeToLatestVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UpgradeToLatestVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::add_OnClipPlayableCreate
// Il2CppName: add_OnClipPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*)>(&TrackAsset::add_OnClipPlayableCreate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "add_OnClipPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::remove_OnClipPlayableCreate
// Il2CppName: remove_OnClipPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*)>(&TrackAsset::remove_OnClipPlayableCreate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "remove_OnClipPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::add_OnTrackAnimationPlayableCreate
// Il2CppName: add_OnTrackAnimationPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*)>(&TrackAsset::add_OnTrackAnimationPlayableCreate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "add_OnTrackAnimationPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::remove_OnTrackAnimationPlayableCreate
// Il2CppName: remove_OnTrackAnimationPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*)>(&TrackAsset::remove_OnTrackAnimationPlayableCreate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "remove_OnTrackAnimationPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TrackAsset::*)()>(&TrackAsset::get_start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_end
// Il2CppName: get_end
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TrackAsset::*)()>(&TrackAsset::get_end)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_muted
// Il2CppName: get_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_muted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::set_muted
// Il2CppName: set_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(bool)>(&TrackAsset::set_muted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "set_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_mutedInHierarchy
// Il2CppName: get_mutedInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_mutedInHierarchy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_mutedInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_timelineAsset
// Il2CppName: get_timelineAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineAsset* (TrackAsset::*)()>(&TrackAsset::get_timelineAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_timelineAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableAsset* (TrackAsset::*)()>(&TrackAsset::get_parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::set_parent
// Il2CppName: set_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Playables::PlayableAsset*)>(&TrackAsset::set_parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "set_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableAsset*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetClips
// Il2CppName: GetClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TimelineClip*>* (TrackAsset::*)()>(&TrackAsset::GetClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_clips
// Il2CppName: get_clips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Timeline::TimelineClip*>* (TrackAsset::*)()>(&TrackAsset::get_clips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_clips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_isEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_hasClips
// Il2CppName: get_hasClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_hasClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_hasClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_hasCurves
// Il2CppName: get_hasCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_hasCurves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_hasCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_isSubTrack
// Il2CppName: get_isSubTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_isSubTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_isSubTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetChildTracks
// Il2CppName: GetChildTracks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* (TrackAsset::*)()>(&TrackAsset::GetChildTracks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetChildTracks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_customPlayableTypename
// Il2CppName: get_customPlayableTypename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TrackAsset::*)()>(&TrackAsset::get_customPlayableTypename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_customPlayableTypename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::set_customPlayableTypename
// Il2CppName: set_customPlayableTypename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(::Il2CppString*)>(&TrackAsset::set_customPlayableTypename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "set_customPlayableTypename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_curves
// Il2CppName: get_curves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (TrackAsset::*)()>(&TrackAsset::get_curves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::set_curves
// Il2CppName: set_curves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::AnimationClip*)>(&TrackAsset::set_curves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "set_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TrackAsset::*)()>(&TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_asset
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TrackAsset::*)()>(&TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UnityEngine.Timeline.ICurvesOwner.get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_assetOwner
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_assetOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TrackAsset::*)()>(&TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_assetOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UnityEngine.Timeline.ICurvesOwner.get_assetOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_targetTrack
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_targetTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TrackAsset::*)()>(&TrackAsset::UnityEngine_Timeline_ICurvesOwner_get_targetTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UnityEngine.Timeline.ICurvesOwner.get_targetTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_subTracksObjects
// Il2CppName: get_subTracksObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* (TrackAsset::*)()>(&TrackAsset::get_subTracksObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_subTracksObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_locked
// Il2CppName: get_locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_locked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::set_locked
// Il2CppName: set_locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(bool)>(&TrackAsset::set_locked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "set_locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_lockedInHierarchy
// Il2CppName: get_lockedInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_lockedInHierarchy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_lockedInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_supportsNotifications
// Il2CppName: get_supportsNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::get_supportsNotifications)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_supportsNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::__internalAwake
// Il2CppName: __internalAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::__internalAwake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "__internalAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateCurves
// Il2CppName: CreateCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(::Il2CppString*)>(&TrackAsset::CreateCurves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateTrackMixer
// Il2CppName: CreateTrackMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TrackAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, int)>(&TrackAsset::CreateTrackMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateTrackMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateDefaultClip
// Il2CppName: CreateDefaultClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (TrackAsset::*)()>(&TrackAsset::CreateDefaultClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateDefaultClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateClip
// Il2CppName: CreateClip
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TrackAsset::DeleteClip
// Il2CppName: DeleteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)(UnityEngine::Timeline::TimelineClip*)>(&TrackAsset::DeleteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "DeleteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateMarker
// Il2CppName: CreateMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::IMarker* (TrackAsset::*)(System::Type*, double)>(&TrackAsset::CreateMarker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateMarker
// Il2CppName: CreateMarker
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TrackAsset::DeleteMarker
// Il2CppName: DeleteMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)(UnityEngine::Timeline::IMarker*)>(&TrackAsset::DeleteMarker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "DeleteMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IMarker*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetMarkers
// Il2CppName: GetMarkers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::IMarker*>* (TrackAsset::*)()>(&TrackAsset::GetMarkers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetMarkers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetMarkerCount
// Il2CppName: GetMarkerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrackAsset::*)()>(&TrackAsset::GetMarkerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetMarkerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetMarker
// Il2CppName: GetMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::IMarker* (TrackAsset::*)(int)>(&TrackAsset::GetMarker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateClip
// Il2CppName: CreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (TrackAsset::*)(System::Type*)>(&TrackAsset::CreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateAndAddNewClipOfType
// Il2CppName: CreateAndAddNewClipOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (TrackAsset::*)(System::Type*)>(&TrackAsset::CreateAndAddNewClipOfType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateAndAddNewClipOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateClipOfType
// Il2CppName: CreateClipOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (TrackAsset::*)(System::Type*)>(&TrackAsset::CreateClipOfType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateClipOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateClipFromPlayableAsset
// Il2CppName: CreateClipFromPlayableAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (TrackAsset::*)(UnityEngine::Playables::IPlayableAsset*)>(&TrackAsset::CreateClipFromPlayableAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateClipFromPlayableAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::IPlayableAsset*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateClipFromAsset
// Il2CppName: CreateClipFromAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (TrackAsset::*)(UnityEngine::ScriptableObject*)>(&TrackAsset::CreateClipFromAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateClipFromAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ScriptableObject*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetMarkersRaw
// Il2CppName: GetMarkersRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::ScriptableObject*>* (TrackAsset::*)()>(&TrackAsset::GetMarkersRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetMarkersRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::ClearMarkers
// Il2CppName: ClearMarkers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::ClearMarkers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "ClearMarkers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::AddMarker
// Il2CppName: AddMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::ScriptableObject*)>(&TrackAsset::AddMarker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "AddMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ScriptableObject*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::DeleteMarkerRaw
// Il2CppName: DeleteMarkerRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)(UnityEngine::ScriptableObject*)>(&TrackAsset::DeleteMarkerRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "DeleteMarkerRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ScriptableObject*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetTimeRangeHash
// Il2CppName: GetTimeRangeHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrackAsset::*)()>(&TrackAsset::GetTimeRangeHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetTimeRangeHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::AddClip
// Il2CppName: AddClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Timeline::TimelineClip*)>(&TrackAsset::AddClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "AddClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateNotificationsPlayable
// Il2CppName: CreateNotificationsPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TrackAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::Playable, UnityEngine::GameObject*, UnityEngine::Playables::Playable)>(&TrackAsset::CreateNotificationsPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateNotificationsPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreatePlayableGraph
// Il2CppName: CreatePlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TrackAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*, UnityEngine::Playables::Playable)>(&TrackAsset::CreatePlayableGraph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreatePlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CompileClips
// Il2CppName: CompileClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TrackAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, System::Collections::Generic::IList_1<UnityEngine::Timeline::TimelineClip*>*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*)>(&TrackAsset::CompileClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CompileClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<UnityEngine::Timeline::TimelineClip*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GatherCompilableTracks
// Il2CppName: GatherCompilableTracks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(System::Collections::Generic::IList_1<UnityEngine::Timeline::TrackAsset*>*)>(&TrackAsset::GatherCompilableTracks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GatherCompilableTracks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<UnityEngine::Timeline::TrackAsset*>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GatherNotifications
// Il2CppName: GatherNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>*)>(&TrackAsset::GatherNotifications)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GatherNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateMixerPlayableGraph
// Il2CppName: CreateMixerPlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TrackAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*)>(&TrackAsset::CreateMixerPlayableGraph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateMixerPlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::ConfigureTrackAnimation
// Il2CppName: ConfigureTrackAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*, UnityEngine::GameObject*, UnityEngine::Playables::Playable)>(&TrackAsset::ConfigureTrackAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "ConfigureTrackAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::SortClips
// Il2CppName: SortClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::SortClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "SortClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::ClearClipsInternal
// Il2CppName: ClearClipsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::ClearClipsInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "ClearClipsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::ClearSubTracksInternal
// Il2CppName: ClearSubTracksInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::ClearSubTracksInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "ClearSubTracksInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::OnClipMove
// Il2CppName: OnClipMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::OnClipMove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "OnClipMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreateNewClipContainerInternal
// Il2CppName: CreateNewClipContainerInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (TrackAsset::*)()>(&TrackAsset::CreateNewClipContainerInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreateNewClipContainerInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::AddChild
// Il2CppName: AddChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TrackAsset::AddChild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "AddChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::MoveLastTrackBefore
// Il2CppName: MoveLastTrackBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TrackAsset::MoveLastTrackBefore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "MoveLastTrackBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::RemoveSubTrack
// Il2CppName: RemoveSubTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)(UnityEngine::Timeline::TrackAsset*)>(&TrackAsset::RemoveSubTrack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "RemoveSubTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::RemoveClip
// Il2CppName: RemoveClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Timeline::TimelineClip*)>(&TrackAsset::RemoveClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "RemoveClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetEvaluationTime
// Il2CppName: GetEvaluationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(double&, double&)>(&TrackAsset::GetEvaluationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetEvaluationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetSequenceTime
// Il2CppName: GetSequenceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(double&, double&)>(&TrackAsset::GetSequenceTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetSequenceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Playables::PlayableDirector*, UnityEngine::Timeline::IPropertyCollector*)>(&TrackAsset::GatherProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetGameObjectBinding
// Il2CppName: GetGameObjectBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (TrackAsset::*)(UnityEngine::Playables::PlayableDirector*)>(&TrackAsset::GetGameObjectBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetGameObjectBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::ValidateClipType
// Il2CppName: ValidateClipType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)(System::Type*)>(&TrackAsset::ValidateClipType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "ValidateClipType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::OnCreateClip
// Il2CppName: OnCreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)(UnityEngine::Timeline::TimelineClip*)>(&TrackAsset::OnCreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "OnCreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::UpdateDuration
// Il2CppName: UpdateDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::UpdateDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UpdateDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CalculateItemsHash
// Il2CppName: CalculateItemsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrackAsset::*)()>(&TrackAsset::CalculateItemsHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CalculateItemsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TrackAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, UnityEngine::Timeline::TimelineClip*)>(&TrackAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::Invalidate
// Il2CppName: Invalidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::Invalidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "Invalidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetNotificationDuration
// Il2CppName: GetNotificationDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TrackAsset::*)()>(&TrackAsset::GetNotificationDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetNotificationDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CanCompileClips
// Il2CppName: CanCompileClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::CanCompileClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CanCompileClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CanCreateTrackMixer
// Il2CppName: CanCreateTrackMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::CanCreateTrackMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CanCreateTrackMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::IsCompilable
// Il2CppName: IsCompilable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::IsCompilable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "IsCompilable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::UpdateChildTrackCache
// Il2CppName: UpdateChildTrackCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::UpdateChildTrackCache)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "UpdateChildTrackCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrackAsset::*)()>(&TrackAsset::Hash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetClipsHash
// Il2CppName: GetClipsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrackAsset::*)()>(&TrackAsset::GetClipsHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetClipsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::GetAnimationClipHash
// Il2CppName: GetAnimationClipHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::AnimationClip*)>(&TrackAsset::GetAnimationClipHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "GetAnimationClipHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::HasNotifications
// Il2CppName: HasNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::HasNotifications)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "HasNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CanCompileNotifications
// Il2CppName: CanCompileNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::CanCompileNotifications)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CanCompileNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CanCreateMixerRecursive
// Il2CppName: CanCreateMixerRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::*)()>(&TrackAsset::CanCreateMixerRecursive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CanCreateMixerRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TrackAsset::*)()>(&TrackAsset::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (TrackAsset::*)()>(&TrackAsset::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (TrackAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&TrackAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::*)()>(&TrackAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TrackAsset::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAsset/Versions
#include "UnityEngine/Timeline/TrackAsset_Versions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions Initial
UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_Initial() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_get_Initial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "Initial"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions Initial
void UnityEngine::Timeline::TrackAsset::Versions::_set_Initial(UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_set_Initial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "Initial", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions RotationAsEuler
UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_RotationAsEuler() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_get_RotationAsEuler");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "RotationAsEuler"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions RotationAsEuler
void UnityEngine::Timeline::TrackAsset::Versions::_set_RotationAsEuler(UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_set_RotationAsEuler");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "RotationAsEuler", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions RootMotionUpgrade
UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_RootMotionUpgrade() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_get_RootMotionUpgrade");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "RootMotionUpgrade"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions RootMotionUpgrade
void UnityEngine::Timeline::TrackAsset::Versions::_set_RootMotionUpgrade(UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_set_RootMotionUpgrade");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "RootMotionUpgrade", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.TrackAsset/Versions AnimatedTrackProperties
UnityEngine::Timeline::TrackAsset::Versions UnityEngine::Timeline::TrackAsset::Versions::_get_AnimatedTrackProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_get_AnimatedTrackProperties");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackAsset::Versions>("UnityEngine.Timeline", "TrackAsset/Versions", "AnimatedTrackProperties"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.TrackAsset/Versions AnimatedTrackProperties
void UnityEngine::Timeline::TrackAsset::Versions::_set_AnimatedTrackProperties(UnityEngine::Timeline::TrackAsset::Versions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::Versions::_set_AnimatedTrackProperties");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/Versions", "AnimatedTrackProperties", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAsset/TransientBuildData
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TrackAsset/TransientBuildData.Create
UnityEngine::Timeline::TrackAsset::TransientBuildData UnityEngine::Timeline::TrackAsset::TransientBuildData::Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::TransientBuildData::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset/TransientBuildData", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset::TransientBuildData, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/TransientBuildData.Clear
void UnityEngine::Timeline::TrackAsset::TransientBuildData::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::TransientBuildData::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: TrackAsset::TransientBuildData::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset::TransientBuildData (*)()>(&TrackAsset::TransientBuildData::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::TransientBuildData), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::TransientBuildData::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::TransientBuildData::*)()>(&TrackAsset::TransientBuildData::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::TransientBuildData), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65
#include "UnityEngine/Timeline/TrackAsset_-get_outputs-d__65.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.IDisposable.Dispose
void UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.MoveNext
bool UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<get_outputs>d__65.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$get_outputs$d__65::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::$get_outputs$d__65::*)(int)>(&TrackAsset::$get_outputs$d__65::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::$get_outputs$d__65::*)(int)>(&TrackAsset::$get_outputs$d__65::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::$get_outputs$d__65::*)()>(&TrackAsset::$get_outputs$d__65::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackAsset::$get_outputs$d__65::*)()>(&TrackAsset::$get_outputs$d__65::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (TrackAsset::$get_outputs$d__65::*)()>(&TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::$get_outputs$d__65::*)()>(&TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TrackAsset::$get_outputs$d__65::*)()>(&TrackAsset::$get_outputs$d__65::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* (TrackAsset::$get_outputs$d__65::*)()>(&TrackAsset::$get_outputs$d__65::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::$get_outputs$d__65::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TrackAsset::$get_outputs$d__65::*)()>(&TrackAsset::$get_outputs$d__65::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$get_outputs$d__65*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackAsset/<>c
#include "UnityEngine/Timeline/TrackAsset_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Timeline.TrackAsset/<>c <>9
UnityEngine::Timeline::TrackAsset::$$c* UnityEngine::Timeline::TrackAsset::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<UnityEngine::Timeline::TrackAsset::$$c*>("UnityEngine.Timeline", "TrackAsset/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Timeline.TrackAsset/<>c <>9
void UnityEngine::Timeline::TrackAsset::$$c::_set_$$9(UnityEngine::Timeline::TrackAsset::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<UnityEngine.Timeline.TimelineClip> <>9__121_0
System::Comparison_1<UnityEngine::Timeline::TimelineClip*>* UnityEngine::Timeline::TrackAsset::$$c::_get_$$9__121_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$$c::_get_$$9__121_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Comparison_1<UnityEngine::Timeline::TimelineClip*>*>("UnityEngine.Timeline", "TrackAsset/<>c", "<>9__121_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<UnityEngine.Timeline.TimelineClip> <>9__121_0
void UnityEngine::Timeline::TrackAsset::$$c::_set_$$9__121_0(System::Comparison_1<UnityEngine::Timeline::TimelineClip*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$$c::_set_$$9__121_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "TrackAsset/<>c", "<>9__121_0", value)));
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<>c..cctor
void UnityEngine::Timeline::TrackAsset::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TrackAsset/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.TrackAsset/<>c.<SortClips>b__121_0
int UnityEngine::Timeline::TrackAsset::$$c::$SortClips$b__121_0(UnityEngine::Timeline::TimelineClip* clip1, UnityEngine::Timeline::TimelineClip* clip2) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::$$c::<SortClips>b__121_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortClips>b__121_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip1), ::il2cpp_utils::ExtractType(clip2)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, clip1, clip2);
}
// Writing MetadataGetter for method: TrackAsset::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TrackAsset::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackAsset::$$c::$SortClips$b__121_0
// Il2CppName: <SortClips>b__121_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrackAsset::$$c::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::Timeline::TimelineClip*)>(&TrackAsset::$$c::$SortClips$b__121_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$$c*), "<SortClips>b__121_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TrackAsset::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::$$c::*)()>(&TrackAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackAsset::$$c::*)()>(&TrackAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineHelpURLAttribute
#include "UnityEngine/Timeline/TimelineHelpURLAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TimelineHelpURLAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineHelpURLAttribute::*)(System::Type*)>(&TimelineHelpURLAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineHelpURLAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineHelpURLAttribute::*)(System::Type*)>(&TimelineHelpURLAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineHelpURLAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TrackColorAttribute
#include "UnityEngine/Timeline/TrackColorAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TrackColorAttribute.get_color
UnityEngine::Color UnityEngine::Timeline::TrackColorAttribute::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackColorAttribute::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TrackColorAttribute::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (TrackColorAttribute::*)()>(&TrackColorAttribute::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackColorAttribute*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackColorAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackColorAttribute::*)(float, float, float)>(&TrackColorAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackColorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackColorAttribute::*)(float, float, float)>(&TrackColorAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackColorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioClipProperties
#include "UnityEngine/Timeline/AudioClipProperties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AudioClipProperties::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipProperties::*)()>(&AudioClipProperties::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipProperties*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipProperties::*)()>(&AudioClipProperties::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipProperties*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioMixerProperties
#include "UnityEngine/Timeline/AudioMixerProperties.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AudioMixerProperties.PrepareFrame
void UnityEngine::Timeline::AudioMixerProperties::PrepareFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioMixerProperties::PrepareFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PrepareFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Writing MetadataGetter for method: AudioMixerProperties::PrepareFrame
// Il2CppName: PrepareFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioMixerProperties::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData)>(&AudioMixerProperties::PrepareFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerProperties*), "PrepareFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: AudioMixerProperties::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioMixerProperties::*)()>(&AudioMixerProperties::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerProperties*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioMixerProperties::*)()>(&AudioMixerProperties::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioMixerProperties*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioPlayableAsset
#include "UnityEngine/Timeline/AudioPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16
#include "UnityEngine/Timeline/AudioPlayableAsset_-get_outputs-d__16.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Timeline.AudioClipProperties
#include "UnityEngine/Timeline/AudioClipProperties.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_bufferingTime
float UnityEngine::Timeline::AudioPlayableAsset::get_bufferingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::get_bufferingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bufferingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.set_bufferingTime
void UnityEngine::Timeline::AudioPlayableAsset::set_bufferingTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::set_bufferingTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bufferingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_clip
UnityEngine::AudioClip* UnityEngine::Timeline::AudioPlayableAsset::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.set_clip
void UnityEngine::Timeline::AudioPlayableAsset::set_clip(UnityEngine::AudioClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::set_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_loop
bool UnityEngine::Timeline::AudioPlayableAsset::get_loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::get_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.set_loop
void UnityEngine::Timeline::AudioPlayableAsset::set_loop(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::set_loop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_loop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::AudioPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_duration
double UnityEngine::Timeline::AudioPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioPlayableAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AudioPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Writing MetadataGetter for method: AudioPlayableAsset::get_bufferingTime
// Il2CppName: get_bufferingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioPlayableAsset::*)()>(&AudioPlayableAsset::get_bufferingTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "get_bufferingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::set_bufferingTime
// Il2CppName: set_bufferingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::*)(float)>(&AudioPlayableAsset::set_bufferingTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "set_bufferingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (AudioPlayableAsset::*)()>(&AudioPlayableAsset::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::set_clip
// Il2CppName: set_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::*)(UnityEngine::AudioClip*)>(&AudioPlayableAsset::set_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "set_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::get_loop
// Il2CppName: get_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioPlayableAsset::*)()>(&AudioPlayableAsset::get_loop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "get_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::set_loop
// Il2CppName: set_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::*)(bool)>(&AudioPlayableAsset::set_loop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "set_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (AudioPlayableAsset::*)()>(&AudioPlayableAsset::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (AudioPlayableAsset::*)()>(&AudioPlayableAsset::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (AudioPlayableAsset::*)()>(&AudioPlayableAsset::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AudioPlayableAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&AudioPlayableAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::*)()>(&AudioPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::*)()>(&AudioPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16
#include "UnityEngine/Timeline/AudioPlayableAsset_-get_outputs-d__16.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.IDisposable.Dispose
void UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.MoveNext
bool UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioPlayableAsset/<get_outputs>d__16.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioPlayableAsset::$get_outputs$d__16::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::$get_outputs$d__16::*)(int)>(&AudioPlayableAsset::$get_outputs$d__16::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::$get_outputs$d__16::*)(int)>(&AudioPlayableAsset::$get_outputs$d__16::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::$get_outputs$d__16::*)()>(&AudioPlayableAsset::$get_outputs$d__16::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioPlayableAsset::$get_outputs$d__16::*)()>(&AudioPlayableAsset::$get_outputs$d__16::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (AudioPlayableAsset::$get_outputs$d__16::*)()>(&AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayableAsset::$get_outputs$d__16::*)()>(&AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AudioPlayableAsset::$get_outputs$d__16::*)()>(&AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* (AudioPlayableAsset::$get_outputs$d__16::*)()>(&AudioPlayableAsset::$get_outputs$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AudioPlayableAsset::$get_outputs$d__16::*)()>(&AudioPlayableAsset::$get_outputs$d__16::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayableAsset::$get_outputs$d__16*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AudioTrack
#include "UnityEngine/Timeline/AudioTrack.hpp"
// Including type: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4
#include "UnityEngine/Timeline/AudioTrack_-get_outputs-d__4.hpp"
// Including type: UnityEngine.Timeline.AudioMixerProperties
#include "UnityEngine/Timeline/AudioMixerProperties.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: UnityEngine.Timeline.IntervalTree`1
#include "UnityEngine/Timeline/IntervalTree_1.hpp"
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AudioTrack.CreateClip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AudioTrack::CreateClip(UnityEngine::AudioClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::CreateClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack.OnValidate
void UnityEngine::Timeline::AudioTrack::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack.CompileClips
UnityEngine::Playables::Playable UnityEngine::Timeline::AudioTrack::CompileClips(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, System::Collections::Generic::IList_1<UnityEngine::Timeline::TimelineClip*>* timelineClips, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::CompileClips");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompileClips", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go), ::il2cpp_utils::ExtractType(timelineClips), ::il2cpp_utils::ExtractType(tree)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, timelineClips, tree);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioTrack::CreateClip
// Il2CppName: CreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (AudioTrack::*)(UnityEngine::AudioClip*)>(&AudioTrack::CreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack*), "CreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: AudioTrack::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTrack::*)()>(&AudioTrack::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::CompileClips
// Il2CppName: CompileClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AudioTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, System::Collections::Generic::IList_1<UnityEngine::Timeline::TimelineClip*>*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*)>(&AudioTrack::CompileClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack*), "CompileClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<UnityEngine::Timeline::TimelineClip*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>()});
  }
};
// Writing MetadataGetter for method: AudioTrack::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (AudioTrack::*)()>(&AudioTrack::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTrack::*)()>(&AudioTrack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTrack::*)()>(&AudioTrack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4
#include "UnityEngine/Timeline/AudioTrack_-get_outputs-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.IDisposable.Dispose
void UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.MoveNext
bool UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
UnityEngine::Playables::PlayableBinding UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableBinding, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AudioTrack/<get_outputs>d__4.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AudioTrack::$get_outputs$d__4::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTrack::$get_outputs$d__4::*)(int)>(&AudioTrack::$get_outputs$d__4::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTrack::$get_outputs$d__4::*)(int)>(&AudioTrack::$get_outputs$d__4::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTrack::$get_outputs$d__4::*)()>(&AudioTrack::$get_outputs$d__4::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioTrack::$get_outputs$d__4::*)()>(&AudioTrack::$get_outputs$d__4::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableBinding (AudioTrack::$get_outputs$d__4::*)()>(&AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerator$UnityEngine_Playables_PlayableBinding$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), "System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTrack::$get_outputs$d__4::*)()>(&AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AudioTrack::$get_outputs$d__4::*)()>(&AudioTrack::$get_outputs$d__4::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Playables::PlayableBinding>* (AudioTrack::$get_outputs$d__4::*)()>(&AudioTrack::$get_outputs$d__4::System_Collections_Generic_IEnumerable$UnityEngine_Playables_PlayableBinding$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), "System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTrack::$get_outputs$d__4::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AudioTrack::$get_outputs$d__4::*)()>(&AudioTrack::$get_outputs$d__4::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTrack::$get_outputs$d__4*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps None
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps None
void UnityEngine::Timeline::ClipCaps::_set_None(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps Looping
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_Looping() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_Looping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "Looping"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps Looping
void UnityEngine::Timeline::ClipCaps::_set_Looping(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_Looping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "Looping", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps Extrapolation
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_Extrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_Extrapolation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "Extrapolation"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps Extrapolation
void UnityEngine::Timeline::ClipCaps::_set_Extrapolation(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_Extrapolation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "Extrapolation", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps ClipIn
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_ClipIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_ClipIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "ClipIn"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps ClipIn
void UnityEngine::Timeline::ClipCaps::_set_ClipIn(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_ClipIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "ClipIn", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps SpeedMultiplier
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_SpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_SpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "SpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps SpeedMultiplier
void UnityEngine::Timeline::ClipCaps::_set_SpeedMultiplier(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_SpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "SpeedMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps Blending
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_Blending() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_Blending");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "Blending"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps Blending
void UnityEngine::Timeline::ClipCaps::_set_Blending(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_Blending");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "Blending", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps AutoScale
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_AutoScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_AutoScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "AutoScale"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps AutoScale
void UnityEngine::Timeline::ClipCaps::_set_AutoScale(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_AutoScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "AutoScale", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.Timeline.ClipCaps All
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ClipCaps::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::ClipCaps>("UnityEngine.Timeline", "ClipCaps", "All"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.Timeline.ClipCaps All
void UnityEngine::Timeline::ClipCaps::_set_All(UnityEngine::Timeline::ClipCaps value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ClipCaps::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ClipCaps", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClipCapsExtensions
#include "UnityEngine/Timeline/TimelineClipCapsExtensions.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsLooping
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsLooping(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsLooping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsLooping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsExtrapolation
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsExtrapolation(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsExtrapolation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsExtrapolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsClipIn
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsClipIn(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsClipIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsClipIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsSpeedMultiplier
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsSpeedMultiplier(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsSpeedMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsSpeedMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsBlending
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsBlending(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsBlending");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsBlending", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.HasAll
bool UnityEngine::Timeline::TimelineClipCapsExtensions::HasAll(UnityEngine::Timeline::ClipCaps caps, UnityEngine::Timeline::ClipCaps flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClipCapsExtensions::HasAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "HasAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(caps), ::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, caps, flags);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.HasAny
bool UnityEngine::Timeline::TimelineClipCapsExtensions::HasAny(UnityEngine::Timeline::ClipCaps caps, UnityEngine::Timeline::ClipCaps flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClipCapsExtensions::HasAny");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "HasAny", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(caps), ::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, caps, flags);
}
// Writing MetadataGetter for method: TimelineClipCapsExtensions::SupportsLooping
// Il2CppName: SupportsLooping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineClipCapsExtensions::SupportsLooping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClipCapsExtensions*), "SupportsLooping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineClipCapsExtensions::SupportsExtrapolation
// Il2CppName: SupportsExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineClipCapsExtensions::SupportsExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClipCapsExtensions*), "SupportsExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineClipCapsExtensions::SupportsClipIn
// Il2CppName: SupportsClipIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineClipCapsExtensions::SupportsClipIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClipCapsExtensions*), "SupportsClipIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineClipCapsExtensions::SupportsSpeedMultiplier
// Il2CppName: SupportsSpeedMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineClipCapsExtensions::SupportsSpeedMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClipCapsExtensions*), "SupportsSpeedMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineClipCapsExtensions::SupportsBlending
// Il2CppName: SupportsBlending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::TimelineClip*)>(&TimelineClipCapsExtensions::SupportsBlending)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClipCapsExtensions*), "SupportsBlending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: TimelineClipCapsExtensions::HasAll
// Il2CppName: HasAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::ClipCaps, UnityEngine::Timeline::ClipCaps)>(&TimelineClipCapsExtensions::HasAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClipCapsExtensions*), "HasAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::ClipCaps>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::ClipCaps>()});
  }
};
// Writing MetadataGetter for method: TimelineClipCapsExtensions::HasAny
// Il2CppName: HasAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::ClipCaps, UnityEngine::Timeline::ClipCaps)>(&TimelineClipCapsExtensions::HasAny)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelineClipCapsExtensions*), "HasAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::ClipCaps>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::ClipCaps>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ControlPlayableAsset
#include "UnityEngine/Timeline/ControlPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39
#include "UnityEngine/Timeline/ControlPlayableAsset_-GetControlableScripts-d__39.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_MaxRandInt
int UnityEngine::Timeline::ControlPlayableAsset::_get_k_MaxRandInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_get_k_MaxRandInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "ControlPlayableAsset", "k_MaxRandInt"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_MaxRandInt
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_MaxRandInt(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_set_k_MaxRandInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_MaxRandInt", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Playables.PlayableDirector> k_EmptyDirectorsList
System::Collections::Generic::List_1<UnityEngine::Playables::PlayableDirector*>* UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyDirectorsList() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyDirectorsList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<UnityEngine::Playables::PlayableDirector*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyDirectorsList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Playables.PlayableDirector> k_EmptyDirectorsList
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyDirectorsList(System::Collections::Generic::List_1<UnityEngine::Playables::PlayableDirector*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyDirectorsList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyDirectorsList", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.ParticleSystem> k_EmptyParticlesList
System::Collections::Generic::List_1<UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyParticlesList() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyParticlesList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<UnityEngine::ParticleSystem*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyParticlesList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.ParticleSystem> k_EmptyParticlesList
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyParticlesList(System::Collections::Generic::List_1<UnityEngine::ParticleSystem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyParticlesList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyParticlesList", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.HashSet`1<UnityEngine.ParticleSystem> s_SubEmitterCollector
System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_SubEmitterCollector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_get_s_SubEmitterCollector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_SubEmitterCollector"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.HashSet`1<UnityEngine.ParticleSystem> s_SubEmitterCollector
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_SubEmitterCollector(System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_set_s_SubEmitterCollector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_SubEmitterCollector", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Playables.PlayableDirector> s_ProcessedDirectors
System::Collections::Generic::HashSet_1<UnityEngine::Playables::PlayableDirector*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_ProcessedDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_get_s_ProcessedDirectors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::HashSet_1<UnityEngine::Playables::PlayableDirector*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_ProcessedDirectors"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Playables.PlayableDirector> s_ProcessedDirectors
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_ProcessedDirectors(System::Collections::Generic::HashSet_1<UnityEngine::Playables::PlayableDirector*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_set_s_ProcessedDirectors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_ProcessedDirectors", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> s_CreatedPrefabs
System::Collections::Generic::HashSet_1<UnityEngine::GameObject*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_CreatedPrefabs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_get_s_CreatedPrefabs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::HashSet_1<UnityEngine::GameObject*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_CreatedPrefabs"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> s_CreatedPrefabs
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_CreatedPrefabs(System::Collections::Generic::HashSet_1<UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::_set_s_CreatedPrefabs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_CreatedPrefabs", value));
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_controllingDirectors
bool UnityEngine::Timeline::ControlPlayableAsset::get_controllingDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::get_controllingDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_controllingDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.set_controllingDirectors
void UnityEngine::Timeline::ControlPlayableAsset::set_controllingDirectors(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::set_controllingDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_controllingDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_controllingParticles
bool UnityEngine::Timeline::ControlPlayableAsset::get_controllingParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::get_controllingParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_controllingParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.set_controllingParticles
void UnityEngine::Timeline::ControlPlayableAsset::set_controllingParticles(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::set_controllingParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_controllingParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.OnEnable
void UnityEngine::Timeline::ControlPlayableAsset::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ControlPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.ConnectPlayablesToMixer
UnityEngine::Playables::Playable UnityEngine::Timeline::ControlPlayableAsset::ConnectPlayablesToMixer(UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* playables) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::ConnectPlayablesToMixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "ConnectPlayablesToMixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(playables)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, playables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CreateActivationPlayable
void UnityEngine::Timeline::ControlPlayableAsset::CreateActivationPlayable(UnityEngine::GameObject* root, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::CreateActivationPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateActivationPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectParticleSystem
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectParticleSystem(System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>* particleSystems, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectParticleSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SearchHierarchyAndConnectParticleSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(particleSystems), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, particleSystems, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectDirector
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectDirector(System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>* directors, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables, bool disableSelfReferences) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectDirector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SearchHierarchyAndConnectDirector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(directors), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables), ::il2cpp_utils::ExtractType(disableSelfReferences)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, directors, graph, outplayables, disableSelfReferences);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectControlableScripts
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectControlableScripts(System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>* controlableScripts, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectControlableScripts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "SearchHierarchyAndConnectControlableScripts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controlableScripts), ::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(outplayables)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controlableScripts, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.ConnectMixerAndPlayable
void UnityEngine::Timeline::ControlPlayableAsset::ConnectMixerAndPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable mixer, UnityEngine::Playables::Playable playable, int portIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::ConnectMixerAndPlayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "ConnectMixerAndPlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(mixer), ::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(portIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, mixer, playable, portIndex);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetControlableScripts
System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>* UnityEngine::Timeline::ControlPlayableAsset::GetControlableScripts(UnityEngine::GameObject* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::GetControlableScripts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "GetControlableScripts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, root);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.UpdateDurationAndLoopFlag
void UnityEngine::Timeline::ControlPlayableAsset::UpdateDurationAndLoopFlag(System::Collections::Generic::IList_1<UnityEngine::Playables::PlayableDirector*>* directors, System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>* particleSystems) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::UpdateDurationAndLoopFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDurationAndLoopFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(directors), ::il2cpp_utils::ExtractType(particleSystems)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, directors, particleSystems);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetControllableParticleSystems
System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems(UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllableParticleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>*, false>(this, ___internal__method, go);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetControllableParticleSystems
void UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems(UnityEngine::Transform* t, System::Collections::Generic::ICollection_1<UnityEngine::ParticleSystem*>* roots, System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>* subEmitters) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::GetControllableParticleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "GetControllableParticleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(roots), ::il2cpp_utils::ExtractType(subEmitters)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, roots, subEmitters);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CacheSubEmitters
void UnityEngine::Timeline::ControlPlayableAsset::CacheSubEmitters(UnityEngine::ParticleSystem* ps, System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>* subEmitters) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::CacheSubEmitters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "CacheSubEmitters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ps), ::il2cpp_utils::ExtractType(subEmitters)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ps, subEmitters);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GatherProperties
void UnityEngine::Timeline::ControlPlayableAsset::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::GatherProperties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(driver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewParticles
void UnityEngine::Timeline::ControlPlayableAsset::PreviewParticles(UnityEngine::Timeline::IPropertyCollector* driver, System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>* particles) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::PreviewParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(particles)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, particles);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewActivation
void UnityEngine::Timeline::ControlPlayableAsset::PreviewActivation(UnityEngine::Timeline::IPropertyCollector* driver, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* objects) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::PreviewActivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewActivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(objects)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, objects);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewTimeControl
void UnityEngine::Timeline::ControlPlayableAsset::PreviewTimeControl(UnityEngine::Timeline::IPropertyCollector* driver, UnityEngine::Playables::PlayableDirector* director, System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>* scripts) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::PreviewTimeControl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewTimeControl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(director), ::il2cpp_utils::ExtractType(scripts)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, director, scripts);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewDirectors
void UnityEngine::Timeline::ControlPlayableAsset::PreviewDirectors(UnityEngine::Timeline::IPropertyCollector* driver, System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>* directors) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::PreviewDirectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewDirectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(driver), ::il2cpp_utils::ExtractType(directors)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, directors);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_duration
double UnityEngine::Timeline::ControlPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::ControlPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset..cctor
void UnityEngine::Timeline::ControlPlayableAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ControlPlayableAsset::get_controllingDirectors
// Il2CppName: get_controllingDirectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ControlPlayableAsset::*)()>(&ControlPlayableAsset::get_controllingDirectors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "get_controllingDirectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::set_controllingDirectors
// Il2CppName: set_controllingDirectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)(bool)>(&ControlPlayableAsset::set_controllingDirectors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "set_controllingDirectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::get_controllingParticles
// Il2CppName: get_controllingParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ControlPlayableAsset::*)()>(&ControlPlayableAsset::get_controllingParticles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "get_controllingParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::set_controllingParticles
// Il2CppName: set_controllingParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)(bool)>(&ControlPlayableAsset::set_controllingParticles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "set_controllingParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)()>(&ControlPlayableAsset::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (ControlPlayableAsset::*)()>(&ControlPlayableAsset::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::ConnectPlayablesToMixer
// Il2CppName: ConnectPlayablesToMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (*)(UnityEngine::Playables::PlayableGraph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*)>(&ControlPlayableAsset::ConnectPlayablesToMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "ConnectPlayablesToMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::CreateActivationPlayable
// Il2CppName: CreateActivationPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)(UnityEngine::GameObject*, UnityEngine::Playables::PlayableGraph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*)>(&ControlPlayableAsset::CreateActivationPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "CreateActivationPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::SearchHierarchyAndConnectParticleSystem
// Il2CppName: SearchHierarchyAndConnectParticleSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)(System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>*, UnityEngine::Playables::PlayableGraph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*)>(&ControlPlayableAsset::SearchHierarchyAndConnectParticleSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "SearchHierarchyAndConnectParticleSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::SearchHierarchyAndConnectDirector
// Il2CppName: SearchHierarchyAndConnectDirector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)(System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>*, UnityEngine::Playables::PlayableGraph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*, bool)>(&ControlPlayableAsset::SearchHierarchyAndConnectDirector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "SearchHierarchyAndConnectDirector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::SearchHierarchyAndConnectControlableScripts
// Il2CppName: SearchHierarchyAndConnectControlableScripts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>*, UnityEngine::Playables::PlayableGraph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*)>(&ControlPlayableAsset::SearchHierarchyAndConnectControlableScripts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "SearchHierarchyAndConnectControlableScripts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Playables::Playable>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::ConnectMixerAndPlayable
// Il2CppName: ConnectMixerAndPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::Playable, UnityEngine::Playables::Playable, int)>(&ControlPlayableAsset::ConnectMixerAndPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "ConnectMixerAndPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::GetComponent
// Il2CppName: GetComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ControlPlayableAsset::GetControlableScripts
// Il2CppName: GetControlableScripts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>* (*)(UnityEngine::GameObject*)>(&ControlPlayableAsset::GetControlableScripts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "GetControlableScripts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::UpdateDurationAndLoopFlag
// Il2CppName: UpdateDurationAndLoopFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)(System::Collections::Generic::IList_1<UnityEngine::Playables::PlayableDirector*>*, System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>*)>(&ControlPlayableAsset::UpdateDurationAndLoopFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "UpdateDurationAndLoopFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<UnityEngine::Playables::PlayableDirector*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::GetControllableParticleSystems
// Il2CppName: GetControllableParticleSystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>* (ControlPlayableAsset::*)(UnityEngine::GameObject*)>(&ControlPlayableAsset::GetControllableParticleSystems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "GetControllableParticleSystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::GetControllableParticleSystems
// Il2CppName: GetControllableParticleSystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Transform*, System::Collections::Generic::ICollection_1<UnityEngine::ParticleSystem*>*, System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>*)>(&ControlPlayableAsset::GetControllableParticleSystems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "GetControllableParticleSystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::ICollection_1<UnityEngine::ParticleSystem*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::CacheSubEmitters
// Il2CppName: CacheSubEmitters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::ParticleSystem*, System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>*)>(&ControlPlayableAsset::CacheSubEmitters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "CacheSubEmitters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ParticleSystem*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<UnityEngine::ParticleSystem*>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)(UnityEngine::Playables::PlayableDirector*, UnityEngine::Timeline::IPropertyCollector*)>(&ControlPlayableAsset::GatherProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::PreviewParticles
// Il2CppName: PreviewParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::IPropertyCollector*, System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>*)>(&ControlPlayableAsset::PreviewParticles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "PreviewParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::PreviewActivation
// Il2CppName: PreviewActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::IPropertyCollector*, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*)>(&ControlPlayableAsset::PreviewActivation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "PreviewActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::PreviewTimeControl
// Il2CppName: PreviewTimeControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::IPropertyCollector*, UnityEngine::Playables::PlayableDirector*, System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>*)>(&ControlPlayableAsset::PreviewTimeControl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "PreviewTimeControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::PreviewDirectors
// Il2CppName: PreviewDirectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Timeline::IPropertyCollector*, System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>*)>(&ControlPlayableAsset::PreviewDirectors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "PreviewDirectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ControlPlayableAsset::*)()>(&ControlPlayableAsset::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (ControlPlayableAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&ControlPlayableAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)()>(&ControlPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::*)()>(&ControlPlayableAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ControlPlayableAsset::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39
#include "UnityEngine/Timeline/ControlPlayableAsset_-GetControlableScripts-d__39.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.IDisposable.Dispose
void UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.MoveNext
bool UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.Generic.IEnumerator<UnityEngine.MonoBehaviour>.get_Current
UnityEngine::MonoBehaviour* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerator$UnityEngine_MonoBehaviour$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.Generic.IEnumerator<UnityEngine.MonoBehaviour>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.MonoBehaviour>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::MonoBehaviour*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.IEnumerator.Reset
void UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.IEnumerator.get_Current
::Il2CppObject* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.Generic.IEnumerable<UnityEngine.MonoBehaviour>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::MonoBehaviour*>* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerable$UnityEngine_MonoBehaviour$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.Generic.IEnumerable<UnityEngine.MonoBehaviour>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.MonoBehaviour>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::MonoBehaviour*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__39.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ControlPlayableAsset::$GetControlableScripts$d__39::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::$GetControlableScripts$d__39::*)(int)>(&ControlPlayableAsset::$GetControlableScripts$d__39::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::$GetControlableScripts$d__39::*)(int)>(&ControlPlayableAsset::$GetControlableScripts$d__39::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::$GetControlableScripts$d__39::*)()>(&ControlPlayableAsset::$GetControlableScripts$d__39::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ControlPlayableAsset::$GetControlableScripts$d__39::*)()>(&ControlPlayableAsset::$GetControlableScripts$d__39::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerator$UnityEngine_MonoBehaviour$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.MonoBehaviour>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MonoBehaviour* (ControlPlayableAsset::$GetControlableScripts$d__39::*)()>(&ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerator$UnityEngine_MonoBehaviour$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), "System.Collections.Generic.IEnumerator<UnityEngine.MonoBehaviour>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlPlayableAsset::$GetControlableScripts$d__39::*)()>(&ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ControlPlayableAsset::$GetControlableScripts$d__39::*)()>(&ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerable$UnityEngine_MonoBehaviour$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.MonoBehaviour>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::MonoBehaviour*>* (ControlPlayableAsset::$GetControlableScripts$d__39::*)()>(&ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_Generic_IEnumerable$UnityEngine_MonoBehaviour$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), "System.Collections.Generic.IEnumerable<UnityEngine.MonoBehaviour>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ControlPlayableAsset::$GetControlableScripts$d__39::*)()>(&ControlPlayableAsset::$GetControlableScripts$d__39::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlPlayableAsset::$GetControlableScripts$d__39*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ControlTrack
#include "UnityEngine/Timeline/ControlTrack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ControlTrack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlTrack::*)()>(&ControlTrack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ControlTrack::*)()>(&ControlTrack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ControlTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.DiscreteTime
#include "UnityEngine/Timeline/DiscreteTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Double k_Tick
double UnityEngine::Timeline::DiscreteTime::_get_k_Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::_get_k_Tick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<double>("UnityEngine.Timeline", "DiscreteTime", "k_Tick"));
}
// Autogenerated static field setter
// Set static field: static private System.Double k_Tick
void UnityEngine::Timeline::DiscreteTime::_set_k_Tick(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::_set_k_Tick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "DiscreteTime", "k_Tick", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.Timeline.DiscreteTime kMaxTime
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::_get_kMaxTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::_get_kMaxTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Timeline::DiscreteTime>("UnityEngine.Timeline", "DiscreteTime", "kMaxTime"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.Timeline.DiscreteTime kMaxTime
void UnityEngine::Timeline::DiscreteTime::_set_kMaxTime(UnityEngine::Timeline::DiscreteTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::_set_kMaxTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "DiscreteTime", "kMaxTime", value));
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.get_tickValue
double UnityEngine::Timeline::DiscreteTime::get_tickValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::get_tickValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "get_tickValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.OneTickBefore
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::OneTickBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::OneTickBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "OneTickBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.OneTickAfter
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::OneTickAfter() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::OneTickAfter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "OneTickAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.GetTick
int64_t UnityEngine::Timeline::DiscreteTime::GetTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::GetTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.FromTicks
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::FromTicks(int64_t ticks) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::FromTicks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "FromTicks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ticks)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ticks);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.CompareTo
int UnityEngine::Timeline::DiscreteTime::CompareTo(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::CompareTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CompareTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Equals
bool UnityEngine::Timeline::DiscreteTime::Equals(UnityEngine::Timeline::DiscreteTime other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.DoubleToDiscreteTime
int64_t UnityEngine::Timeline::DiscreteTime::DoubleToDiscreteTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::DoubleToDiscreteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "DoubleToDiscreteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.FloatToDiscreteTime
int64_t UnityEngine::Timeline::DiscreteTime::FloatToDiscreteTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::FloatToDiscreteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "FloatToDiscreteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.IntToDiscreteTime
int64_t UnityEngine::Timeline::DiscreteTime::IntToDiscreteTime(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::IntToDiscreteTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "IntToDiscreteTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.ToDouble
double UnityEngine::Timeline::DiscreteTime::ToDouble(int64_t time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::ToDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "ToDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.ToFloat
float UnityEngine::Timeline::DiscreteTime::ToFloat(int64_t time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::ToFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "ToFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::operator double() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::operator float() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
// ABORTED elsewhere.  UnityEngine::Timeline::DiscreteTime::operator int64_t()
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::DiscreteTime(double& time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  *this = ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::DiscreteTime(float& time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  *this = ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Explicit
UnityEngine::Timeline::DiscreteTime::DiscreteTime(int64_t& time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Explicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Explicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  *this = ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Min
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::Min(UnityEngine::Timeline::DiscreteTime lhs, UnityEngine::Timeline::DiscreteTime rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Max
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::DiscreteTime::Max(UnityEngine::Timeline::DiscreteTime lhs, UnityEngine::Timeline::DiscreteTime rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.SnapToNearestTick
double UnityEngine::Timeline::DiscreteTime::SnapToNearestTick(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::SnapToNearestTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "SnapToNearestTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.SnapToNearestTick
float UnityEngine::Timeline::DiscreteTime::SnapToNearestTick(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::SnapToNearestTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "SnapToNearestTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.GetNearestTick
int64_t UnityEngine::Timeline::DiscreteTime::GetNearestTick(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::GetNearestTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "GetNearestTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime..cctor
void UnityEngine::Timeline::DiscreteTime::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.Equals
bool UnityEngine::Timeline::DiscreteTime::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.ToString
::Il2CppString* UnityEngine::Timeline::DiscreteTime::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.GetHashCode
int UnityEngine::Timeline::DiscreteTime::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Equality
bool UnityEngine::Timeline::operator ==(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Inequality
bool UnityEngine::Timeline::operator !=(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_GreaterThan
bool UnityEngine::Timeline::operator >(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_GreaterThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_GreaterThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_LessThan
bool UnityEngine::Timeline::operator <(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_LessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_LessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_LessThanOrEqual
bool UnityEngine::Timeline::operator <=(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_LessThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_LessThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_GreaterThanOrEqual
bool UnityEngine::Timeline::operator >=(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_GreaterThanOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_GreaterThanOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Addition
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::operator+(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Timeline.DiscreteTime.op_Subtraction
UnityEngine::Timeline::DiscreteTime UnityEngine::Timeline::operator-(const UnityEngine::Timeline::DiscreteTime& lhs, const UnityEngine::Timeline::DiscreteTime& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::DiscreteTime::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DiscreteTime", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::DiscreteTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: DiscreteTime::get_tickValue
// Il2CppName: get_tickValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&DiscreteTime::get_tickValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "get_tickValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(UnityEngine::Timeline::DiscreteTime)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::DiscreteTime>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(UnityEngine::Timeline::DiscreteTime)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::DiscreteTime>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(int64_t)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(int64_t)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(double)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(double)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(float)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(float)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(int)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(int)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(int, double)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiscreteTime::*)(int, double)>(&DiscreteTime::DiscreteTime<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::OneTickBefore
// Il2CppName: OneTickBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (DiscreteTime::*)()>(&DiscreteTime::OneTickBefore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "OneTickBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::OneTickAfter
// Il2CppName: OneTickAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (DiscreteTime::*)()>(&DiscreteTime::OneTickAfter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "OneTickAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::GetTick
// Il2CppName: GetTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (DiscreteTime::*)()>(&DiscreteTime::GetTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "GetTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::FromTicks
// Il2CppName: FromTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(int64_t)>(&DiscreteTime::FromTicks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "FromTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DiscreteTime::*)(::Il2CppObject*)>(&DiscreteTime::CompareTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiscreteTime::*)(UnityEngine::Timeline::DiscreteTime)>(&DiscreteTime::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::DiscreteTime>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DoubleToDiscreteTime
// Il2CppName: DoubleToDiscreteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&DiscreteTime::DoubleToDiscreteTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "DoubleToDiscreteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::FloatToDiscreteTime
// Il2CppName: FloatToDiscreteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(float)>(&DiscreteTime::FloatToDiscreteTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "FloatToDiscreteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::IntToDiscreteTime
// Il2CppName: IntToDiscreteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int)>(&DiscreteTime::IntToDiscreteTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "IntToDiscreteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(int64_t)>(&DiscreteTime::ToDouble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::ToFloat
// Il2CppName: ToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int64_t)>(&DiscreteTime::ToFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "ToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator double
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&DiscreteTime::operator double)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator float
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&DiscreteTime::operator float)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator int64_t
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)()>(&DiscreteTime::operator int64_t)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(double&)>(&DiscreteTime::DiscreteTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(float&)>(&DiscreteTime::DiscreteTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::DiscreteTime
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(int64_t&)>(&DiscreteTime::DiscreteTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::Min
// Il2CppName: Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(UnityEngine::Timeline::DiscreteTime, UnityEngine::Timeline::DiscreteTime)>(&DiscreteTime::Min)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::DiscreteTime>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::DiscreteTime>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::Max
// Il2CppName: Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(UnityEngine::Timeline::DiscreteTime, UnityEngine::Timeline::DiscreteTime)>(&DiscreteTime::Max)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::DiscreteTime>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::DiscreteTime>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::SnapToNearestTick
// Il2CppName: SnapToNearestTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double)>(&DiscreteTime::SnapToNearestTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "SnapToNearestTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::SnapToNearestTick
// Il2CppName: SnapToNearestTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&DiscreteTime::SnapToNearestTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "SnapToNearestTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::GetNearestTick
// Il2CppName: GetNearestTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&DiscreteTime::GetNearestTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "GetNearestTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DiscreteTime::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DiscreteTime::*)(::Il2CppObject*)>(&DiscreteTime::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DiscreteTime::*)()>(&DiscreteTime::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DiscreteTime::*)()>(&DiscreteTime::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator >
// Il2CppName: op_GreaterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator >)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_GreaterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator <
// Il2CppName: op_LessThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator <)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_LessThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator <=
// Il2CppName: op_LessThanOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator <=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_LessThanOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator >=
// Il2CppName: op_GreaterThanOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator >=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_GreaterThanOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Writing MetadataGetter for method: DiscreteTime::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::DiscreteTime (*)(const UnityEngine::Timeline::DiscreteTime&, const UnityEngine::Timeline::DiscreteTime&)>(&DiscreteTime::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiscreteTime), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Timeline::DiscreteTime&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.InfiniteRuntimeClip
#include "UnityEngine/Timeline/InfiniteRuntimeClip.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int64 kIntervalEnd
int64_t UnityEngine::Timeline::InfiniteRuntimeClip::_get_kIntervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::_get_kIntervalEnd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("UnityEngine.Timeline", "InfiniteRuntimeClip", "kIntervalEnd"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int64 kIntervalEnd
void UnityEngine::Timeline::InfiniteRuntimeClip::_set_kIntervalEnd(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::_set_kIntervalEnd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "InfiniteRuntimeClip", "kIntervalEnd", value));
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip..cctor
void UnityEngine::Timeline::InfiniteRuntimeClip::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "InfiniteRuntimeClip", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.get_intervalStart
int64_t UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.get_intervalEnd
int64_t UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.set_enable
void UnityEngine::Timeline::InfiniteRuntimeClip::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::set_enable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.EvaluateAt
void UnityEngine::Timeline::InfiniteRuntimeClip::EvaluateAt(double localTime, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.InfiniteRuntimeClip.DisableAt
void UnityEngine::Timeline::InfiniteRuntimeClip::DisableAt(double localTime, double rootDuration, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::InfiniteRuntimeClip::DisableAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(rootDuration), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Writing MetadataGetter for method: InfiniteRuntimeClip::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniteRuntimeClip::*)(UnityEngine::Playables::Playable)>(&InfiniteRuntimeClip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniteRuntimeClip::*)(UnityEngine::Playables::Playable)>(&InfiniteRuntimeClip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: InfiniteRuntimeClip::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&InfiniteRuntimeClip::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniteRuntimeClip::get_intervalStart
// Il2CppName: get_intervalStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (InfiniteRuntimeClip::*)()>(&InfiniteRuntimeClip::get_intervalStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), "get_intervalStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniteRuntimeClip::get_intervalEnd
// Il2CppName: get_intervalEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (InfiniteRuntimeClip::*)()>(&InfiniteRuntimeClip::get_intervalEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), "get_intervalEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniteRuntimeClip::set_enable
// Il2CppName: set_enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniteRuntimeClip::*)(bool)>(&InfiniteRuntimeClip::set_enable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), "set_enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InfiniteRuntimeClip::EvaluateAt
// Il2CppName: EvaluateAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniteRuntimeClip::*)(double, UnityEngine::Playables::FrameData)>(&InfiniteRuntimeClip::EvaluateAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), "EvaluateAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: InfiniteRuntimeClip::DisableAt
// Il2CppName: DisableAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniteRuntimeClip::*)(double, double, UnityEngine::Playables::FrameData)>(&InfiniteRuntimeClip::DisableAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniteRuntimeClip*), "DisableAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.IInterval
#include "UnityEngine/Timeline/IInterval.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.IInterval.get_intervalStart
int64_t UnityEngine::Timeline::IInterval::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::IInterval::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.IInterval.get_intervalEnd
int64_t UnityEngine::Timeline::IInterval::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::IInterval::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IInterval::get_intervalStart
// Il2CppName: get_intervalStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (IInterval::*)()>(&IInterval::get_intervalStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInterval*), "get_intervalStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IInterval::get_intervalEnd
// Il2CppName: get_intervalEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (IInterval::*)()>(&IInterval::get_intervalEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInterval*), "get_intervalEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.RuntimeClip
#include "UnityEngine/Timeline/RuntimeClip.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.Create
void UnityEngine::Timeline::RuntimeClip::Create(UnityEngine::Timeline::TimelineClip* clip, UnityEngine::Playables::Playable clipPlayable, UnityEngine::Playables::Playable parentMixer) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(clipPlayable), ::il2cpp_utils::ExtractType(parentMixer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip, clipPlayable, parentMixer);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_clip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::RuntimeClip::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_mixer
UnityEngine::Playables::Playable UnityEngine::Timeline::RuntimeClip::get_mixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::get_mixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_playable
UnityEngine::Playables::Playable UnityEngine::Timeline::RuntimeClip::get_playable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::get_playable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.SetTime
void UnityEngine::Timeline::RuntimeClip::SetTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::SetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.SetDuration
void UnityEngine::Timeline::RuntimeClip::SetDuration(double duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::SetDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_start
double UnityEngine::Timeline::RuntimeClip::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::get_start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.get_duration
double UnityEngine::Timeline::RuntimeClip::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.set_enable
void UnityEngine::Timeline::RuntimeClip::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::set_enable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.EvaluateAt
void UnityEngine::Timeline::RuntimeClip::EvaluateAt(double localTime, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClip.DisableAt
void UnityEngine::Timeline::RuntimeClip::DisableAt(double localTime, double rootDuration, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClip::DisableAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(rootDuration), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Writing MetadataGetter for method: RuntimeClip::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::Playables::Playable, UnityEngine::Playables::Playable)>(&RuntimeClip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::Playables::Playable, UnityEngine::Playables::Playable)>(&RuntimeClip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: RuntimeClip::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::Playables::Playable, UnityEngine::Playables::Playable)>(&RuntimeClip::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: RuntimeClip::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (RuntimeClip::*)()>(&RuntimeClip::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClip::get_mixer
// Il2CppName: get_mixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (RuntimeClip::*)()>(&RuntimeClip::get_mixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "get_mixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClip::get_playable
// Il2CppName: get_playable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (RuntimeClip::*)()>(&RuntimeClip::get_playable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "get_playable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClip::SetTime
// Il2CppName: SetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(double)>(&RuntimeClip::SetTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "SetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: RuntimeClip::SetDuration
// Il2CppName: SetDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(double)>(&RuntimeClip::SetDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "SetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: RuntimeClip::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (RuntimeClip::*)()>(&RuntimeClip::get_start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClip::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (RuntimeClip::*)()>(&RuntimeClip::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClip::set_enable
// Il2CppName: set_enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(bool)>(&RuntimeClip::set_enable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "set_enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RuntimeClip::EvaluateAt
// Il2CppName: EvaluateAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(double, UnityEngine::Playables::FrameData)>(&RuntimeClip::EvaluateAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "EvaluateAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: RuntimeClip::DisableAt
// Il2CppName: DisableAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClip::*)(double, double, UnityEngine::Playables::FrameData)>(&RuntimeClip::DisableAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClip*), "DisableAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.RuntimeClipBase
#include "UnityEngine/Timeline/RuntimeClipBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_start
double UnityEngine::Timeline::RuntimeClipBase::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClipBase::get_start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_duration
double UnityEngine::Timeline::RuntimeClipBase::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClipBase::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_intervalStart
int64_t UnityEngine::Timeline::RuntimeClipBase::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClipBase::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeClipBase.get_intervalEnd
int64_t UnityEngine::Timeline::RuntimeClipBase::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeClipBase::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RuntimeClipBase::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (RuntimeClipBase::*)()>(&RuntimeClipBase::get_start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClipBase*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClipBase::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (RuntimeClipBase::*)()>(&RuntimeClipBase::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClipBase*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClipBase::get_intervalStart
// Il2CppName: get_intervalStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (RuntimeClipBase::*)()>(&RuntimeClipBase::get_intervalStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClipBase*), "get_intervalStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClipBase::get_intervalEnd
// Il2CppName: get_intervalEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (RuntimeClipBase::*)()>(&RuntimeClipBase::get_intervalEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClipBase*), "get_intervalEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeClipBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClipBase::*)()>(&RuntimeClipBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClipBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeClipBase::*)()>(&RuntimeClipBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeClipBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.get_intervalStart
int64_t UnityEngine::Timeline::RuntimeElement::get_intervalStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::get_intervalStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.get_intervalEnd
int64_t UnityEngine::Timeline::RuntimeElement::get_intervalEnd() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::get_intervalEnd");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.get_intervalBit
int UnityEngine::Timeline::RuntimeElement::get_intervalBit() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::get_intervalBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_intervalBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.set_intervalBit
void UnityEngine::Timeline::RuntimeElement::set_intervalBit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::set_intervalBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_intervalBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.set_enable
void UnityEngine::Timeline::RuntimeElement::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::set_enable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.EvaluateAt
void UnityEngine::Timeline::RuntimeElement::EvaluateAt(double localTime, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.RuntimeElement.DisableAt
void UnityEngine::Timeline::RuntimeElement::DisableAt(double localTime, double rootDuration, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::DisableAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(rootDuration), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Writing MetadataGetter for method: RuntimeElement::get_intervalStart
// Il2CppName: get_intervalStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (RuntimeElement::*)()>(&RuntimeElement::get_intervalStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), "get_intervalStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeElement::get_intervalEnd
// Il2CppName: get_intervalEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (RuntimeElement::*)()>(&RuntimeElement::get_intervalEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), "get_intervalEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeElement::get_intervalBit
// Il2CppName: get_intervalBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RuntimeElement::*)()>(&RuntimeElement::get_intervalBit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), "get_intervalBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeElement::set_intervalBit
// Il2CppName: set_intervalBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeElement::*)(int)>(&RuntimeElement::set_intervalBit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), "set_intervalBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RuntimeElement::set_enable
// Il2CppName: set_enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeElement::*)(bool)>(&RuntimeElement::set_enable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), "set_enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RuntimeElement::EvaluateAt
// Il2CppName: EvaluateAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeElement::*)(double, UnityEngine::Playables::FrameData)>(&RuntimeElement::EvaluateAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), "EvaluateAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: RuntimeElement::DisableAt
// Il2CppName: DisableAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeElement::*)(double, double, UnityEngine::Playables::FrameData)>(&RuntimeElement::DisableAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), "DisableAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: RuntimeElement::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeElement::*)()>(&RuntimeElement::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeElement::*)()>(&RuntimeElement::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ScheduleRuntimeClip
#include "UnityEngine/Timeline/ScheduleRuntimeClip.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.SetTime
void UnityEngine::Timeline::ScheduleRuntimeClip::SetTime(double time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::SetTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_clip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::ScheduleRuntimeClip::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_mixer
UnityEngine::Playables::Playable UnityEngine::Timeline::ScheduleRuntimeClip::get_mixer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::get_mixer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mixer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_playable
UnityEngine::Playables::Playable UnityEngine::Timeline::ScheduleRuntimeClip::get_playable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::get_playable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.Create
void UnityEngine::Timeline::ScheduleRuntimeClip::Create(UnityEngine::Timeline::TimelineClip* clip, UnityEngine::Playables::Playable clipPlayable, UnityEngine::Playables::Playable parentMixer, double startDelay, double finishTail) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clip), ::il2cpp_utils::ExtractType(clipPlayable), ::il2cpp_utils::ExtractType(parentMixer), ::il2cpp_utils::ExtractType(startDelay), ::il2cpp_utils::ExtractType(finishTail)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip, clipPlayable, parentMixer, startDelay, finishTail);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_start
double UnityEngine::Timeline::ScheduleRuntimeClip::get_start() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::get_start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.get_duration
double UnityEngine::Timeline::ScheduleRuntimeClip::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::get_duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.set_enable
void UnityEngine::Timeline::ScheduleRuntimeClip::set_enable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::set_enable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.EvaluateAt
void UnityEngine::Timeline::ScheduleRuntimeClip::EvaluateAt(double localTime, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::EvaluateAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EvaluateAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, frameData);
}
// Autogenerated method: UnityEngine.Timeline.ScheduleRuntimeClip.DisableAt
void UnityEngine::Timeline::ScheduleRuntimeClip::DisableAt(double localTime, double rootDuration, UnityEngine::Playables::FrameData frameData) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ScheduleRuntimeClip::DisableAt");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localTime), ::il2cpp_utils::ExtractType(rootDuration), ::il2cpp_utils::ExtractType(frameData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localTime, rootDuration, frameData);
}
// Writing MetadataGetter for method: ScheduleRuntimeClip::SetTime
// Il2CppName: SetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScheduleRuntimeClip::*)(double)>(&ScheduleRuntimeClip::SetTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "SetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (ScheduleRuntimeClip::*)()>(&ScheduleRuntimeClip::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::get_mixer
// Il2CppName: get_mixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (ScheduleRuntimeClip::*)()>(&ScheduleRuntimeClip::get_mixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "get_mixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::get_playable
// Il2CppName: get_playable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (ScheduleRuntimeClip::*)()>(&ScheduleRuntimeClip::get_playable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "get_playable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScheduleRuntimeClip::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::Playables::Playable, UnityEngine::Playables::Playable, double, double)>(&ScheduleRuntimeClip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScheduleRuntimeClip::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::Playables::Playable, UnityEngine::Playables::Playable, double, double)>(&ScheduleRuntimeClip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScheduleRuntimeClip::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::Playables::Playable, UnityEngine::Playables::Playable, double, double)>(&ScheduleRuntimeClip::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ScheduleRuntimeClip::*)()>(&ScheduleRuntimeClip::get_start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ScheduleRuntimeClip::*)()>(&ScheduleRuntimeClip::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::set_enable
// Il2CppName: set_enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScheduleRuntimeClip::*)(bool)>(&ScheduleRuntimeClip::set_enable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "set_enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::EvaluateAt
// Il2CppName: EvaluateAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScheduleRuntimeClip::*)(double, UnityEngine::Playables::FrameData)>(&ScheduleRuntimeClip::EvaluateAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "EvaluateAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Writing MetadataGetter for method: ScheduleRuntimeClip::DisableAt
// Il2CppName: DisableAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScheduleRuntimeClip::*)(double, double, UnityEngine::Playables::FrameData)>(&ScheduleRuntimeClip::DisableAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScheduleRuntimeClip*), "DisableAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.IMarker.get_time
double UnityEngine::Timeline::IMarker::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::IMarker::get_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.IMarker.set_time
void UnityEngine::Timeline::IMarker::set_time(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::IMarker::set_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.IMarker.get_parent
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::IMarker::get_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::IMarker::get_parent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.IMarker.Initialize
void UnityEngine::Timeline::IMarker::Initialize(UnityEngine::Timeline::TrackAsset* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::IMarker::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parent);
}
// Writing MetadataGetter for method: IMarker::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (IMarker::*)()>(&IMarker::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMarker*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMarker::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMarker::*)(double)>(&IMarker::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMarker*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: IMarker::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (IMarker::*)()>(&IMarker::get_parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMarker*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMarker::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMarker::*)(UnityEngine::Timeline::TrackAsset*)>(&IMarker::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMarker*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.INotificationOptionProvider
#include "UnityEngine/Timeline/INotificationOptionProvider.hpp"
// Including type: UnityEngine.Timeline.NotificationFlags
#include "UnityEngine/Timeline/NotificationFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.INotificationOptionProvider.get_flags
UnityEngine::Timeline::NotificationFlags UnityEngine::Timeline::INotificationOptionProvider::get_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::INotificationOptionProvider::get_flags");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::NotificationFlags, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: INotificationOptionProvider::get_flags
// Il2CppName: get_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::NotificationFlags (INotificationOptionProvider::*)()>(&INotificationOptionProvider::get_flags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INotificationOptionProvider*), "get_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.Marker
#include "UnityEngine/Timeline/Marker.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.Marker.get_parent
UnityEngine::Timeline::TrackAsset* UnityEngine::Timeline::Marker::get_parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::Marker::get_parent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.Marker.set_parent
void UnityEngine::Timeline::Marker::set_parent(UnityEngine::Timeline::TrackAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::Marker::set_parent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.Marker.get_time
double UnityEngine::Timeline::Marker::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::Marker::get_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.Marker.set_time
void UnityEngine::Timeline::Marker::set_time(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::Marker::set_time");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.Marker.UnityEngine.Timeline.IMarker.Initialize
void UnityEngine::Timeline::Marker::UnityEngine_Timeline_IMarker_Initialize(UnityEngine::Timeline::TrackAsset* parentTrack) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::Marker::UnityEngine.Timeline.IMarker.Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.IMarker.Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentTrack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parentTrack);
}
// Autogenerated method: UnityEngine.Timeline.Marker.OnInitialize
void UnityEngine::Timeline::Marker::OnInitialize(UnityEngine::Timeline::TrackAsset* aPent) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::Marker::OnInitialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(aPent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, aPent);
}
// Writing MetadataGetter for method: Marker::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (Marker::*)()>(&Marker::get_parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Marker::set_parent
// Il2CppName: set_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Marker::*)(UnityEngine::Timeline::TrackAsset*)>(&Marker::set_parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), "set_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: Marker::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Marker::*)()>(&Marker::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Marker::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Marker::*)(double)>(&Marker::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: Marker::UnityEngine_Timeline_IMarker_Initialize
// Il2CppName: UnityEngine.Timeline.IMarker.Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Marker::*)(UnityEngine::Timeline::TrackAsset*)>(&Marker::UnityEngine_Timeline_IMarker_Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), "UnityEngine.Timeline.IMarker.Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: Marker::OnInitialize
// Il2CppName: OnInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Marker::*)(UnityEngine::Timeline::TrackAsset*)>(&Marker::OnInitialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), "OnInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: Marker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Marker::*)()>(&Marker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Marker::*)()>(&Marker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Marker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MarkerList
#include "UnityEngine/Timeline/MarkerList.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Timeline.IMarker
#include "UnityEngine/Timeline/IMarker.hpp"
// Including type: UnityEngine.Timeline.TimelineAsset
#include "UnityEngine/Timeline/TimelineAsset.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.MarkerList.get_markers
System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>* UnityEngine::Timeline::MarkerList::get_markers() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::get_markers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_markers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Add
void UnityEngine::Timeline::MarkerList::Add(UnityEngine::ScriptableObject* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, item);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Remove
bool UnityEngine::Timeline::MarkerList::Remove(UnityEngine::Timeline::IMarker* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, item);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Remove
bool UnityEngine::Timeline::MarkerList::Remove(UnityEngine::ScriptableObject* item, UnityEngine::Timeline::TimelineAsset* timelineAsset, UnityEngine::Playables::PlayableAsset* thingToDirty) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item), ::il2cpp_utils::ExtractType(timelineAsset), ::il2cpp_utils::ExtractType(thingToDirty)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, item, timelineAsset, thingToDirty);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Clear
void UnityEngine::Timeline::MarkerList::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.Contains
bool UnityEngine::Timeline::MarkerList::Contains(UnityEngine::ScriptableObject* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, item);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.GetMarkers
System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::IMarker*>* UnityEngine::Timeline::MarkerList::GetMarkers() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::GetMarkers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetMarkers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::IMarker*>*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.get_Count
int UnityEngine::Timeline::MarkerList::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.get_Item
UnityEngine::Timeline::IMarker* UnityEngine::Timeline::MarkerList::get_Item(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::IMarker*, false>(*this, ___internal__method, idx);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.GetRawMarkerList
System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* UnityEngine::Timeline::MarkerList::GetRawMarkerList() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::GetRawMarkerList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetRawMarkerList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.CreateMarker
UnityEngine::Timeline::IMarker* UnityEngine::Timeline::MarkerList::CreateMarker(System::Type* type, double time, UnityEngine::Timeline::TrackAsset* owner) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::CreateMarker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(owner)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::IMarker*, false>(*this, ___internal__method, type, time, owner);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.HasNotifications
bool UnityEngine::Timeline::MarkerList::HasNotifications() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::HasNotifications");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "HasNotifications", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::MarkerList::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::MarkerList::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.MarkerList.BuildCache
void UnityEngine::Timeline::MarkerList::BuildCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerList::BuildCache");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "BuildCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: MarkerList::get_markers
// Il2CppName: get_markers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>* (MarkerList::*)()>(&MarkerList::get_markers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "get_markers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::MarkerList
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerList::*)(int)>(&MarkerList::MarkerList<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerList::*)(int)>(&MarkerList::MarkerList<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MarkerList::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerList::*)(UnityEngine::ScriptableObject*)>(&MarkerList::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ScriptableObject*>()});
  }
};
// Writing MetadataGetter for method: MarkerList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MarkerList::*)(UnityEngine::Timeline::IMarker*)>(&MarkerList::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IMarker*>()});
  }
};
// Writing MetadataGetter for method: MarkerList::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MarkerList::*)(UnityEngine::ScriptableObject*, UnityEngine::Timeline::TimelineAsset*, UnityEngine::Playables::PlayableAsset*)>(&MarkerList::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ScriptableObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineAsset*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableAsset*>()});
  }
};
// Writing MetadataGetter for method: MarkerList::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerList::*)()>(&MarkerList::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MarkerList::*)(UnityEngine::ScriptableObject*)>(&MarkerList::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ScriptableObject*>()});
  }
};
// Writing MetadataGetter for method: MarkerList::GetMarkers
// Il2CppName: GetMarkers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::IMarker*>* (MarkerList::*)()>(&MarkerList::GetMarkers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "GetMarkers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MarkerList::*)()>(&MarkerList::get_Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::IMarker* (MarkerList::*)(int)>(&MarkerList::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MarkerList::GetRawMarkerList
// Il2CppName: GetRawMarkerList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* (MarkerList::*)()>(&MarkerList::GetRawMarkerList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "GetRawMarkerList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::CreateMarker
// Il2CppName: CreateMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::IMarker* (MarkerList::*)(System::Type*, double, UnityEngine::Timeline::TrackAsset*)>(&MarkerList::CreateMarker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "CreateMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
  }
};
// Writing MetadataGetter for method: MarkerList::HasNotifications
// Il2CppName: HasNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MarkerList::*)()>(&MarkerList::HasNotifications)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "HasNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerList::*)()>(&MarkerList::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerList::*)()>(&MarkerList::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerList::BuildCache
// Il2CppName: BuildCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerList::*)()>(&MarkerList::BuildCache)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerList), "BuildCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.MarkerTrack
#include "UnityEngine/Timeline/MarkerTrack.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.MarkerTrack.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::MarkerTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::MarkerTrack::get_outputs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MarkerTrack::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (MarkerTrack::*)()>(&MarkerTrack::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerTrack*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkerTrack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerTrack::*)()>(&MarkerTrack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkerTrack::*)()>(&MarkerTrack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkerTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.SignalTrack
#include "UnityEngine/Timeline/SignalTrack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SignalTrack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalTrack::*)()>(&SignalTrack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalTrack::*)()>(&SignalTrack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.CustomSignalEventDrawer
#include "UnityEngine/Timeline/CustomSignalEventDrawer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CustomSignalEventDrawer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomSignalEventDrawer::*)()>(&CustomSignalEventDrawer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomSignalEventDrawer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomSignalEventDrawer::*)()>(&CustomSignalEventDrawer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomSignalEventDrawer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.SignalAsset
#include "UnityEngine/Timeline/SignalAsset.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDD871C
// Autogenerated static field getter
// Get static field: static private System.Action`1<UnityEngine.Timeline.SignalAsset> OnEnableCallback
System::Action_1<UnityEngine::Timeline::SignalAsset*>* UnityEngine::Timeline::SignalAsset::_get_OnEnableCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalAsset::_get_OnEnableCallback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<UnityEngine::Timeline::SignalAsset*>*>("UnityEngine.Timeline", "SignalAsset", "OnEnableCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<UnityEngine.Timeline.SignalAsset> OnEnableCallback
void UnityEngine::Timeline::SignalAsset::_set_OnEnableCallback(System::Action_1<UnityEngine::Timeline::SignalAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalAsset::_set_OnEnableCallback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "SignalAsset", "OnEnableCallback", value));
}
// Autogenerated method: UnityEngine.Timeline.SignalAsset.add_OnEnableCallback
void UnityEngine::Timeline::SignalAsset::add_OnEnableCallback(System::Action_1<UnityEngine::Timeline::SignalAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalAsset::add_OnEnableCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "SignalAsset", "add_OnEnableCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalAsset.remove_OnEnableCallback
void UnityEngine::Timeline::SignalAsset::remove_OnEnableCallback(System::Action_1<UnityEngine::Timeline::SignalAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalAsset::remove_OnEnableCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.Timeline", "SignalAsset", "remove_OnEnableCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalAsset.OnEnable
void UnityEngine::Timeline::SignalAsset::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalAsset::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SignalAsset::add_OnEnableCallback
// Il2CppName: add_OnEnableCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_1<UnityEngine::Timeline::SignalAsset*>*)>(&SignalAsset::add_OnEnableCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalAsset*), "add_OnEnableCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Timeline::SignalAsset*>*>()});
  }
};
// Writing MetadataGetter for method: SignalAsset::remove_OnEnableCallback
// Il2CppName: remove_OnEnableCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action_1<UnityEngine::Timeline::SignalAsset*>*)>(&SignalAsset::remove_OnEnableCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalAsset*), "remove_OnEnableCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Timeline::SignalAsset*>*>()});
  }
};
// Writing MetadataGetter for method: SignalAsset::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalAsset::*)()>(&SignalAsset::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalAsset*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalAsset::*)()>(&SignalAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalAsset::*)()>(&SignalAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.SignalEmitter
#include "UnityEngine/Timeline/SignalEmitter.hpp"
// Including type: UnityEngine.Timeline.SignalAsset
#include "UnityEngine/Timeline/SignalAsset.hpp"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
// Including type: UnityEngine.Timeline.NotificationFlags
#include "UnityEngine/Timeline/NotificationFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.get_retroactive
bool UnityEngine::Timeline::SignalEmitter::get_retroactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::get_retroactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_retroactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.set_retroactive
void UnityEngine::Timeline::SignalEmitter::set_retroactive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::set_retroactive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_retroactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.get_emitOnce
bool UnityEngine::Timeline::SignalEmitter::get_emitOnce() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::get_emitOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_emitOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.set_emitOnce
void UnityEngine::Timeline::SignalEmitter::set_emitOnce(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::set_emitOnce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_emitOnce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.get_asset
UnityEngine::Timeline::SignalAsset* UnityEngine::Timeline::SignalEmitter::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::get_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::SignalAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.set_asset
void UnityEngine::Timeline::SignalEmitter::set_asset(UnityEngine::Timeline::SignalAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::set_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.UnityEngine.Playables.INotification.get_id
UnityEngine::PropertyName UnityEngine::Timeline::SignalEmitter::UnityEngine_Playables_INotification_get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::UnityEngine.Playables.INotification.get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Playables.INotification.get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.SignalEmitter.UnityEngine.Timeline.INotificationOptionProvider.get_flags
UnityEngine::Timeline::NotificationFlags UnityEngine::Timeline::SignalEmitter::UnityEngine_Timeline_INotificationOptionProvider_get_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::SignalEmitter::UnityEngine.Timeline.INotificationOptionProvider.get_flags");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.INotificationOptionProvider.get_flags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::NotificationFlags, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SignalEmitter::get_retroactive
// Il2CppName: get_retroactive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SignalEmitter::*)()>(&SignalEmitter::get_retroactive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "get_retroactive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalEmitter::set_retroactive
// Il2CppName: set_retroactive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalEmitter::*)(bool)>(&SignalEmitter::set_retroactive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "set_retroactive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SignalEmitter::get_emitOnce
// Il2CppName: get_emitOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SignalEmitter::*)()>(&SignalEmitter::get_emitOnce)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "get_emitOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalEmitter::set_emitOnce
// Il2CppName: set_emitOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalEmitter::*)(bool)>(&SignalEmitter::set_emitOnce)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "set_emitOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SignalEmitter::get_asset
// Il2CppName: get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::SignalAsset* (SignalEmitter::*)()>(&SignalEmitter::get_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalEmitter::set_asset
// Il2CppName: set_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalEmitter::*)(UnityEngine::Timeline::SignalAsset*)>(&SignalEmitter::set_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "set_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::SignalAsset*>()});
  }
};
// Writing MetadataGetter for method: SignalEmitter::UnityEngine_Playables_INotification_get_id
// Il2CppName: UnityEngine.Playables.INotification.get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::PropertyName (SignalEmitter::*)()>(&SignalEmitter::UnityEngine_Playables_INotification_get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "UnityEngine.Playables.INotification.get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalEmitter::UnityEngine_Timeline_INotificationOptionProvider_get_flags
// Il2CppName: UnityEngine.Timeline.INotificationOptionProvider.get_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::NotificationFlags (SignalEmitter::*)()>(&SignalEmitter::UnityEngine_Timeline_INotificationOptionProvider_get_flags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), "UnityEngine.Timeline.INotificationOptionProvider.get_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalEmitter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalEmitter::*)()>(&SignalEmitter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalEmitter::*)()>(&SignalEmitter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalEmitter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
