// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomPreviewBeatmapLevel/<GetPreviewAudioClipAsync>d__60
#include "GlobalNamespace/CustomPreviewBeatmapLevel_-GetPreviewAudioClipAsync-d__60.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CustomPreviewBeatmapLevel/<GetPreviewAudioClipAsync>d__60.MoveNext
void GlobalNamespace::CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel/<GetPreviewAudioClipAsync>d__60.SetStateMachine
void GlobalNamespace::CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::*)()>(&CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomPreviewBeatmapLevel/<GetCoverImageAsync>d__61
#include "GlobalNamespace/CustomPreviewBeatmapLevel_-GetCoverImageAsync-d__61.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CustomPreviewBeatmapLevel/<GetCoverImageAsync>d__61.MoveNext
void GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: CustomPreviewBeatmapLevel/<GetCoverImageAsync>d__61.SetStateMachine
void GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::*)()>(&CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EmptyBeatmapLevel
#include "GlobalNamespace/EmptyBeatmapLevel.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EmptyBeatmapLevel.get_levelID
::Il2CppString* GlobalNamespace::EmptyBeatmapLevel::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songName
::Il2CppString* GlobalNamespace::EmptyBeatmapLevel::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songSubName
::Il2CppString* GlobalNamespace::EmptyBeatmapLevel::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songAuthorName
::Il2CppString* GlobalNamespace::EmptyBeatmapLevel::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_levelAuthorName
::Il2CppString* GlobalNamespace::EmptyBeatmapLevel::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_beatsPerMinute
float GlobalNamespace::EmptyBeatmapLevel::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songTimeOffset
float GlobalNamespace::EmptyBeatmapLevel::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_shuffle
float GlobalNamespace::EmptyBeatmapLevel::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_shufflePeriod
float GlobalNamespace::EmptyBeatmapLevel::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_previewStartTime
float GlobalNamespace::EmptyBeatmapLevel::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_previewDuration
float GlobalNamespace::EmptyBeatmapLevel::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_songDuration
float GlobalNamespace::EmptyBeatmapLevel::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_environmentInfo
GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::EmptyBeatmapLevel::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_allDirectionsEnvironmentInfo
GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::EmptyBeatmapLevel::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.get_previewDifficultyBeatmapSets
::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::EmptyBeatmapLevel::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevel.GetPreviewAudioClipAsync
System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* GlobalNamespace::EmptyBeatmapLevel::GetPreviewAudioClipAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::GetPreviewAudioClipAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: EmptyBeatmapLevel.GetCoverImageAsync
System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* GlobalNamespace::EmptyBeatmapLevel::GetCoverImageAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: EmptyBeatmapLevel.get_beatmapLevelData
GlobalNamespace::IBeatmapLevelData* GlobalNamespace::EmptyBeatmapLevel::get_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevel::get_beatmapLevelData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevelData*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_levelID
// Il2CppName: get_levelID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_levelID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_levelID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_songName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_songSubName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_songAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_levelAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_beatsPerMinute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_songTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_shuffle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_shufflePeriod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_previewStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_previewDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_songDuration
// Il2CppName: get_songDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_songDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_songDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_environmentInfo
// Il2CppName: get_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_environmentInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_allDirectionsEnvironmentInfo
// Il2CppName: get_allDirectionsEnvironmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_allDirectionsEnvironmentInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_previewDifficultyBeatmapSets
// Il2CppName: get_previewDifficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_previewDifficultyBeatmapSets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::GetPreviewAudioClipAsync
// Il2CppName: GetPreviewAudioClipAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* (EmptyBeatmapLevel::*)(System::Threading::CancellationToken)>(&EmptyBeatmapLevel::GetPreviewAudioClipAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::GetCoverImageAsync
// Il2CppName: GetCoverImageAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* (EmptyBeatmapLevel::*)(System::Threading::CancellationToken)>(&EmptyBeatmapLevel::GetCoverImageAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "GetCoverImageAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::get_beatmapLevelData
// Il2CppName: get_beatmapLevelData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelData* (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::get_beatmapLevelData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), "get_beatmapLevelData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyBeatmapLevel::*)()>(&EmptyBeatmapLevel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EmptyBeatmapLevelData
#include "GlobalNamespace/EmptyBeatmapLevelData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EmptyBeatmapLevelData.get_audioClip
UnityEngine::AudioClip* GlobalNamespace::EmptyBeatmapLevelData::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevelData::get_audioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyBeatmapLevelData.get_difficultyBeatmapSets
::Array<GlobalNamespace::IDifficultyBeatmapSet*>* GlobalNamespace::EmptyBeatmapLevelData::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyBeatmapLevelData::get_difficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::IDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EmptyBeatmapLevelData::get_audioClip
// Il2CppName: get_audioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (EmptyBeatmapLevelData::*)()>(&EmptyBeatmapLevelData::get_audioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevelData*), "get_audioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevelData::get_difficultyBeatmapSets
// Il2CppName: get_difficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::IDifficultyBeatmapSet*>* (EmptyBeatmapLevelData::*)()>(&EmptyBeatmapLevelData::get_difficultyBeatmapSets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevelData*), "get_difficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyBeatmapLevelData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyBeatmapLevelData::*)()>(&EmptyBeatmapLevelData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevelData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyBeatmapLevelData::*)()>(&EmptyBeatmapLevelData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyBeatmapLevelData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmptyDifficultyBeatmap
#include "GlobalNamespace/EmptyDifficultyBeatmap.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EmptyDifficultyBeatmap.get_level
GlobalNamespace::IBeatmapLevel* GlobalNamespace::EmptyDifficultyBeatmap::get_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::get_level");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_parentDifficultyBeatmapSet
GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::EmptyDifficultyBeatmap::get_parentDifficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::get_parentDifficultyBeatmapSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmapSet*, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_difficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::EmptyDifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::get_difficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_difficultyRank
int GlobalNamespace::EmptyDifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::get_difficultyRank");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_noteJumpStartBeatOffset
float GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::get_noteJumpStartBeatOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EmptyDifficultyBeatmap.get_beatmapData
GlobalNamespace::BeatmapData* GlobalNamespace::EmptyDifficultyBeatmap::get_beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::get_beatmapData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapData*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::get_level
// Il2CppName: get_level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevel* (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::get_level)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), "get_level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::get_parentDifficultyBeatmapSet
// Il2CppName: get_parentDifficultyBeatmapSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmapSet* (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::get_parentDifficultyBeatmapSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::get_difficulty
// Il2CppName: get_difficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::get_difficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), "get_difficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::get_difficultyRank
// Il2CppName: get_difficultyRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::get_difficultyRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), "get_difficultyRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::get_noteJumpStartBeatOffset
// Il2CppName: get_noteJumpStartBeatOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::get_noteJumpStartBeatOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::get_beatmapData
// Il2CppName: get_beatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapData* (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::get_beatmapData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), "get_beatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyDifficultyBeatmap::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyDifficultyBeatmap::*)()>(&EmptyDifficultyBeatmap::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyDifficultyBeatmap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapLevel.get_beatmapLevelData
GlobalNamespace::IBeatmapLevelData* GlobalNamespace::IBeatmapLevel::get_beatmapLevelData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapLevel::get_beatmapLevelData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevelData*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IBeatmapLevel::get_beatmapLevelData
// Il2CppName: get_beatmapLevelData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelData* (IBeatmapLevel::*)()>(&IBeatmapLevel::get_beatmapLevelData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapLevel*), "get_beatmapLevelData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapLevelData.get_audioClip
UnityEngine::AudioClip* GlobalNamespace::IBeatmapLevelData::get_audioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapLevelData::get_audioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapLevelData.get_difficultyBeatmapSets
::Array<GlobalNamespace::IDifficultyBeatmapSet*>* GlobalNamespace::IBeatmapLevelData::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapLevelData::get_difficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::IDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IBeatmapLevelData::get_audioClip
// Il2CppName: get_audioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (IBeatmapLevelData::*)()>(&IBeatmapLevelData::get_audioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapLevelData*), "get_audioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapLevelData::get_difficultyBeatmapSets
// Il2CppName: get_difficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::IDifficultyBeatmapSet*>* (IBeatmapLevelData::*)()>(&IBeatmapLevelData::get_difficultyBeatmapSets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapLevelData*), "get_difficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapLevelDataExtensions
#include "GlobalNamespace/BeatmapLevelDataExtensions.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IBeatmapLevelData
#include "GlobalNamespace/IBeatmapLevelData.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmap
GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap(GlobalNamespace::IBeatmapLevelData* beatmapLevelData, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmap*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapLevelData, beatmapCharacteristic, difficulty);
}
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmapSet
GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet(GlobalNamespace::IBeatmapLevelData* beatmapLevelData, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmapSet*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapLevelData, beatmapCharacteristic);
}
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmap
GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap(GlobalNamespace::IBeatmapLevelData* beatmapLevelData, ::Il2CppString* beatmapCharacteristicName, GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(beatmapCharacteristicName), ::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmap*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapLevelData, beatmapCharacteristicName, difficulty);
}
// Autogenerated method: BeatmapLevelDataExtensions.GetDifficultyBeatmapSet
GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet(GlobalNamespace::IBeatmapLevelData* beatmapLevelData, ::Il2CppString* beatmapCharacteristicName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelDataExtensions::GetDifficultyBeatmapSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelDataExtensions", "GetDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelData), ::il2cpp_utils::ExtractType(beatmapCharacteristicName)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmapSet*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapLevelData, beatmapCharacteristicName);
}
// Writing MetadataGetter for method: BeatmapLevelDataExtensions::GetDifficultyBeatmap
// Il2CppName: GetDifficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmap* (*)(GlobalNamespace::IBeatmapLevelData*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty)>(&BeatmapLevelDataExtensions::GetDifficultyBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLevelDataExtensions*), "GetDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: BeatmapLevelDataExtensions::GetDifficultyBeatmapSet
// Il2CppName: GetDifficultyBeatmapSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmapSet* (*)(GlobalNamespace::IBeatmapLevelData*, GlobalNamespace::BeatmapCharacteristicSO*)>(&BeatmapLevelDataExtensions::GetDifficultyBeatmapSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLevelDataExtensions*), "GetDifficultyBeatmapSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: BeatmapLevelDataExtensions::GetDifficultyBeatmap
// Il2CppName: GetDifficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmap* (*)(GlobalNamespace::IBeatmapLevelData*, ::Il2CppString*, GlobalNamespace::BeatmapDifficulty)>(&BeatmapLevelDataExtensions::GetDifficultyBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLevelDataExtensions*), "GetDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelData*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: BeatmapLevelDataExtensions::GetDifficultyBeatmapSet
// Il2CppName: GetDifficultyBeatmapSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmapSet* (*)(GlobalNamespace::IBeatmapLevelData*, ::Il2CppString*)>(&BeatmapLevelDataExtensions::GetDifficultyBeatmapSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLevelDataExtensions*), "GetDifficultyBeatmapSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelData*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDifficultyBeatmap.get_level
GlobalNamespace::IBeatmapLevel* GlobalNamespace::IDifficultyBeatmap::get_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmap::get_level");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_parentDifficultyBeatmapSet
GlobalNamespace::IDifficultyBeatmapSet* GlobalNamespace::IDifficultyBeatmap::get_parentDifficultyBeatmapSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmap::get_parentDifficultyBeatmapSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmapSet*, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_difficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::IDifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmap::get_difficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_difficultyRank
int GlobalNamespace::IDifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmap::get_difficultyRank");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::IDifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmap::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_noteJumpStartBeatOffset
float GlobalNamespace::IDifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmap::get_noteJumpStartBeatOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmap.get_beatmapData
GlobalNamespace::BeatmapData* GlobalNamespace::IDifficultyBeatmap::get_beatmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmap::get_beatmapData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapData*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IDifficultyBeatmap::get_level
// Il2CppName: get_level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevel* (IDifficultyBeatmap::*)()>(&IDifficultyBeatmap::get_level)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmap*), "get_level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDifficultyBeatmap::get_parentDifficultyBeatmapSet
// Il2CppName: get_parentDifficultyBeatmapSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmapSet* (IDifficultyBeatmap::*)()>(&IDifficultyBeatmap::get_parentDifficultyBeatmapSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmap*), "get_parentDifficultyBeatmapSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDifficultyBeatmap::get_difficulty
// Il2CppName: get_difficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (IDifficultyBeatmap::*)()>(&IDifficultyBeatmap::get_difficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmap*), "get_difficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDifficultyBeatmap::get_difficultyRank
// Il2CppName: get_difficultyRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IDifficultyBeatmap::*)()>(&IDifficultyBeatmap::get_difficultyRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmap*), "get_difficultyRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDifficultyBeatmap::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IDifficultyBeatmap::*)()>(&IDifficultyBeatmap::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmap*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDifficultyBeatmap::get_noteJumpStartBeatOffset
// Il2CppName: get_noteJumpStartBeatOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IDifficultyBeatmap::*)()>(&IDifficultyBeatmap::get_noteJumpStartBeatOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmap*), "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDifficultyBeatmap::get_beatmapData
// Il2CppName: get_beatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapData* (IDifficultyBeatmap::*)()>(&IDifficultyBeatmap::get_beatmapData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmap*), "get_beatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DifficultyBeatmapSerializedMethods
#include "GlobalNamespace/DifficultyBeatmapSerializedMethods.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DifficultyBeatmapSerializedMethods.SerializedName
::Il2CppString* GlobalNamespace::DifficultyBeatmapSerializedMethods::SerializedName(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyBeatmapSerializedMethods::SerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DifficultyBeatmapSerializedMethods", "SerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, difficultyBeatmap);
}
// Writing MetadataGetter for method: DifficultyBeatmapSerializedMethods::SerializedName
// Il2CppName: SerializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::IDifficultyBeatmap*)>(&DifficultyBeatmapSerializedMethods::SerializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyBeatmapSerializedMethods*), "SerializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDifficultyBeatmapSet.get_beatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::IDifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmapSet::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: IDifficultyBeatmapSet.get_difficultyBeatmaps
::Array<GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::IDifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDifficultyBeatmapSet::get_difficultyBeatmaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IDifficultyBeatmapSet::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (IDifficultyBeatmapSet::*)()>(&IDifficultyBeatmapSet::get_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmapSet*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDifficultyBeatmapSet::get_difficultyBeatmaps
// Il2CppName: get_difficultyBeatmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::IDifficultyBeatmap*>* (IDifficultyBeatmapSet::*)()>(&IDifficultyBeatmapSet::get_difficultyBeatmaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDifficultyBeatmapSet*), "get_difficultyBeatmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DifficultyBeatmapSet
#include "GlobalNamespace/DifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DifficultyBeatmapSet.get_beatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::DifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyBeatmapSet::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: DifficultyBeatmapSet.set_beatmapCharacteristic
void GlobalNamespace::DifficultyBeatmapSet::set_beatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyBeatmapSet::set_beatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DifficultyBeatmapSet.get_difficultyBeatmaps
::Array<GlobalNamespace::IDifficultyBeatmap*>* GlobalNamespace::DifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyBeatmapSet::get_difficultyBeatmaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::IDifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Autogenerated method: DifficultyBeatmapSet.set_difficultyBeatmaps
void GlobalNamespace::DifficultyBeatmapSet::set_difficultyBeatmaps(::Array<GlobalNamespace::IDifficultyBeatmap*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyBeatmapSet::set_difficultyBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: DifficultyBeatmapSet::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (DifficultyBeatmapSet::*)()>(&DifficultyBeatmapSet::get_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyBeatmapSet*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DifficultyBeatmapSet::set_beatmapCharacteristic
// Il2CppName: set_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyBeatmapSet::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&DifficultyBeatmapSet::set_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyBeatmapSet*), "set_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: DifficultyBeatmapSet::get_difficultyBeatmaps
// Il2CppName: get_difficultyBeatmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::IDifficultyBeatmap*>* (DifficultyBeatmapSet::*)()>(&DifficultyBeatmapSet::get_difficultyBeatmaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyBeatmapSet*), "get_difficultyBeatmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DifficultyBeatmapSet::set_difficultyBeatmaps
// Il2CppName: set_difficultyBeatmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyBeatmapSet::*)(::Array<GlobalNamespace::IDifficultyBeatmap*>*)>(&DifficultyBeatmapSet::set_difficultyBeatmaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyBeatmapSet*), "set_difficultyBeatmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::IDifficultyBeatmap*>*>()});
  }
};
// Writing MetadataGetter for method: DifficultyBeatmapSet::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyBeatmapSet::*)(GlobalNamespace::BeatmapCharacteristicSO*, ::Array<GlobalNamespace::IDifficultyBeatmap*>*)>(&DifficultyBeatmapSet::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyBeatmapSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::IDifficultyBeatmap*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyBeatmapSet::*)(GlobalNamespace::BeatmapCharacteristicSO*, ::Array<GlobalNamespace::IDifficultyBeatmap*>*)>(&DifficultyBeatmapSet::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyBeatmapSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::IDifficultyBeatmap*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DifficultyBeatmapSetExtensions
#include "GlobalNamespace/DifficultyBeatmapSetExtensions.hpp"
// Including type: IDifficultyBeatmapSet
#include "GlobalNamespace/IDifficultyBeatmapSet.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DifficultyBeatmapSetExtensions::GetDifficultyBeatmapSetsWithout360Movement
// Il2CppName: GetDifficultyBeatmapSetsWithout360Movement
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: DifficultyBeatmapSetExtensions::GetPreviewDifficultyBeatmapSets
// Il2CppName: GetPreviewDifficultyBeatmapSets
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IPreviewBeatmapLevel.get_levelID
::Il2CppString* GlobalNamespace::IPreviewBeatmapLevel::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songName
::Il2CppString* GlobalNamespace::IPreviewBeatmapLevel::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songSubName
::Il2CppString* GlobalNamespace::IPreviewBeatmapLevel::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songAuthorName
::Il2CppString* GlobalNamespace::IPreviewBeatmapLevel::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_levelAuthorName
::Il2CppString* GlobalNamespace::IPreviewBeatmapLevel::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_beatsPerMinute
float GlobalNamespace::IPreviewBeatmapLevel::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songTimeOffset
float GlobalNamespace::IPreviewBeatmapLevel::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_shuffle
float GlobalNamespace::IPreviewBeatmapLevel::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_shufflePeriod
float GlobalNamespace::IPreviewBeatmapLevel::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_previewStartTime
float GlobalNamespace::IPreviewBeatmapLevel::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_previewDuration
float GlobalNamespace::IPreviewBeatmapLevel::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_songDuration
float GlobalNamespace::IPreviewBeatmapLevel::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_environmentInfo
GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::IPreviewBeatmapLevel::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_allDirectionsEnvironmentInfo
GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::IPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.get_previewDifficultyBeatmapSets
::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::IPreviewBeatmapLevel::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: IPreviewBeatmapLevel.GetPreviewAudioClipAsync
System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* GlobalNamespace::IPreviewBeatmapLevel::GetPreviewAudioClipAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::GetPreviewAudioClipAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: IPreviewBeatmapLevel.GetCoverImageAsync
System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* GlobalNamespace::IPreviewBeatmapLevel::GetCoverImageAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IPreviewBeatmapLevel::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_levelID
// Il2CppName: get_levelID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_levelID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_levelID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_songName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_songSubName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_songAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_levelAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_beatsPerMinute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_songTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_shuffle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_shufflePeriod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_previewStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_previewDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_songDuration
// Il2CppName: get_songDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_songDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_songDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_environmentInfo
// Il2CppName: get_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_environmentInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo
// Il2CppName: get_allDirectionsEnvironmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::get_previewDifficultyBeatmapSets
// Il2CppName: get_previewDifficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* (IPreviewBeatmapLevel::*)()>(&IPreviewBeatmapLevel::get_previewDifficultyBeatmapSets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::GetPreviewAudioClipAsync
// Il2CppName: GetPreviewAudioClipAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* (IPreviewBeatmapLevel::*)(System::Threading::CancellationToken)>(&IPreviewBeatmapLevel::GetPreviewAudioClipAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: IPreviewBeatmapLevel::GetCoverImageAsync
// Il2CppName: GetCoverImageAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* (IPreviewBeatmapLevel::*)(System::Threading::CancellationToken)>(&IPreviewBeatmapLevel::GetCoverImageAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPreviewBeatmapLevel*), "GetCoverImageAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE16D30
// Autogenerated static field getter
// Get static field: static public readonly System.Single[] bpmValues
::Array<float>* GlobalNamespace::LevelFilterParams::_get_bpmValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::_get_bpmValues");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<float>*>("", "LevelFilterParams", "bpmValues"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Single[] bpmValues
void GlobalNamespace::LevelFilterParams::_set_bpmValues(::Array<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::_set_bpmValues");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelFilterParams", "bpmValues", value));
}
// Autogenerated method: LevelFilterParams.get_filterByLevelIds
bool GlobalNamespace::LevelFilterParams::get_filterByLevelIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterByLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByLevelIds
void GlobalNamespace::LevelFilterParams::set_filterByLevelIds(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterByLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_beatmapLevelIds
System::Collections::Generic::HashSet_1<::Il2CppString*>* GlobalNamespace::LevelFilterParams::get_beatmapLevelIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_beatmapLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_beatmapLevelIds
void GlobalNamespace::LevelFilterParams::set_beatmapLevelIds(System::Collections::Generic::HashSet_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_beatmapLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByOwned
bool GlobalNamespace::LevelFilterParams::get_filterByOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterByOwned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByOwned
void GlobalNamespace::LevelFilterParams::set_filterByOwned(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterByOwned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByOwned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_searchText
::Il2CppString* GlobalNamespace::LevelFilterParams::get_searchText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_searchText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_searchText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_searchText
void GlobalNamespace::LevelFilterParams::set_searchText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_searchText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_searchText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByDifficulty
bool GlobalNamespace::LevelFilterParams::get_filterByDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterByDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByDifficulty
void GlobalNamespace::LevelFilterParams::set_filterByDifficulty(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterByDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredDifficulty
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::LevelFilterParams::get_filteredDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filteredDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredDifficulty
void GlobalNamespace::LevelFilterParams::set_filteredDifficulty(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filteredDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterBySongPacks
bool GlobalNamespace::LevelFilterParams::get_filterBySongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterBySongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterBySongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterBySongPacks
void GlobalNamespace::LevelFilterParams::set_filterBySongPacks(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterBySongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterBySongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredSongPacks
GlobalNamespace::SongPackMask GlobalNamespace::LevelFilterParams::get_filteredSongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filteredSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredSongPacks
void GlobalNamespace::LevelFilterParams::set_filteredSongPacks(GlobalNamespace::SongPackMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filteredSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByCharacteristic
bool GlobalNamespace::LevelFilterParams::get_filterByCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterByCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByCharacteristic
void GlobalNamespace::LevelFilterParams::set_filterByCharacteristic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterByCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::LevelFilterParams::get_filteredCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filteredCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredCharacteristic
void GlobalNamespace::LevelFilterParams::set_filteredCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filteredCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByNotPlayedYet
bool GlobalNamespace::LevelFilterParams::get_filterByNotPlayedYet() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterByNotPlayedYet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByNotPlayedYet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByNotPlayedYet
void GlobalNamespace::LevelFilterParams::set_filterByNotPlayedYet(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterByNotPlayedYet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByNotPlayedYet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByMinBpm
bool GlobalNamespace::LevelFilterParams::get_filterByMinBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterByMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByMinBpm
void GlobalNamespace::LevelFilterParams::set_filterByMinBpm(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterByMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredMinBpm
float GlobalNamespace::LevelFilterParams::get_filteredMinBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filteredMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredMinBpm
void GlobalNamespace::LevelFilterParams::set_filteredMinBpm(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filteredMinBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredMinBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filterByMaxBpm
bool GlobalNamespace::LevelFilterParams::get_filterByMaxBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filterByMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filterByMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filterByMaxBpm
void GlobalNamespace::LevelFilterParams::set_filterByMaxBpm(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filterByMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filterByMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.get_filteredMaxBpm
float GlobalNamespace::LevelFilterParams::get_filteredMaxBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::get_filteredMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_filteredMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LevelFilterParams.set_filteredMaxBpm
void GlobalNamespace::LevelFilterParams::set_filteredMaxBpm(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::set_filteredMaxBpm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_filteredMaxBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelFilterParams.IsWithoutFilter
bool GlobalNamespace::LevelFilterParams::IsWithoutFilter(bool ignoreFilterBySongs) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::IsWithoutFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsWithoutFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreFilterBySongs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ignoreFilterBySongs);
}
// Autogenerated method: LevelFilterParams.NoFilter
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::NoFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::NoFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", "NoFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelFilterParams*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LevelFilterParams.ByBeatmapLevelIds
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::ByBeatmapLevelIds(System::Collections::Generic::HashSet_1<::Il2CppString*>* beatmapLevelIds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::ByBeatmapLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", "ByBeatmapLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelIds)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelFilterParams*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapLevelIds);
}
// Autogenerated method: LevelFilterParams.ByBeatmapCharacteristic
GlobalNamespace::LevelFilterParams* GlobalNamespace::LevelFilterParams::ByBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::ByBeatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", "ByBeatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LevelFilterParams*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapCharacteristic);
}
// Autogenerated method: LevelFilterParams..cctor
void GlobalNamespace::LevelFilterParams::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFilterParams::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LevelFilterParams", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: LevelFilterParams::get_filterByLevelIds
// Il2CppName: get_filterByLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterByLevelIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterByLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterByLevelIds
// Il2CppName: set_filterByLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterByLevelIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterByLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_beatmapLevelIds
// Il2CppName: get_beatmapLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::HashSet_1<::Il2CppString*>* (LevelFilterParams::*)()>(&LevelFilterParams::get_beatmapLevelIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_beatmapLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_beatmapLevelIds
// Il2CppName: set_beatmapLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&LevelFilterParams::set_beatmapLevelIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_beatmapLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filterByOwned
// Il2CppName: get_filterByOwned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterByOwned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterByOwned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterByOwned
// Il2CppName: set_filterByOwned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterByOwned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterByOwned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_searchText
// Il2CppName: get_searchText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LevelFilterParams::*)()>(&LevelFilterParams::get_searchText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_searchText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_searchText
// Il2CppName: set_searchText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(::Il2CppString*)>(&LevelFilterParams::set_searchText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_searchText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filterByDifficulty
// Il2CppName: get_filterByDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterByDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterByDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterByDifficulty
// Il2CppName: set_filterByDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterByDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterByDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filteredDifficulty
// Il2CppName: get_filteredDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (LevelFilterParams::*)()>(&LevelFilterParams::get_filteredDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filteredDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filteredDifficulty
// Il2CppName: set_filteredDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(GlobalNamespace::BeatmapDifficultyMask)>(&LevelFilterParams::set_filteredDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filteredDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filterBySongPacks
// Il2CppName: get_filterBySongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterBySongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterBySongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterBySongPacks
// Il2CppName: set_filterBySongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterBySongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterBySongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filteredSongPacks
// Il2CppName: get_filteredSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (LevelFilterParams::*)()>(&LevelFilterParams::get_filteredSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filteredSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filteredSongPacks
// Il2CppName: set_filteredSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(GlobalNamespace::SongPackMask)>(&LevelFilterParams::set_filteredSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filteredSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filterByCharacteristic
// Il2CppName: get_filterByCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterByCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterByCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterByCharacteristic
// Il2CppName: set_filterByCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterByCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterByCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filteredCharacteristic
// Il2CppName: get_filteredCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (LevelFilterParams::*)()>(&LevelFilterParams::get_filteredCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filteredCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filteredCharacteristic
// Il2CppName: set_filteredCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&LevelFilterParams::set_filteredCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filteredCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filterByNotPlayedYet
// Il2CppName: get_filterByNotPlayedYet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterByNotPlayedYet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterByNotPlayedYet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterByNotPlayedYet
// Il2CppName: set_filterByNotPlayedYet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterByNotPlayedYet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterByNotPlayedYet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filterByMinBpm
// Il2CppName: get_filterByMinBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterByMinBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterByMinBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterByMinBpm
// Il2CppName: set_filterByMinBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterByMinBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterByMinBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filteredMinBpm
// Il2CppName: get_filteredMinBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LevelFilterParams::*)()>(&LevelFilterParams::get_filteredMinBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filteredMinBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filteredMinBpm
// Il2CppName: set_filteredMinBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(float)>(&LevelFilterParams::set_filteredMinBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filteredMinBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filterByMaxBpm
// Il2CppName: get_filterByMaxBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)()>(&LevelFilterParams::get_filterByMaxBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filterByMaxBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filterByMaxBpm
// Il2CppName: set_filterByMaxBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool)>(&LevelFilterParams::set_filterByMaxBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filterByMaxBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::get_filteredMaxBpm
// Il2CppName: get_filteredMaxBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LevelFilterParams::*)()>(&LevelFilterParams::get_filteredMaxBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "get_filteredMaxBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::set_filteredMaxBpm
// Il2CppName: set_filteredMaxBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(float)>(&LevelFilterParams::set_filteredMaxBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "set_filteredMaxBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool, System::Collections::Generic::HashSet_1<::Il2CppString*>*, ::Il2CppString*, bool, bool, GlobalNamespace::BeatmapDifficultyMask, bool, GlobalNamespace::BeatmapCharacteristicSO*, bool, GlobalNamespace::SongPackMask, bool, bool, float, bool, float)>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(bool, System::Collections::Generic::HashSet_1<::Il2CppString*>*, ::Il2CppString*, bool, bool, GlobalNamespace::BeatmapDifficultyMask, bool, GlobalNamespace::BeatmapCharacteristicSO*, bool, GlobalNamespace::SongPackMask, bool, bool, float, bool, float)>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::IsWithoutFilter
// Il2CppName: IsWithoutFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelFilterParams::*)(bool)>(&LevelFilterParams::IsWithoutFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "IsWithoutFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::NoFilter
// Il2CppName: NoFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LevelFilterParams* (*)()>(&LevelFilterParams::NoFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "NoFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::ByBeatmapLevelIds
// Il2CppName: ByBeatmapLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LevelFilterParams* (*)(System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&LevelFilterParams::ByBeatmapLevelIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "ByBeatmapLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::ByBeatmapCharacteristic
// Il2CppName: ByBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LevelFilterParams* (*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&LevelFilterParams::ByBeatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), "ByBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LevelFilterParams::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelFilterParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)()>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelFilterParams::*)()>(&LevelFilterParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelFilterParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PreviewBeatmapLevelCollectionSO
#include "GlobalNamespace/PreviewBeatmapLevelCollectionSO.hpp"
// Including type: PreviewBeatmapLevelSO
#include "GlobalNamespace/PreviewBeatmapLevelSO.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PreviewBeatmapLevelCollectionSO.get_beatmapLevels
::Array<GlobalNamespace::IPreviewBeatmapLevel*>* GlobalNamespace::PreviewBeatmapLevelCollectionSO::get_beatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelCollectionSO::get_beatmapLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::IPreviewBeatmapLevel*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PreviewBeatmapLevelCollectionSO::get_beatmapLevels
// Il2CppName: get_beatmapLevels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::IPreviewBeatmapLevel*>* (PreviewBeatmapLevelCollectionSO::*)()>(&PreviewBeatmapLevelCollectionSO::get_beatmapLevels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelCollectionSO*), "get_beatmapLevels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelCollectionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelCollectionSO::*)()>(&PreviewBeatmapLevelCollectionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelCollectionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelCollectionSO::*)()>(&PreviewBeatmapLevelCollectionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelCollectionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PreviewBeatmapLevelPackSO
#include "GlobalNamespace/PreviewBeatmapLevelPackSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: PreviewBeatmapLevelCollectionSO
#include "GlobalNamespace/PreviewBeatmapLevelCollectionSO.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PreviewBeatmapLevelPackSO.get_packID
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelPackSO::get_packID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelPackSO::get_packID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelPackSO.get_packName
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelPackSO::get_packName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelPackSO::get_packName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_packName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelPackSO.get_shortPackName
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelPackSO::get_shortPackName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelPackSO::get_shortPackName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shortPackName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelPackSO.get_collectionName
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelPackSO::get_collectionName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelPackSO::get_collectionName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_collectionName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelPackSO.get_coverImage
UnityEngine::Sprite* GlobalNamespace::PreviewBeatmapLevelPackSO::get_coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelPackSO::get_coverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelPackSO.get_beatmapLevelCollection
GlobalNamespace::IBeatmapLevelCollection* GlobalNamespace::PreviewBeatmapLevelPackSO::get_beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelPackSO::get_beatmapLevelCollection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevelCollection*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PreviewBeatmapLevelPackSO::get_packID
// Il2CppName: get_packID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::get_packID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), "get_packID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelPackSO::get_packName
// Il2CppName: get_packName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::get_packName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), "get_packName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelPackSO::get_shortPackName
// Il2CppName: get_shortPackName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::get_shortPackName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), "get_shortPackName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelPackSO::get_collectionName
// Il2CppName: get_collectionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::get_collectionName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), "get_collectionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelPackSO::get_coverImage
// Il2CppName: get_coverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::get_coverImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), "get_coverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelPackSO::get_beatmapLevelCollection
// Il2CppName: get_beatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelCollection* (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::get_beatmapLevelCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), "get_beatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelPackSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelPackSO::*)()>(&PreviewBeatmapLevelPackSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelPackSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PreviewBeatmapLevelSO
#include "GlobalNamespace/PreviewBeatmapLevelSO.hpp"
// Including type: PreviewBeatmapLevelSO/<GetPreviewAudioClipAsync>d__51
#include "GlobalNamespace/PreviewBeatmapLevelSO_-GetPreviewAudioClipAsync-d__51.hpp"
// Including type: PreviewBeatmapLevelSO/<GetCoverImageAsync>d__52
#include "GlobalNamespace/PreviewBeatmapLevelSO_-GetCoverImageAsync-d__52.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PreviewBeatmapLevelSO.get_levelID
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelSO::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_levelID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_songName
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelSO::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_songName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_songSubName
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelSO::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_songSubName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_songAuthorName
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelSO::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_songAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_levelAuthorName
::Il2CppString* GlobalNamespace::PreviewBeatmapLevelSO::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_levelAuthorName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_beatsPerMinute
float GlobalNamespace::PreviewBeatmapLevelSO::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_beatsPerMinute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_songTimeOffset
float GlobalNamespace::PreviewBeatmapLevelSO::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_songTimeOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_songDuration
float GlobalNamespace::PreviewBeatmapLevelSO::get_songDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_songDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_shuffle
float GlobalNamespace::PreviewBeatmapLevelSO::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_shuffle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_shufflePeriod
float GlobalNamespace::PreviewBeatmapLevelSO::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_shufflePeriod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_previewStartTime
float GlobalNamespace::PreviewBeatmapLevelSO::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_previewStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_previewDuration
float GlobalNamespace::PreviewBeatmapLevelSO::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_previewDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_environmentInfo
GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::PreviewBeatmapLevelSO::get_environmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_environmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_allDirectionsEnvironmentInfo
GlobalNamespace::EnvironmentInfoSO* GlobalNamespace::PreviewBeatmapLevelSO::get_allDirectionsEnvironmentInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_allDirectionsEnvironmentInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentInfoSO*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.get_previewDifficultyBeatmapSets
::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* GlobalNamespace::PreviewBeatmapLevelSO::get_previewDifficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::get_previewDifficultyBeatmapSets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.InitData
void GlobalNamespace::PreviewBeatmapLevelSO::InitData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::InitData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO.GetPreviewAudioClipAsync
System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* GlobalNamespace::PreviewBeatmapLevelSO::GetPreviewAudioClipAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::GetPreviewAudioClipAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: PreviewBeatmapLevelSO.GetCoverImageAsync
System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* GlobalNamespace::PreviewBeatmapLevelSO::GetCoverImageAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::GetCoverImageAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCoverImageAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: PreviewBeatmapLevelSO.OnEnable
void GlobalNamespace::PreviewBeatmapLevelSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_levelID
// Il2CppName: get_levelID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_levelID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_levelID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_songName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_songSubName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_songAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_levelAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_beatsPerMinute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_songTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_songDuration
// Il2CppName: get_songDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_songDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_songDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_shuffle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_shufflePeriod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_previewStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_previewDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_environmentInfo
// Il2CppName: get_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_environmentInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_allDirectionsEnvironmentInfo
// Il2CppName: get_allDirectionsEnvironmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_allDirectionsEnvironmentInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::get_previewDifficultyBeatmapSets
// Il2CppName: get_previewDifficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::get_previewDifficultyBeatmapSets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::InitData
// Il2CppName: InitData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::InitData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "InitData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::GetPreviewAudioClipAsync
// Il2CppName: GetPreviewAudioClipAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* (PreviewBeatmapLevelSO::*)(System::Threading::CancellationToken)>(&PreviewBeatmapLevelSO::GetPreviewAudioClipAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::GetCoverImageAsync
// Il2CppName: GetCoverImageAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* (PreviewBeatmapLevelSO::*)(System::Threading::CancellationToken)>(&PreviewBeatmapLevelSO::GetCoverImageAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "GetCoverImageAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::*)()>(&PreviewBeatmapLevelSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PreviewBeatmapLevelSO/<GetPreviewAudioClipAsync>d__51
#include "GlobalNamespace/PreviewBeatmapLevelSO_-GetPreviewAudioClipAsync-d__51.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PreviewBeatmapLevelSO/<GetPreviewAudioClipAsync>d__51.MoveNext
void GlobalNamespace::PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO/<GetPreviewAudioClipAsync>d__51.SetStateMachine
void GlobalNamespace::PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::*)()>(&PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO::$GetPreviewAudioClipAsync$d__51), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PreviewBeatmapLevelSO/<GetCoverImageAsync>d__52
#include "GlobalNamespace/PreviewBeatmapLevelSO_-GetCoverImageAsync-d__52.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PreviewBeatmapLevelSO/<GetCoverImageAsync>d__52.MoveNext
void GlobalNamespace::PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: PreviewBeatmapLevelSO/<GetCoverImageAsync>d__52.SetStateMachine
void GlobalNamespace::PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::*)()>(&PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewBeatmapLevelSO::$GetCoverImageAsync$d__52), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PreviewDifficultyBeatmapSet
#include "GlobalNamespace/PreviewDifficultyBeatmapSet.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PreviewDifficultyBeatmapSet.get_beatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::PreviewDifficultyBeatmapSet::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewDifficultyBeatmapSet::get_beatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: PreviewDifficultyBeatmapSet.get_beatmapDifficulties
::Array<GlobalNamespace::BeatmapDifficulty>* GlobalNamespace::PreviewDifficultyBeatmapSet::get_beatmapDifficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviewDifficultyBeatmapSet::get_beatmapDifficulties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapDifficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BeatmapDifficulty>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PreviewDifficultyBeatmapSet::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (PreviewDifficultyBeatmapSet::*)()>(&PreviewDifficultyBeatmapSet::get_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewDifficultyBeatmapSet*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewDifficultyBeatmapSet::get_beatmapDifficulties
// Il2CppName: get_beatmapDifficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::BeatmapDifficulty>* (PreviewDifficultyBeatmapSet::*)()>(&PreviewDifficultyBeatmapSet::get_beatmapDifficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewDifficultyBeatmapSet*), "get_beatmapDifficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviewDifficultyBeatmapSet::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewDifficultyBeatmapSet::*)(GlobalNamespace::BeatmapCharacteristicSO*, ::Array<GlobalNamespace::BeatmapDifficulty>*)>(&PreviewDifficultyBeatmapSet::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewDifficultyBeatmapSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::BeatmapDifficulty>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviewDifficultyBeatmapSet::*)(GlobalNamespace::BeatmapCharacteristicSO*, ::Array<GlobalNamespace::BeatmapDifficulty>*)>(&PreviewDifficultyBeatmapSet::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviewDifficultyBeatmapSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::BeatmapDifficulty>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AlphabetScrollbarInfoBeatmapLevelHelper
#include "GlobalNamespace/AlphabetScrollbarInfoBeatmapLevelHelper.hpp"
// Including type: AlphabetScrollbarInfoBeatmapLevelHelper/<>c
#include "GlobalNamespace/AlphabetScrollbarInfoBeatmapLevelHelper_--c.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kFirstAlphabet
::Il2CppString* GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_get_kFirstAlphabet() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_get_kFirstAlphabet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AlphabetScrollbarInfoBeatmapLevelHelper", "kFirstAlphabet"));
}
// Autogenerated static field setter
// Set static field: static private System.String kFirstAlphabet
void GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_set_kFirstAlphabet(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_set_kFirstAlphabet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AlphabetScrollbarInfoBeatmapLevelHelper", "kFirstAlphabet", value));
}
// Autogenerated static field getter
// Get static field: static private System.Char kNonAlphabetChar
::Il2CppChar GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_get_kNonAlphabetChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_get_kNonAlphabetChar");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppChar>("", "AlphabetScrollbarInfoBeatmapLevelHelper", "kNonAlphabetChar"));
}
// Autogenerated static field setter
// Set static field: static private System.Char kNonAlphabetChar
void GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_set_kNonAlphabetChar(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_set_kNonAlphabetChar");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AlphabetScrollbarInfoBeatmapLevelHelper", "kNonAlphabetChar", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxCharactersCount
int GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_get_kMaxCharactersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_get_kMaxCharactersCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AlphabetScrollbarInfoBeatmapLevelHelper", "kMaxCharactersCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxCharactersCount
void GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_set_kMaxCharactersCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::_set_kMaxCharactersCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AlphabetScrollbarInfoBeatmapLevelHelper", "kMaxCharactersCount", value));
}
// Autogenerated method: AlphabetScrollbarInfoBeatmapLevelHelper.CreateData
::Array<GlobalNamespace::AlphabetScrollInfo::Data*>* GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::CreateData(::Array<GlobalNamespace::IPreviewBeatmapLevel*>* previewBeatmapLevels, ::Array<GlobalNamespace::IPreviewBeatmapLevel*>*& sortedPreviewBeatmapLevels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::CreateData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AlphabetScrollbarInfoBeatmapLevelHelper", "CreateData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevels), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::IPreviewBeatmapLevel*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AlphabetScrollInfo::Data*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, previewBeatmapLevels, sortedPreviewBeatmapLevels);
}
// Writing MetadataGetter for method: AlphabetScrollbarInfoBeatmapLevelHelper::CreateData
// Il2CppName: CreateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AlphabetScrollInfo::Data*>* (*)(::Array<GlobalNamespace::IPreviewBeatmapLevel*>*, ::Array<GlobalNamespace::IPreviewBeatmapLevel*>*&)>(&AlphabetScrollbarInfoBeatmapLevelHelper::CreateData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollbarInfoBeatmapLevelHelper*), "CreateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::IPreviewBeatmapLevel*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::IPreviewBeatmapLevel*>*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AlphabetScrollbarInfoBeatmapLevelHelper/<>c
#include "GlobalNamespace/AlphabetScrollbarInfoBeatmapLevelHelper_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly AlphabetScrollbarInfoBeatmapLevelHelper/<>c <>9
GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c* GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c*>("", "AlphabetScrollbarInfoBeatmapLevelHelper/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly AlphabetScrollbarInfoBeatmapLevelHelper/<>c <>9
void GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_set_$$9(GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "AlphabetScrollbarInfoBeatmapLevelHelper/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IPreviewBeatmapLevel,System.String> <>9__3_0
System::Func_2<GlobalNamespace::IPreviewBeatmapLevel*, ::Il2CppString*>* GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IPreviewBeatmapLevel*, ::Il2CppString*>*>("", "AlphabetScrollbarInfoBeatmapLevelHelper/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IPreviewBeatmapLevel,System.String> <>9__3_0
void GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_set_$$9__3_0(System::Func_2<GlobalNamespace::IPreviewBeatmapLevel*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "AlphabetScrollbarInfoBeatmapLevelHelper/<>c", "<>9__3_0", value)));
}
// Autogenerated method: AlphabetScrollbarInfoBeatmapLevelHelper/<>c..cctor
void GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AlphabetScrollbarInfoBeatmapLevelHelper/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: AlphabetScrollbarInfoBeatmapLevelHelper/<>c.<CreateData>b__3_0
::Il2CppString* GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::$CreateData$b__3_0(GlobalNamespace::IPreviewBeatmapLevel* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlphabetScrollbarInfoBeatmapLevelHelper::$$c::<CreateData>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateData>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AlphabetScrollbarInfoBeatmapLevelHelper::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollbarInfoBeatmapLevelHelper::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlphabetScrollbarInfoBeatmapLevelHelper::$$c::$CreateData$b__3_0
// Il2CppName: <CreateData>b__3_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AlphabetScrollbarInfoBeatmapLevelHelper::$$c::*)(GlobalNamespace::IPreviewBeatmapLevel*)>(&AlphabetScrollbarInfoBeatmapLevelHelper::$$c::$CreateData$b__3_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollbarInfoBeatmapLevelHelper::$$c*), "<CreateData>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: AlphabetScrollbarInfoBeatmapLevelHelper::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlphabetScrollbarInfoBeatmapLevelHelper::$$c::*)()>(&AlphabetScrollbarInfoBeatmapLevelHelper::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollbarInfoBeatmapLevelHelper::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlphabetScrollbarInfoBeatmapLevelHelper::$$c::*)()>(&AlphabetScrollbarInfoBeatmapLevelHelper::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollbarInfoBeatmapLevelHelper::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapDataAssetFileModel
#include "GlobalNamespace/IBeatmapDataAssetFileModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapDataAssetFileModel.add_levelDataAssetDownloadUpdateEvent
void GlobalNamespace::IBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapDataAssetFileModel.remove_levelDataAssetDownloadUpdateEvent
void GlobalNamespace::IBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapDataAssetFileModel.GetAssetBundleFileForPreviewLevelAsync
System::Threading::Tasks::Task_1<GlobalNamespace::GetAssetBundleFileResult>* GlobalNamespace::IBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::GetAssetBundleFileResult>*, false>(this, ___internal__method, previewBeatmapLevel, cancellationToken);
}
// Autogenerated method: IBeatmapDataAssetFileModel.TryDeleteAssetBundleFileForPreviewLevelAsync
System::Threading::Tasks::Task_1<bool>* GlobalNamespace::IBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDeleteAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, previewBeatmapLevel, cancellationToken);
}
// Writing MetadataGetter for method: IBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent
// Il2CppName: add_levelDataAssetDownloadUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapDataAssetFileModel::*)(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*)>(&IBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapDataAssetFileModel*), "add_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent
// Il2CppName: remove_levelDataAssetDownloadUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapDataAssetFileModel::*)(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*)>(&IBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapDataAssetFileModel*), "remove_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync
// Il2CppName: GetAssetBundleFileForPreviewLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::GetAssetBundleFileResult>* (IBeatmapDataAssetFileModel::*)(GlobalNamespace::IPreviewBeatmapLevel*, System::Threading::CancellationToken)>(&IBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapDataAssetFileModel*), "GetAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: IBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync
// Il2CppName: TryDeleteAssetBundleFileForPreviewLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (IBeatmapDataAssetFileModel::*)(GlobalNamespace::IPreviewBeatmapLevel*, System::Threading::CancellationToken)>(&IBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapDataAssetFileModel*), "TryDeleteAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GetAssetBundleFileResult
#include "GlobalNamespace/GetAssetBundleFileResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GetAssetBundleFileResult::GetAssetBundleFileResult
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetAssetBundleFileResult::*)(bool, ::Il2CppString*)>(&GetAssetBundleFileResult::GetAssetBundleFileResult<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetAssetBundleFileResult), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GetAssetBundleFileResult::*)(bool, ::Il2CppString*)>(&GetAssetBundleFileResult::GetAssetBundleFileResult<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GetAssetBundleFileResult), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelDataAssetDownloadUpdate
#include "GlobalNamespace/LevelDataAssetDownloadUpdate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LevelDataAssetDownloadUpdate::LevelDataAssetDownloadUpdate
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelDataAssetDownloadUpdate::*)(::Il2CppString*, uint, uint, GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState)>(&LevelDataAssetDownloadUpdate::LevelDataAssetDownloadUpdate<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelDataAssetDownloadUpdate), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelDataAssetDownloadUpdate::*)(::Il2CppString*, uint, uint, GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState)>(&LevelDataAssetDownloadUpdate::LevelDataAssetDownloadUpdate<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelDataAssetDownloadUpdate), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelDataAssetDownloadUpdate/AssetDownloadingState
#include "GlobalNamespace/LevelDataAssetDownloadUpdate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LevelDataAssetDownloadUpdate/AssetDownloadingState PreparingToDownload
GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_get_PreparingToDownload() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_get_PreparingToDownload");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState>("", "LevelDataAssetDownloadUpdate/AssetDownloadingState", "PreparingToDownload"));
}
// Autogenerated static field setter
// Set static field: static public LevelDataAssetDownloadUpdate/AssetDownloadingState PreparingToDownload
void GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_set_PreparingToDownload(GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_set_PreparingToDownload");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelDataAssetDownloadUpdate/AssetDownloadingState", "PreparingToDownload", value));
}
// Autogenerated static field getter
// Get static field: static public LevelDataAssetDownloadUpdate/AssetDownloadingState Downloading
GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_get_Downloading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_get_Downloading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState>("", "LevelDataAssetDownloadUpdate/AssetDownloadingState", "Downloading"));
}
// Autogenerated static field setter
// Set static field: static public LevelDataAssetDownloadUpdate/AssetDownloadingState Downloading
void GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_set_Downloading(GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_set_Downloading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelDataAssetDownloadUpdate/AssetDownloadingState", "Downloading", value));
}
// Autogenerated static field getter
// Get static field: static public LevelDataAssetDownloadUpdate/AssetDownloadingState Completed
GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_get_Completed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_get_Completed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState>("", "LevelDataAssetDownloadUpdate/AssetDownloadingState", "Completed"));
}
// Autogenerated static field setter
// Set static field: static public LevelDataAssetDownloadUpdate/AssetDownloadingState Completed
void GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_set_Completed(GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelDataAssetDownloadUpdate::AssetDownloadingState::_set_Completed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LevelDataAssetDownloadUpdate/AssetDownloadingState", "Completed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TestBeatmapDataAssetFileModel
#include "GlobalNamespace/TestBeatmapDataAssetFileModel.hpp"
// Including type: TestBeatmapDataAssetFileModel/<GetAssetBundleFileForPreviewLevelAsync>d__4
#include "GlobalNamespace/TestBeatmapDataAssetFileModel_-GetAssetBundleFileForPreviewLevelAsync-d__4.hpp"
// Including type: TestBeatmapDataAssetFileModel/<TryDeleteAssetBundleFileForPreviewLevelAsync>d__5
#include "GlobalNamespace/TestBeatmapDataAssetFileModel_-TryDeleteAssetBundleFileForPreviewLevelAsync-d__5.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kAssetsDir
::Il2CppString* GlobalNamespace::TestBeatmapDataAssetFileModel::_get_kAssetsDir() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::_get_kAssetsDir");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "TestBeatmapDataAssetFileModel", "kAssetsDir"));
}
// Autogenerated static field setter
// Set static field: static private System.String kAssetsDir
void GlobalNamespace::TestBeatmapDataAssetFileModel::_set_kAssetsDir(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::_set_kAssetsDir");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TestBeatmapDataAssetFileModel", "kAssetsDir", value));
}
// Autogenerated method: TestBeatmapDataAssetFileModel.add_levelDataAssetDownloadUpdateEvent
void GlobalNamespace::TestBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TestBeatmapDataAssetFileModel.remove_levelDataAssetDownloadUpdateEvent
void GlobalNamespace::TestBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TestBeatmapDataAssetFileModel.GetAssetBundleFileForPreviewLevelAsync
System::Threading::Tasks::Task_1<GlobalNamespace::GetAssetBundleFileResult>* GlobalNamespace::TestBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::GetAssetBundleFileResult>*, false>(this, ___internal__method, previewBeatmapLevel, cancellationToken);
}
// Autogenerated method: TestBeatmapDataAssetFileModel.TryDeleteAssetBundleFileForPreviewLevelAsync
System::Threading::Tasks::Task_1<bool>* GlobalNamespace::TestBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDeleteAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, previewBeatmapLevel, cancellationToken);
}
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent
// Il2CppName: add_levelDataAssetDownloadUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::*)(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*)>(&TestBeatmapDataAssetFileModel::add_levelDataAssetDownloadUpdateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel*), "add_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*>()});
  }
};
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent
// Il2CppName: remove_levelDataAssetDownloadUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::*)(System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*)>(&TestBeatmapDataAssetFileModel::remove_levelDataAssetDownloadUpdateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel*), "remove_levelDataAssetDownloadUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelDataAssetDownloadUpdate>*>()});
  }
};
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync
// Il2CppName: GetAssetBundleFileForPreviewLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::GetAssetBundleFileResult>* (TestBeatmapDataAssetFileModel::*)(GlobalNamespace::IPreviewBeatmapLevel*, System::Threading::CancellationToken)>(&TestBeatmapDataAssetFileModel::GetAssetBundleFileForPreviewLevelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel*), "GetAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync
// Il2CppName: TryDeleteAssetBundleFileForPreviewLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (TestBeatmapDataAssetFileModel::*)(GlobalNamespace::IPreviewBeatmapLevel*, System::Threading::CancellationToken)>(&TestBeatmapDataAssetFileModel::TryDeleteAssetBundleFileForPreviewLevelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel*), "TryDeleteAssetBundleFileForPreviewLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::*)()>(&TestBeatmapDataAssetFileModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::*)()>(&TestBeatmapDataAssetFileModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TestBeatmapDataAssetFileModel/<GetAssetBundleFileForPreviewLevelAsync>d__4
#include "GlobalNamespace/TestBeatmapDataAssetFileModel_-GetAssetBundleFileForPreviewLevelAsync-d__4.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TestBeatmapDataAssetFileModel/<GetAssetBundleFileForPreviewLevelAsync>d__4.MoveNext
void GlobalNamespace::TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: TestBeatmapDataAssetFileModel/<GetAssetBundleFileForPreviewLevelAsync>d__4.SetStateMachine
void GlobalNamespace::TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::*)()>(&TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel::$GetAssetBundleFileForPreviewLevelAsync$d__4), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TestBeatmapDataAssetFileModel/<TryDeleteAssetBundleFileForPreviewLevelAsync>d__5
#include "GlobalNamespace/TestBeatmapDataAssetFileModel_-TryDeleteAssetBundleFileForPreviewLevelAsync-d__5.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TestBeatmapDataAssetFileModel/<TryDeleteAssetBundleFileForPreviewLevelAsync>d__5.MoveNext
void GlobalNamespace::TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: TestBeatmapDataAssetFileModel/<TryDeleteAssetBundleFileForPreviewLevelAsync>d__5.SetStateMachine
void GlobalNamespace::TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::*)()>(&TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestBeatmapDataAssetFileModel::$TryDeleteAssetBundleFileForPreviewLevelAsync$d__5), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IAnnotatedBeatmapLevelCollection
#include "GlobalNamespace/IAnnotatedBeatmapLevelCollection.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAnnotatedBeatmapLevelCollection.get_collectionName
::Il2CppString* GlobalNamespace::IAnnotatedBeatmapLevelCollection::get_collectionName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnnotatedBeatmapLevelCollection::get_collectionName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_collectionName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IAnnotatedBeatmapLevelCollection.get_coverImage
UnityEngine::Sprite* GlobalNamespace::IAnnotatedBeatmapLevelCollection::get_coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnnotatedBeatmapLevelCollection::get_coverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: IAnnotatedBeatmapLevelCollection.get_beatmapLevelCollection
GlobalNamespace::IBeatmapLevelCollection* GlobalNamespace::IAnnotatedBeatmapLevelCollection::get_beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAnnotatedBeatmapLevelCollection::get_beatmapLevelCollection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevelCollection*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IAnnotatedBeatmapLevelCollection::get_collectionName
// Il2CppName: get_collectionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IAnnotatedBeatmapLevelCollection::*)()>(&IAnnotatedBeatmapLevelCollection::get_collectionName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnnotatedBeatmapLevelCollection*), "get_collectionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IAnnotatedBeatmapLevelCollection::get_coverImage
// Il2CppName: get_coverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (IAnnotatedBeatmapLevelCollection::*)()>(&IAnnotatedBeatmapLevelCollection::get_coverImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnnotatedBeatmapLevelCollection*), "get_coverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IAnnotatedBeatmapLevelCollection::get_beatmapLevelCollection
// Il2CppName: get_beatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelCollection* (IAnnotatedBeatmapLevelCollection::*)()>(&IAnnotatedBeatmapLevelCollection::get_beatmapLevelCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAnnotatedBeatmapLevelCollection*), "get_beatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlaylistSO
#include "GlobalNamespace/PlaylistSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: BeatmapLevelCollectionSO
#include "GlobalNamespace/BeatmapLevelCollectionSO.hpp"
// Including type: IBeatmapLevelCollection
#include "GlobalNamespace/IBeatmapLevelCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlaylistSO.get_collectionName
::Il2CppString* GlobalNamespace::PlaylistSO::get_collectionName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlaylistSO::get_collectionName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_collectionName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlaylistSO.get_coverImage
UnityEngine::Sprite* GlobalNamespace::PlaylistSO::get_coverImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlaylistSO::get_coverImage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: PlaylistSO.get_beatmapLevelCollection
GlobalNamespace::IBeatmapLevelCollection* GlobalNamespace::PlaylistSO::get_beatmapLevelCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlaylistSO::get_beatmapLevelCollection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevelCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevelCollection*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlaylistSO::get_collectionName
// Il2CppName: get_collectionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlaylistSO::*)()>(&PlaylistSO::get_collectionName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlaylistSO*), "get_collectionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlaylistSO::get_coverImage
// Il2CppName: get_coverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (PlaylistSO::*)()>(&PlaylistSO::get_coverImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlaylistSO*), "get_coverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlaylistSO::get_beatmapLevelCollection
// Il2CppName: get_beatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelCollection* (PlaylistSO::*)()>(&PlaylistSO::get_beatmapLevelCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlaylistSO*), "get_beatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlaylistSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlaylistSO::*)()>(&PlaylistSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlaylistSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlaylistSO::*)()>(&PlaylistSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlaylistSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelInfoSaveData
#include "GlobalNamespace/StandardLevelInfoSaveData.hpp"
// Including type: StandardLevelInfoSaveData/DifficultyBeatmapSet
#include "GlobalNamespace/StandardLevelInfoSaveData_DifficultyBeatmapSet.hpp"
// Including type: StandardLevelInfoSaveData/DifficultyBeatmap
#include "GlobalNamespace/StandardLevelInfoSaveData_DifficultyBeatmap.hpp"
// Including type: StandardLevelInfoSaveData/VersionCheck
#include "GlobalNamespace/StandardLevelInfoSaveData_VersionCheck.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCurrentVersion
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::_get_kCurrentVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::_get_kCurrentVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "StandardLevelInfoSaveData", "kCurrentVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCurrentVersion
void GlobalNamespace::StandardLevelInfoSaveData::_set_kCurrentVersion(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::_set_kCurrentVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelInfoSaveData", "kCurrentVersion", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDefaultBeatmapCharacteristicName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::_get_kDefaultBeatmapCharacteristicName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::_get_kDefaultBeatmapCharacteristicName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "StandardLevelInfoSaveData", "kDefaultBeatmapCharacteristicName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDefaultBeatmapCharacteristicName
void GlobalNamespace::StandardLevelInfoSaveData::_set_kDefaultBeatmapCharacteristicName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::_set_kDefaultBeatmapCharacteristicName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelInfoSaveData", "kDefaultBeatmapCharacteristicName", value));
}
// Autogenerated method: StandardLevelInfoSaveData.get_version
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_songName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_songName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_songSubName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_songSubName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_songAuthorName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_songAuthorName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_levelAuthorName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_levelAuthorName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_beatsPerMinute
float GlobalNamespace::StandardLevelInfoSaveData::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_beatsPerMinute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_songTimeOffset
float GlobalNamespace::StandardLevelInfoSaveData::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_songTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_shuffle
float GlobalNamespace::StandardLevelInfoSaveData::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_shuffle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_shufflePeriod
float GlobalNamespace::StandardLevelInfoSaveData::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_shufflePeriod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_previewStartTime
float GlobalNamespace::StandardLevelInfoSaveData::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_previewStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_previewDuration
float GlobalNamespace::StandardLevelInfoSaveData::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_previewDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_songFilename
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_songFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_songFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_coverImageFilename
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_coverImageFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_coverImageFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImageFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_environmentName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_environmentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_environmentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_allDirectionsEnvironmentName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::get_allDirectionsEnvironmentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_allDirectionsEnvironmentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allDirectionsEnvironmentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_difficultyBeatmapSets
::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet*>* GlobalNamespace::StandardLevelInfoSaveData::get_difficultyBeatmapSets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_difficultyBeatmapSets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmapSets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet*>*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.get_hasAllData
bool GlobalNamespace::StandardLevelInfoSaveData::get_hasAllData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::get_hasAllData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasAllData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.SetSongFilename
void GlobalNamespace::StandardLevelInfoSaveData::SetSongFilename(::Il2CppString* songFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::SetSongFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSongFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songFilename)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songFilename);
}
// Autogenerated method: StandardLevelInfoSaveData.SerializeToJSONString
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::SerializeToJSONString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::SerializeToJSONString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeToJSONString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData.DeserializeFromJSONString
GlobalNamespace::StandardLevelInfoSaveData* GlobalNamespace::StandardLevelInfoSaveData::DeserializeFromJSONString(::Il2CppString* stringData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DeserializeFromJSONString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StandardLevelInfoSaveData", "DeserializeFromJSONString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardLevelInfoSaveData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stringData);
}
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_songName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_songSubName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_songAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_levelAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_beatsPerMinute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_songTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_shuffle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_shufflePeriod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_previewStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_previewDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_songFilename
// Il2CppName: get_songFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_songFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_songFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_coverImageFilename
// Il2CppName: get_coverImageFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_coverImageFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_coverImageFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_environmentName
// Il2CppName: get_environmentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_environmentName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_environmentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_allDirectionsEnvironmentName
// Il2CppName: get_allDirectionsEnvironmentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_allDirectionsEnvironmentName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_allDirectionsEnvironmentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_difficultyBeatmapSets
// Il2CppName: get_difficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet*>* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_difficultyBeatmapSets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_difficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, float, float, float, float, float, float, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet*>*)>(&StandardLevelInfoSaveData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, float, float, float, float, float, float, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet*>*)>(&StandardLevelInfoSaveData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet*>*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::get_hasAllData
// Il2CppName: get_hasAllData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::get_hasAllData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "get_hasAllData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::SetSongFilename
// Il2CppName: SetSongFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::*)(::Il2CppString*)>(&StandardLevelInfoSaveData::SetSongFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "SetSongFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::SerializeToJSONString
// Il2CppName: SerializeToJSONString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::*)()>(&StandardLevelInfoSaveData::SerializeToJSONString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "SerializeToJSONString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DeserializeFromJSONString
// Il2CppName: DeserializeFromJSONString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardLevelInfoSaveData* (*)(::Il2CppString*)>(&StandardLevelInfoSaveData::DeserializeFromJSONString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData*), "DeserializeFromJSONString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelInfoSaveData/DifficultyBeatmapSet
#include "GlobalNamespace/StandardLevelInfoSaveData_DifficultyBeatmapSet.hpp"
// Including type: StandardLevelInfoSaveData/DifficultyBeatmap
#include "GlobalNamespace/StandardLevelInfoSaveData_DifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelInfoSaveData/DifficultyBeatmapSet.get_beatmapCharacteristicName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet::get_beatmapCharacteristicName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet::get_beatmapCharacteristicName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristicName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData/DifficultyBeatmapSet.get_difficultyBeatmaps
::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap*>* GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmapSet::get_difficultyBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmapSet::get_beatmapCharacteristicName
// Il2CppName: get_beatmapCharacteristicName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::DifficultyBeatmapSet::*)()>(&StandardLevelInfoSaveData::DifficultyBeatmapSet::get_beatmapCharacteristicName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmapSet*), "get_beatmapCharacteristicName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmapSet::get_difficultyBeatmaps
// Il2CppName: get_difficultyBeatmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap*>* (StandardLevelInfoSaveData::DifficultyBeatmapSet::*)()>(&StandardLevelInfoSaveData::DifficultyBeatmapSet::get_difficultyBeatmaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmapSet*), "get_difficultyBeatmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmapSet::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::DifficultyBeatmapSet::*)(::Il2CppString*, ::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap*>*)>(&StandardLevelInfoSaveData::DifficultyBeatmapSet::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmapSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::DifficultyBeatmapSet::*)(::Il2CppString*, ::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap*>*)>(&StandardLevelInfoSaveData::DifficultyBeatmapSet::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmapSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelInfoSaveData/DifficultyBeatmap
#include "GlobalNamespace/StandardLevelInfoSaveData_DifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelInfoSaveData/DifficultyBeatmap.get_difficulty
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_difficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData/DifficultyBeatmap.get_difficultyRank
int GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_difficultyRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData/DifficultyBeatmap.get_beatmapFilename
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_beatmapFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_beatmapFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData/DifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpMovementSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData/DifficultyBeatmap.get_noteJumpStartBeatOffset
float GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpStartBeatOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmap::get_difficulty
// Il2CppName: get_difficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData::DifficultyBeatmap::get_difficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmap*), "get_difficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmap::get_difficultyRank
// Il2CppName: get_difficultyRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StandardLevelInfoSaveData::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData::DifficultyBeatmap::get_difficultyRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmap*), "get_difficultyRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmap::get_beatmapFilename
// Il2CppName: get_beatmapFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData::DifficultyBeatmap::get_beatmapFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmap*), "get_beatmapFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmap*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpStartBeatOffset
// Il2CppName: get_noteJumpStartBeatOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData::DifficultyBeatmap::get_noteJumpStartBeatOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmap*), "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::DifficultyBeatmap::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::DifficultyBeatmap::*)(::Il2CppString*, int, ::Il2CppString*, float, float)>(&StandardLevelInfoSaveData::DifficultyBeatmap::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::DifficultyBeatmap::*)(::Il2CppString*, int, ::Il2CppString*, float, float)>(&StandardLevelInfoSaveData::DifficultyBeatmap::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::DifficultyBeatmap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelInfoSaveData/VersionCheck
#include "GlobalNamespace/StandardLevelInfoSaveData_VersionCheck.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelInfoSaveData/VersionCheck.get_version
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData::VersionCheck::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData::VersionCheck::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardLevelInfoSaveData::VersionCheck::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData::VersionCheck::*)()>(&StandardLevelInfoSaveData::VersionCheck::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::VersionCheck*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData::VersionCheck::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::VersionCheck::*)()>(&StandardLevelInfoSaveData::VersionCheck::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::VersionCheck*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData::VersionCheck::*)()>(&StandardLevelInfoSaveData::VersionCheck::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData::VersionCheck*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelInfoSaveData_V100
#include "GlobalNamespace/StandardLevelInfoSaveData_V100.hpp"
// Including type: StandardLevelInfoSaveData_V100/DifficultyBeatmap
#include "GlobalNamespace/StandardLevelInfoSaveData_V100_DifficultyBeatmap.hpp"
// Including type: StandardLevelInfoSaveData_V100/VersionCheck
#include "GlobalNamespace/StandardLevelInfoSaveData_V100_VersionCheck.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: StandardLevelInfoSaveData
#include "GlobalNamespace/StandardLevelInfoSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String kCurrentVersion
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::_get_kCurrentVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::_get_kCurrentVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "StandardLevelInfoSaveData_V100", "kCurrentVersion"));
}
// Autogenerated static field setter
// Set static field: static public System.String kCurrentVersion
void GlobalNamespace::StandardLevelInfoSaveData_V100::_set_kCurrentVersion(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::_set_kCurrentVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelInfoSaveData_V100", "kCurrentVersion", value));
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_version
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_songName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_songName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_songName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_songSubName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_songSubName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_songSubName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSubName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_songAuthorName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_songAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_songAuthorName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_levelAuthorName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_levelAuthorName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_levelAuthorName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelAuthorName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_beatsPerMinute
float GlobalNamespace::StandardLevelInfoSaveData_V100::get_beatsPerMinute() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_beatsPerMinute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatsPerMinute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_songTimeOffset
float GlobalNamespace::StandardLevelInfoSaveData_V100::get_songTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_songTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_shuffle
float GlobalNamespace::StandardLevelInfoSaveData_V100::get_shuffle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_shuffle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shuffle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_shufflePeriod
float GlobalNamespace::StandardLevelInfoSaveData_V100::get_shufflePeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_shufflePeriod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shufflePeriod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_previewStartTime
float GlobalNamespace::StandardLevelInfoSaveData_V100::get_previewStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_previewStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_previewDuration
float GlobalNamespace::StandardLevelInfoSaveData_V100::get_previewDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_previewDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_songFilename
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_songFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_songFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_coverImageFilename
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_coverImageFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_coverImageFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_coverImageFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_environmentName
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::get_environmentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_environmentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_difficultyBeatmaps
::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>* GlobalNamespace::StandardLevelInfoSaveData_V100::get_difficultyBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_difficultyBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.get_hasAllData
bool GlobalNamespace::StandardLevelInfoSaveData_V100::get_hasAllData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::get_hasAllData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasAllData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.SetSongFilename
void GlobalNamespace::StandardLevelInfoSaveData_V100::SetSongFilename(::Il2CppString* songFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::SetSongFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSongFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songFilename)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songFilename);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.SerializeToJSONString
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::SerializeToJSONString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::SerializeToJSONString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SerializeToJSONString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100.DeserializeFromJSONString
GlobalNamespace::StandardLevelInfoSaveData* GlobalNamespace::StandardLevelInfoSaveData_V100::DeserializeFromJSONString(::Il2CppString* stringData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::DeserializeFromJSONString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StandardLevelInfoSaveData_V100", "DeserializeFromJSONString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardLevelInfoSaveData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stringData);
}
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_songName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_songSubName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_songAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_levelAuthorName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_beatsPerMinute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_songTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_shuffle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_shufflePeriod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_previewStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_previewDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_songFilename
// Il2CppName: get_songFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_songFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_songFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_coverImageFilename
// Il2CppName: get_coverImageFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_coverImageFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_coverImageFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_environmentName
// Il2CppName: get_environmentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_environmentName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_environmentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_difficultyBeatmaps
// Il2CppName: get_difficultyBeatmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_difficultyBeatmaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_difficultyBeatmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData_V100::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, float, float, float, float, float, float, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>*)>(&StandardLevelInfoSaveData_V100::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData_V100::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, float, float, float, float, float, float, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>*)>(&StandardLevelInfoSaveData_V100::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::get_hasAllData
// Il2CppName: get_hasAllData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::get_hasAllData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "get_hasAllData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::SetSongFilename
// Il2CppName: SetSongFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData_V100::*)(::Il2CppString*)>(&StandardLevelInfoSaveData_V100::SetSongFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "SetSongFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::SerializeToJSONString
// Il2CppName: SerializeToJSONString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::*)()>(&StandardLevelInfoSaveData_V100::SerializeToJSONString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "SerializeToJSONString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::DeserializeFromJSONString
// Il2CppName: DeserializeFromJSONString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardLevelInfoSaveData* (*)(::Il2CppString*)>(&StandardLevelInfoSaveData_V100::DeserializeFromJSONString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100*), "DeserializeFromJSONString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelInfoSaveData_V100/DifficultyBeatmap
#include "GlobalNamespace/StandardLevelInfoSaveData_V100_DifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelInfoSaveData_V100/DifficultyBeatmap.get_difficulty
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100/DifficultyBeatmap.get_difficultyRank
int GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficultyRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficultyRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100/DifficultyBeatmap.get_beatmapFilename
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_beatmapFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_beatmapFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100/DifficultyBeatmap.get_noteJumpMovementSpeed
float GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpMovementSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelInfoSaveData_V100/DifficultyBeatmap.get_noteJumpStartBeatOffset
int GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpStartBeatOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficulty
// Il2CppName: get_difficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::DifficultyBeatmap*), "get_difficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficultyRank
// Il2CppName: get_difficultyRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StandardLevelInfoSaveData_V100::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_difficultyRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::DifficultyBeatmap*), "get_difficultyRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_beatmapFilename
// Il2CppName: get_beatmapFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_beatmapFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::DifficultyBeatmap*), "get_beatmapFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (StandardLevelInfoSaveData_V100::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::DifficultyBeatmap*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpStartBeatOffset
// Il2CppName: get_noteJumpStartBeatOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StandardLevelInfoSaveData_V100::DifficultyBeatmap::*)()>(&StandardLevelInfoSaveData_V100::DifficultyBeatmap::get_noteJumpStartBeatOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::DifficultyBeatmap*), "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::DifficultyBeatmap::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData_V100::DifficultyBeatmap::*)(::Il2CppString*, int, ::Il2CppString*, float, int)>(&StandardLevelInfoSaveData_V100::DifficultyBeatmap::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::DifficultyBeatmap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData_V100::DifficultyBeatmap::*)(::Il2CppString*, int, ::Il2CppString*, float, int)>(&StandardLevelInfoSaveData_V100::DifficultyBeatmap::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::DifficultyBeatmap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelInfoSaveData_V100/VersionCheck
#include "GlobalNamespace/StandardLevelInfoSaveData_V100_VersionCheck.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelInfoSaveData_V100/VersionCheck.get_version
::Il2CppString* GlobalNamespace::StandardLevelInfoSaveData_V100::VersionCheck::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelInfoSaveData_V100::VersionCheck::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::VersionCheck::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StandardLevelInfoSaveData_V100::VersionCheck::*)()>(&StandardLevelInfoSaveData_V100::VersionCheck::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::VersionCheck*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelInfoSaveData_V100::VersionCheck::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData_V100::VersionCheck::*)()>(&StandardLevelInfoSaveData_V100::VersionCheck::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::VersionCheck*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelInfoSaveData_V100::VersionCheck::*)()>(&StandardLevelInfoSaveData_V100::VersionCheck::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelInfoSaveData_V100::VersionCheck*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassGraphicsSettingsPresetsSO
#include "GlobalNamespace/BloomPrePassGraphicsSettingsPresetsSO.hpp"
// Including type: BloomPrePassGraphicsSettingsPresetsSO/Preset
#include "GlobalNamespace/BloomPrePassGraphicsSettingsPresetsSO_Preset.hpp"
// Including type: NamedPreset
#include "GlobalNamespace/NamedPreset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassGraphicsSettingsPresetsSO.get_presets
::Array<GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO::Preset*>* GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO::get_presets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO::get_presets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_presets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO::Preset*>*, false>(this, ___internal__method);
}
// Autogenerated method: BloomPrePassGraphicsSettingsPresetsSO.get_namedPresets
::Array<GlobalNamespace::NamedPreset*>* GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO::get_namedPresets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO::get_namedPresets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_namedPresets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::NamedPreset*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassGraphicsSettingsPresetsSO::get_presets
// Il2CppName: get_presets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO::Preset*>* (BloomPrePassGraphicsSettingsPresetsSO::*)()>(&BloomPrePassGraphicsSettingsPresetsSO::get_presets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassGraphicsSettingsPresetsSO*), "get_presets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassGraphicsSettingsPresetsSO::get_namedPresets
// Il2CppName: get_namedPresets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::NamedPreset*>* (BloomPrePassGraphicsSettingsPresetsSO::*)()>(&BloomPrePassGraphicsSettingsPresetsSO::get_namedPresets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassGraphicsSettingsPresetsSO*), "get_namedPresets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassGraphicsSettingsPresetsSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassGraphicsSettingsPresetsSO::*)()>(&BloomPrePassGraphicsSettingsPresetsSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassGraphicsSettingsPresetsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassGraphicsSettingsPresetsSO::*)()>(&BloomPrePassGraphicsSettingsPresetsSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassGraphicsSettingsPresetsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassGraphicsSettingsPresetsSO/Preset
#include "GlobalNamespace/BloomPrePassGraphicsSettingsPresetsSO_Preset.hpp"
// Including type: BloomPrePassEffectSO
#include "GlobalNamespace/BloomPrePassEffectSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BloomPrePassGraphicsSettingsPresetsSO::Preset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassGraphicsSettingsPresetsSO::Preset::*)()>(&BloomPrePassGraphicsSettingsPresetsSO::Preset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassGraphicsSettingsPresetsSO::Preset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassGraphicsSettingsPresetsSO::Preset::*)()>(&BloomPrePassGraphicsSettingsPresetsSO::Preset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassGraphicsSettingsPresetsSO::Preset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MainEffectGraphicsSettingsPresetsSO
#include "GlobalNamespace/MainEffectGraphicsSettingsPresetsSO.hpp"
// Including type: MainEffectGraphicsSettingsPresetsSO/Preset
#include "GlobalNamespace/MainEffectGraphicsSettingsPresetsSO_Preset.hpp"
// Including type: NamedPreset
#include "GlobalNamespace/NamedPreset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainEffectGraphicsSettingsPresetsSO.get_presets
::Array<GlobalNamespace::MainEffectGraphicsSettingsPresetsSO::Preset*>* GlobalNamespace::MainEffectGraphicsSettingsPresetsSO::get_presets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectGraphicsSettingsPresetsSO::get_presets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_presets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::MainEffectGraphicsSettingsPresetsSO::Preset*>*, false>(this, ___internal__method);
}
// Autogenerated method: MainEffectGraphicsSettingsPresetsSO.get_namedPresets
::Array<GlobalNamespace::NamedPreset*>* GlobalNamespace::MainEffectGraphicsSettingsPresetsSO::get_namedPresets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainEffectGraphicsSettingsPresetsSO::get_namedPresets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_namedPresets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::NamedPreset*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainEffectGraphicsSettingsPresetsSO::get_presets
// Il2CppName: get_presets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::MainEffectGraphicsSettingsPresetsSO::Preset*>* (MainEffectGraphicsSettingsPresetsSO::*)()>(&MainEffectGraphicsSettingsPresetsSO::get_presets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectGraphicsSettingsPresetsSO*), "get_presets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectGraphicsSettingsPresetsSO::get_namedPresets
// Il2CppName: get_namedPresets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::NamedPreset*>* (MainEffectGraphicsSettingsPresetsSO::*)()>(&MainEffectGraphicsSettingsPresetsSO::get_namedPresets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectGraphicsSettingsPresetsSO*), "get_namedPresets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainEffectGraphicsSettingsPresetsSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectGraphicsSettingsPresetsSO::*)()>(&MainEffectGraphicsSettingsPresetsSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectGraphicsSettingsPresetsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectGraphicsSettingsPresetsSO::*)()>(&MainEffectGraphicsSettingsPresetsSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectGraphicsSettingsPresetsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainEffectGraphicsSettingsPresetsSO/Preset
#include "GlobalNamespace/MainEffectGraphicsSettingsPresetsSO_Preset.hpp"
// Including type: MainEffectSO
#include "GlobalNamespace/MainEffectSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MainEffectGraphicsSettingsPresetsSO::Preset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectGraphicsSettingsPresetsSO::Preset::*)()>(&MainEffectGraphicsSettingsPresetsSO::Preset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectGraphicsSettingsPresetsSO::Preset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainEffectGraphicsSettingsPresetsSO::Preset::*)()>(&MainEffectGraphicsSettingsPresetsSO::Preset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainEffectGraphicsSettingsPresetsSO::Preset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainSettingsBestGraphicsValues
#include "GlobalNamespace/MainSettingsBestGraphicsValues.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainSettingsBestGraphicsValues.ApplyValues
void GlobalNamespace::MainSettingsBestGraphicsValues::ApplyValues(GlobalNamespace::MainSettingsModelSO* mainSettingsModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsBestGraphicsValues::ApplyValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MainSettingsBestGraphicsValues", "ApplyValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainSettingsModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mainSettingsModel);
}
// Writing MetadataGetter for method: MainSettingsBestGraphicsValues::ApplyValues
// Il2CppName: ApplyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::MainSettingsModelSO*)>(&MainSettingsBestGraphicsValues::ApplyValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsBestGraphicsValues*), "ApplyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MainSettingsModelSO*>()});
  }
};
// Writing MetadataGetter for method: MainSettingsBestGraphicsValues::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsBestGraphicsValues::*)()>(&MainSettingsBestGraphicsValues::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsBestGraphicsValues*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsBestGraphicsValues::*)()>(&MainSettingsBestGraphicsValues::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsBestGraphicsValues*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MainSettingsDefaultValues
#include "GlobalNamespace/MainSettingsDefaultValues.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultRoomCenterX
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultRoomCenterX() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultRoomCenterX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultRoomCenterX"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultRoomCenterX
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultRoomCenterX(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultRoomCenterX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultRoomCenterX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultRoomCenterY
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultRoomCenterY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultRoomCenterY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultRoomCenterY"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultRoomCenterY
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultRoomCenterY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultRoomCenterY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultRoomCenterY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultRoomCenterZ
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultRoomCenterZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultRoomCenterZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultRoomCenterZ"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultRoomCenterZ
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultRoomCenterZ(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultRoomCenterZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultRoomCenterZ", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultControllerPositionX
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerPositionX() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerPositionX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultControllerPositionX"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultControllerPositionX
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerPositionX(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerPositionX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultControllerPositionX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultControllerPositionY
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerPositionY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerPositionY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultControllerPositionY"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultControllerPositionY
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerPositionY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerPositionY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultControllerPositionY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultControllerPositionZ
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerPositionZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerPositionZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultControllerPositionZ"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultControllerPositionZ
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerPositionZ(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerPositionZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultControllerPositionZ", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultControllerRotationX
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerRotationX() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerRotationX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultControllerRotationX"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultControllerRotationX
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerRotationX(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerRotationX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultControllerRotationX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultControllerRotationY
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerRotationY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerRotationY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultControllerRotationY"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultControllerRotationY
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerRotationY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerRotationY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultControllerRotationY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultControllerRotationZ
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerRotationZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultControllerRotationZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultControllerRotationZ"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultControllerRotationZ
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerRotationZ(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultControllerRotationZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultControllerRotationZ", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kDefaultWindowResolutionWidth
int GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultWindowResolutionWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultWindowResolutionWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kDefaultWindowResolutionWidth"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDefaultWindowResolutionWidth
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultWindowResolutionWidth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultWindowResolutionWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultWindowResolutionWidth", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kDefaultWindowResolutionHeight
int GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultWindowResolutionHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultWindowResolutionHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kDefaultWindowResolutionHeight"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDefaultWindowResolutionHeight
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultWindowResolutionHeight(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultWindowResolutionHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultWindowResolutionHeight", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kDefaultMirrorGraphicsSettings
int GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultMirrorGraphicsSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultMirrorGraphicsSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kDefaultMirrorGraphicsSettings"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDefaultMirrorGraphicsSettings
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultMirrorGraphicsSettings(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultMirrorGraphicsSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultMirrorGraphicsSettings", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kDefaultMainEffectGraphicsSettings
int GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultMainEffectGraphicsSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultMainEffectGraphicsSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kDefaultMainEffectGraphicsSettings"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDefaultMainEffectGraphicsSettings
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultMainEffectGraphicsSettings(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultMainEffectGraphicsSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultMainEffectGraphicsSettings", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kDefaultBloomGraphicsSettings
int GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultBloomGraphicsSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultBloomGraphicsSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kDefaultBloomGraphicsSettings"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDefaultBloomGraphicsSettings
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultBloomGraphicsSettings(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultBloomGraphicsSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultBloomGraphicsSettings", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean kDefaultSmokeGraphicsSettings
bool GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultSmokeGraphicsSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultSmokeGraphicsSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "MainSettingsDefaultValues", "kDefaultSmokeGraphicsSettings"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean kDefaultSmokeGraphicsSettings
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultSmokeGraphicsSettings(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultSmokeGraphicsSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultSmokeGraphicsSettings", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kDefaultAntiAliasingLevel
int GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultAntiAliasingLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultAntiAliasingLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kDefaultAntiAliasingLevel"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDefaultAntiAliasingLevel
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultAntiAliasingLevel(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultAntiAliasingLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultAntiAliasingLevel", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultVrResolutionScale
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultVrResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultVrResolutionScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultVrResolutionScale"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultVrResolutionScale
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultVrResolutionScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultVrResolutionScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultVrResolutionScale", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultMenuVRResolutionScaleMultiplier
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultMenuVRResolutionScaleMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultMenuVRResolutionScaleMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultMenuVRResolutionScaleMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultMenuVRResolutionScaleMultiplier
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultMenuVRResolutionScaleMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultMenuVRResolutionScaleMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultMenuVRResolutionScaleMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean kDefaultUseFixedFoveatedRenderingDuringGameplay
bool GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultUseFixedFoveatedRenderingDuringGameplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultUseFixedFoveatedRenderingDuringGameplay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "MainSettingsDefaultValues", "kDefaultUseFixedFoveatedRenderingDuringGameplay"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean kDefaultUseFixedFoveatedRenderingDuringGameplay
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultUseFixedFoveatedRenderingDuringGameplay(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultUseFixedFoveatedRenderingDuringGameplay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultUseFixedFoveatedRenderingDuringGameplay", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean kDefaultBurnMarkTrailsEnabled
bool GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultBurnMarkTrailsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultBurnMarkTrailsEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "MainSettingsDefaultValues", "kDefaultBurnMarkTrailsEnabled"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean kDefaultBurnMarkTrailsEnabled
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultBurnMarkTrailsEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultBurnMarkTrailsEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultBurnMarkTrailsEnabled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean kDefaultScreenDisplacementEffectsEnabled
bool GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultScreenDisplacementEffectsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultScreenDisplacementEffectsEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "MainSettingsDefaultValues", "kDefaultScreenDisplacementEffectsEnabled"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean kDefaultScreenDisplacementEffectsEnabled
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultScreenDisplacementEffectsEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultScreenDisplacementEffectsEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultScreenDisplacementEffectsEnabled", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultAudioLatency
float GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultAudioLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultAudioLatency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsDefaultValues", "kDefaultAudioLatency"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultAudioLatency
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultAudioLatency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultAudioLatency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultAudioLatency", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxShockwaveParticles
int GlobalNamespace::MainSettingsDefaultValues::_get_kMaxShockwaveParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kMaxShockwaveParticles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kMaxShockwaveParticles"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxShockwaveParticles
void GlobalNamespace::MainSettingsDefaultValues::_set_kMaxShockwaveParticles(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kMaxShockwaveParticles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kMaxShockwaveParticles", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxNumberOfCutSoundEffects
int GlobalNamespace::MainSettingsDefaultValues::_get_kMaxNumberOfCutSoundEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kMaxNumberOfCutSoundEffects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kMaxNumberOfCutSoundEffects"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxNumberOfCutSoundEffects
void GlobalNamespace::MainSettingsDefaultValues::_set_kMaxNumberOfCutSoundEffects(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kMaxNumberOfCutSoundEffects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kMaxNumberOfCutSoundEffects", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean kCreateScreenshotDuringTheGame
bool GlobalNamespace::MainSettingsDefaultValues::_get_kCreateScreenshotDuringTheGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kCreateScreenshotDuringTheGame");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "MainSettingsDefaultValues", "kCreateScreenshotDuringTheGame"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean kCreateScreenshotDuringTheGame
void GlobalNamespace::MainSettingsDefaultValues::_set_kCreateScreenshotDuringTheGame(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kCreateScreenshotDuringTheGame");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kCreateScreenshotDuringTheGame", value));
}
// Autogenerated static field getter
// Get static field: static public System.String kSystemLanguageSerializedName
::Il2CppString* GlobalNamespace::MainSettingsDefaultValues::_get_kSystemLanguageSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kSystemLanguageSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MainSettingsDefaultValues", "kSystemLanguageSerializedName"));
}
// Autogenerated static field setter
// Set static field: static public System.String kSystemLanguageSerializedName
void GlobalNamespace::MainSettingsDefaultValues::_set_kSystemLanguageSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kSystemLanguageSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kSystemLanguageSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kDefaultPauseButtonPressDurationLevel
int GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultPauseButtonPressDurationLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_get_kDefaultPauseButtonPressDurationLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainSettingsDefaultValues", "kDefaultPauseButtonPressDurationLevel"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kDefaultPauseButtonPressDurationLevel
void GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultPauseButtonPressDurationLevel(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::_set_kDefaultPauseButtonPressDurationLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsDefaultValues", "kDefaultPauseButtonPressDurationLevel", value));
}
// Autogenerated method: MainSettingsDefaultValues.SetFixedDefaultValues
void GlobalNamespace::MainSettingsDefaultValues::SetFixedDefaultValues(GlobalNamespace::MainSettingsModelSO* mainSettingsModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsDefaultValues::SetFixedDefaultValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MainSettingsDefaultValues", "SetFixedDefaultValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainSettingsModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mainSettingsModel);
}
// Writing MetadataGetter for method: MainSettingsDefaultValues::SetFixedDefaultValues
// Il2CppName: SetFixedDefaultValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::MainSettingsModelSO*)>(&MainSettingsDefaultValues::SetFixedDefaultValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsDefaultValues*), "SetFixedDefaultValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MainSettingsModelSO*>()});
  }
};
// Writing MetadataGetter for method: MainSettingsDefaultValues::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsDefaultValues::*)()>(&MainSettingsDefaultValues::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsDefaultValues*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsDefaultValues::*)()>(&MainSettingsDefaultValues::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsDefaultValues*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: MainSettingsModelSO/WindowMode
#include "GlobalNamespace/MainSettingsModelSO_WindowMode.hpp"
// Including type: MainSettingsModelSO/Config
#include "GlobalNamespace/MainSettingsModelSO_Config.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: Vector2IntSO
#include "GlobalNamespace/Vector2IntSO.hpp"
// Including type: IntSO
#include "GlobalNamespace/IntSO.hpp"
// Including type: Vector3SO
#include "GlobalNamespace/Vector3SO.hpp"
// Including type: LanguageSO
#include "GlobalNamespace/LanguageSO.hpp"
// Including type: StringSO
#include "GlobalNamespace/StringSO.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultPlayerHeight
float GlobalNamespace::MainSettingsModelSO::_get_kDefaultPlayerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kDefaultPlayerHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsModelSO", "kDefaultPlayerHeight"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultPlayerHeight
void GlobalNamespace::MainSettingsModelSO::_set_kDefaultPlayerHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kDefaultPlayerHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kDefaultPlayerHeight", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kHeadPosToPlayerHeightOffset
float GlobalNamespace::MainSettingsModelSO::_get_kHeadPosToPlayerHeightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kHeadPosToPlayerHeightOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsModelSO", "kHeadPosToPlayerHeightOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kHeadPosToPlayerHeightOffset
void GlobalNamespace::MainSettingsModelSO::_set_kHeadPosToPlayerHeightOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kHeadPosToPlayerHeightOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kHeadPosToPlayerHeightOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kFileName
::Il2CppString* GlobalNamespace::MainSettingsModelSO::_get_kFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MainSettingsModelSO", "kFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kFileName
void GlobalNamespace::MainSettingsModelSO::_set_kFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kFileName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kTempFileName
::Il2CppString* GlobalNamespace::MainSettingsModelSO::_get_kTempFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kTempFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MainSettingsModelSO", "kTempFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTempFileName
void GlobalNamespace::MainSettingsModelSO::_set_kTempFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kTempFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kTempFileName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kBackupFileName
::Il2CppString* GlobalNamespace::MainSettingsModelSO::_get_kBackupFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kBackupFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MainSettingsModelSO", "kBackupFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBackupFileName
void GlobalNamespace::MainSettingsModelSO::_set_kBackupFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kBackupFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kBackupFileName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kCurrentVersion
::Il2CppString* GlobalNamespace::MainSettingsModelSO::_get_kCurrentVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kCurrentVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MainSettingsModelSO", "kCurrentVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCurrentVersion
void GlobalNamespace::MainSettingsModelSO::_set_kCurrentVersion(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kCurrentVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kCurrentVersion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kControllersPositionOffsetLimit
float GlobalNamespace::MainSettingsModelSO::_get_kControllersPositionOffsetLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kControllersPositionOffsetLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsModelSO", "kControllersPositionOffsetLimit"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kControllersPositionOffsetLimit
void GlobalNamespace::MainSettingsModelSO::_set_kControllersPositionOffsetLimit(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kControllersPositionOffsetLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kControllersPositionOffsetLimit", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kControllersRotationOffsetLimit
float GlobalNamespace::MainSettingsModelSO::_get_kControllersRotationOffsetLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_get_kControllersRotationOffsetLimit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MainSettingsModelSO", "kControllersRotationOffsetLimit"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kControllersRotationOffsetLimit
void GlobalNamespace::MainSettingsModelSO::_set_kControllersRotationOffsetLimit(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::_set_kControllersRotationOffsetLimit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO", "kControllersRotationOffsetLimit", value));
}
// Autogenerated method: MainSettingsModelSO.get_createScreenshotDuringTheGame
bool GlobalNamespace::MainSettingsModelSO::get_createScreenshotDuringTheGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::get_createScreenshotDuringTheGame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_createScreenshotDuringTheGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MainSettingsModelSO.set_createScreenshotDuringTheGame
void GlobalNamespace::MainSettingsModelSO::set_createScreenshotDuringTheGame(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::set_createScreenshotDuringTheGame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_createScreenshotDuringTheGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MainSettingsModelSO.get_playingForTheFirstTime
bool GlobalNamespace::MainSettingsModelSO::get_playingForTheFirstTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::get_playingForTheFirstTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playingForTheFirstTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MainSettingsModelSO.set_playingForTheFirstTime
void GlobalNamespace::MainSettingsModelSO::set_playingForTheFirstTime(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::set_playingForTheFirstTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playingForTheFirstTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MainSettingsModelSO.Save
void GlobalNamespace::MainSettingsModelSO::Save() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainSettingsModelSO.Load
void GlobalNamespace::MainSettingsModelSO::Load(bool forced) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forced)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, forced);
}
// Autogenerated method: MainSettingsModelSO.__DeleteSettingsFiles
void GlobalNamespace::MainSettingsModelSO::__DeleteSettingsFiles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::__DeleteSettingsFiles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__DeleteSettingsFiles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainSettingsModelSO.OnDisable
void GlobalNamespace::MainSettingsModelSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainSettingsModelSO.OnEnable
void GlobalNamespace::MainSettingsModelSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainSettingsModelSO::get_createScreenshotDuringTheGame
// Il2CppName: get_createScreenshotDuringTheGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MainSettingsModelSO::*)()>(&MainSettingsModelSO::get_createScreenshotDuringTheGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "get_createScreenshotDuringTheGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::set_createScreenshotDuringTheGame
// Il2CppName: set_createScreenshotDuringTheGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)(bool)>(&MainSettingsModelSO::set_createScreenshotDuringTheGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "set_createScreenshotDuringTheGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::get_playingForTheFirstTime
// Il2CppName: get_playingForTheFirstTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MainSettingsModelSO::*)()>(&MainSettingsModelSO::get_playingForTheFirstTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "get_playingForTheFirstTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::set_playingForTheFirstTime
// Il2CppName: set_playingForTheFirstTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)(bool)>(&MainSettingsModelSO::set_playingForTheFirstTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "set_playingForTheFirstTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)()>(&MainSettingsModelSO::Save)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)(bool)>(&MainSettingsModelSO::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::__DeleteSettingsFiles
// Il2CppName: __DeleteSettingsFiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)()>(&MainSettingsModelSO::__DeleteSettingsFiles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "__DeleteSettingsFiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)()>(&MainSettingsModelSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)()>(&MainSettingsModelSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainSettingsModelSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)()>(&MainSettingsModelSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::*)()>(&MainSettingsModelSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainSettingsModelSO/WindowMode
#include "GlobalNamespace/MainSettingsModelSO_WindowMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MainSettingsModelSO/WindowMode Windowed
GlobalNamespace::MainSettingsModelSO::WindowMode GlobalNamespace::MainSettingsModelSO::WindowMode::_get_Windowed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::WindowMode::_get_Windowed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MainSettingsModelSO::WindowMode>("", "MainSettingsModelSO/WindowMode", "Windowed"));
}
// Autogenerated static field setter
// Set static field: static public MainSettingsModelSO/WindowMode Windowed
void GlobalNamespace::MainSettingsModelSO::WindowMode::_set_Windowed(GlobalNamespace::MainSettingsModelSO::WindowMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::WindowMode::_set_Windowed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO/WindowMode", "Windowed", value));
}
// Autogenerated static field getter
// Get static field: static public MainSettingsModelSO/WindowMode Fullscreen
GlobalNamespace::MainSettingsModelSO::WindowMode GlobalNamespace::MainSettingsModelSO::WindowMode::_get_Fullscreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::WindowMode::_get_Fullscreen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MainSettingsModelSO::WindowMode>("", "MainSettingsModelSO/WindowMode", "Fullscreen"));
}
// Autogenerated static field setter
// Set static field: static public MainSettingsModelSO/WindowMode Fullscreen
void GlobalNamespace::MainSettingsModelSO::WindowMode::_set_Fullscreen(GlobalNamespace::MainSettingsModelSO::WindowMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::WindowMode::_set_Fullscreen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainSettingsModelSO/WindowMode", "Fullscreen", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MainSettingsModelSO/Config
#include "GlobalNamespace/MainSettingsModelSO_Config.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MainSettingsModelSO::Config::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::Config::*)()>(&MainSettingsModelSO::Config::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO::Config*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsModelSO::Config::*)()>(&MainSettingsModelSO::Config::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsModelSO::Config*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MirrorRendererGraphicsSettingsPresets
#include "GlobalNamespace/MirrorRendererGraphicsSettingsPresets.hpp"
// Including type: MirrorRendererGraphicsSettingsPresets/Preset
#include "GlobalNamespace/MirrorRendererGraphicsSettingsPresets_Preset.hpp"
// Including type: NamedPreset
#include "GlobalNamespace/NamedPreset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MirrorRendererGraphicsSettingsPresets.get_presets
::Array<GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset*>* GlobalNamespace::MirrorRendererGraphicsSettingsPresets::get_presets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::get_presets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_presets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset*>*, false>(this, ___internal__method);
}
// Autogenerated method: MirrorRendererGraphicsSettingsPresets.get_namedPresets
::Array<GlobalNamespace::NamedPreset*>* GlobalNamespace::MirrorRendererGraphicsSettingsPresets::get_namedPresets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::get_namedPresets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_namedPresets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::NamedPreset*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MirrorRendererGraphicsSettingsPresets::get_presets
// Il2CppName: get_presets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset*>* (MirrorRendererGraphicsSettingsPresets::*)()>(&MirrorRendererGraphicsSettingsPresets::get_presets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererGraphicsSettingsPresets*), "get_presets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MirrorRendererGraphicsSettingsPresets::get_namedPresets
// Il2CppName: get_namedPresets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::NamedPreset*>* (MirrorRendererGraphicsSettingsPresets::*)()>(&MirrorRendererGraphicsSettingsPresets::get_namedPresets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererGraphicsSettingsPresets*), "get_namedPresets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MirrorRendererGraphicsSettingsPresets::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererGraphicsSettingsPresets::*)()>(&MirrorRendererGraphicsSettingsPresets::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererGraphicsSettingsPresets*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererGraphicsSettingsPresets::*)()>(&MirrorRendererGraphicsSettingsPresets::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererGraphicsSettingsPresets*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirrorRendererGraphicsSettingsPresets/Preset
#include "GlobalNamespace/MirrorRendererGraphicsSettingsPresets_Preset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MirrorRendererGraphicsSettingsPresets::Preset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererGraphicsSettingsPresets::Preset::*)()>(&MirrorRendererGraphicsSettingsPresets::Preset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererGraphicsSettingsPresets::Preset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirrorRendererGraphicsSettingsPresets::Preset::*)()>(&MirrorRendererGraphicsSettingsPresets::Preset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirrorRendererGraphicsSettingsPresets::Preset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirrorRendererGraphicsSettingsPresets/Preset/MirrorType
#include "GlobalNamespace/MirrorRendererGraphicsSettingsPresets_Preset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType None
GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType>("", "MirrorRendererGraphicsSettingsPresets/Preset/MirrorType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType None
void GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_set_None(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MirrorRendererGraphicsSettingsPresets/Preset/MirrorType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType FakeMirror
GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_get_FakeMirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_get_FakeMirror");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType>("", "MirrorRendererGraphicsSettingsPresets/Preset/MirrorType", "FakeMirror"));
}
// Autogenerated static field setter
// Set static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType FakeMirror
void GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_set_FakeMirror(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_set_FakeMirror");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MirrorRendererGraphicsSettingsPresets/Preset/MirrorType", "FakeMirror", value));
}
// Autogenerated static field getter
// Get static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType RenderedMirror
GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_get_RenderedMirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_get_RenderedMirror");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType>("", "MirrorRendererGraphicsSettingsPresets/Preset/MirrorType", "RenderedMirror"));
}
// Autogenerated static field setter
// Set static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType RenderedMirror
void GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_set_RenderedMirror(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType::_set_RenderedMirror");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MirrorRendererGraphicsSettingsPresets/Preset/MirrorType", "RenderedMirror", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NamedPreset
#include "GlobalNamespace/NamedPreset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NamedPreset.get_presetNameLocalizationKey
::Il2CppString* GlobalNamespace::NamedPreset::get_presetNameLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedPreset::get_presetNameLocalizationKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_presetNameLocalizationKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NamedPreset::get_presetNameLocalizationKey
// Il2CppName: get_presetNameLocalizationKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NamedPreset::*)()>(&NamedPreset::get_presetNameLocalizationKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedPreset*), "get_presetNameLocalizationKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NamedPreset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedPreset::*)()>(&NamedPreset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedPreset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedPreset::*)()>(&NamedPreset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedPreset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NamedPresetsSO
#include "GlobalNamespace/NamedPresetsSO.hpp"
// Including type: NamedPreset
#include "GlobalNamespace/NamedPreset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NamedPresetsSO.get_namedPresets
::Array<GlobalNamespace::NamedPreset*>* GlobalNamespace::NamedPresetsSO::get_namedPresets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedPresetsSO::get_namedPresets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_namedPresets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::NamedPreset*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NamedPresetsSO::get_namedPresets
// Il2CppName: get_namedPresets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::NamedPreset*>* (NamedPresetsSO::*)()>(&NamedPresetsSO::get_namedPresets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedPresetsSO*), "get_namedPresets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NamedPresetsSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedPresetsSO::*)()>(&NamedPresetsSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedPresetsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedPresetsSO::*)()>(&NamedPresetsSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedPresetsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: MenuLightsPresetSO/LightIdColorPair
#include "GlobalNamespace/MenuLightsPresetSO_LightIdColorPair.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuLightsPresetSO.get_playersPlaceNeonsColor
GlobalNamespace::ColorSO* GlobalNamespace::MenuLightsPresetSO::get_playersPlaceNeonsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsPresetSO::get_playersPlaceNeonsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersPlaceNeonsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ColorSO*, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsPresetSO.get_playersPlaceNeonsIntensity
float GlobalNamespace::MenuLightsPresetSO::get_playersPlaceNeonsIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsPresetSO::get_playersPlaceNeonsIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersPlaceNeonsIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsPresetSO.get_lightIdColorPairs
::Array<GlobalNamespace::MenuLightsPresetSO::LightIdColorPair*>* GlobalNamespace::MenuLightsPresetSO::get_lightIdColorPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsPresetSO::get_lightIdColorPairs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightIdColorPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::MenuLightsPresetSO::LightIdColorPair*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MenuLightsPresetSO::get_playersPlaceNeonsColor
// Il2CppName: get_playersPlaceNeonsColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ColorSO* (MenuLightsPresetSO::*)()>(&MenuLightsPresetSO::get_playersPlaceNeonsColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO*), "get_playersPlaceNeonsColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuLightsPresetSO::get_playersPlaceNeonsIntensity
// Il2CppName: get_playersPlaceNeonsIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MenuLightsPresetSO::*)()>(&MenuLightsPresetSO::get_playersPlaceNeonsIntensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO*), "get_playersPlaceNeonsIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuLightsPresetSO::get_lightIdColorPairs
// Il2CppName: get_lightIdColorPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::MenuLightsPresetSO::LightIdColorPair*>* (MenuLightsPresetSO::*)()>(&MenuLightsPresetSO::get_lightIdColorPairs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO*), "get_lightIdColorPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuLightsPresetSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsPresetSO::*)()>(&MenuLightsPresetSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsPresetSO::*)()>(&MenuLightsPresetSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuLightsPresetSO/LightIdColorPair
#include "GlobalNamespace/MenuLightsPresetSO_LightIdColorPair.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuLightsPresetSO/LightIdColorPair.get_lightColor
UnityEngine::Color GlobalNamespace::MenuLightsPresetSO::LightIdColorPair::get_lightColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsPresetSO::LightIdColorPair::get_lightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MenuLightsPresetSO::LightIdColorPair::get_lightColor
// Il2CppName: get_lightColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MenuLightsPresetSO::LightIdColorPair::*)()>(&MenuLightsPresetSO::LightIdColorPair::get_lightColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO::LightIdColorPair*), "get_lightColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuLightsPresetSO::LightIdColorPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsPresetSO::LightIdColorPair::*)()>(&MenuLightsPresetSO::LightIdColorPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO::LightIdColorPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsPresetSO::LightIdColorPair::*)()>(&MenuLightsPresetSO::LightIdColorPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsPresetSO::LightIdColorPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionCompletionResults
#include "GlobalNamespace/MissionCompletionResults.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: MissionObjectiveResult
#include "GlobalNamespace/MissionObjectiveResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionCompletionResults.get_IsMissionComplete
bool GlobalNamespace::MissionCompletionResults::get_IsMissionComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionCompletionResults::get_IsMissionComplete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsMissionComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionCompletionResults::get_IsMissionComplete
// Il2CppName: get_IsMissionComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionCompletionResults::*)()>(&MissionCompletionResults::get_IsMissionComplete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionCompletionResults*), "get_IsMissionComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionCompletionResults::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionCompletionResults::*)(GlobalNamespace::LevelCompletionResults*, ::Array<GlobalNamespace::MissionObjectiveResult*>*)>(&MissionCompletionResults::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::MissionObjectiveResult*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionCompletionResults::*)(GlobalNamespace::LevelCompletionResults*, ::Array<GlobalNamespace::MissionObjectiveResult*>*)>(&MissionCompletionResults::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionCompletionResults*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::MissionObjectiveResult*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CampaignProgressModel
#include "GlobalNamespace/CampaignProgressModel.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CampaignProgressModel.get_numberOfClearedMissions
int GlobalNamespace::CampaignProgressModel::get_numberOfClearedMissions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::get_numberOfClearedMissions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfClearedMissions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CampaignProgressModel.Awake
void GlobalNamespace::CampaignProgressModel::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CampaignProgressModel.IsMissionRegistered
bool GlobalNamespace::CampaignProgressModel::IsMissionRegistered(::Il2CppString* missionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::IsMissionRegistered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMissionRegistered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, missionId);
}
// Autogenerated method: CampaignProgressModel.RegisterMissionId
void GlobalNamespace::CampaignProgressModel::RegisterMissionId(::Il2CppString* missionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::RegisterMissionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterMissionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionId);
}
// Autogenerated method: CampaignProgressModel.IsMissionCleared
bool GlobalNamespace::CampaignProgressModel::IsMissionCleared(::Il2CppString* missionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::IsMissionCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMissionCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, missionId);
}
// Autogenerated method: CampaignProgressModel.IsMissionFinal
bool GlobalNamespace::CampaignProgressModel::IsMissionFinal(::Il2CppString* missionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::IsMissionFinal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMissionFinal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, missionId);
}
// Autogenerated method: CampaignProgressModel.SetFinalMissionId
void GlobalNamespace::CampaignProgressModel::SetFinalMissionId(::Il2CppString* missionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::SetFinalMissionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFinalMissionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionId);
}
// Autogenerated method: CampaignProgressModel.WillFinishGameAfterThisMission
bool GlobalNamespace::CampaignProgressModel::WillFinishGameAfterThisMission(::Il2CppString* missionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::WillFinishGameAfterThisMission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillFinishGameAfterThisMission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, missionId);
}
// Autogenerated method: CampaignProgressModel.SetMissionCleared
void GlobalNamespace::CampaignProgressModel::SetMissionCleared(::Il2CppString* missionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::SetMissionCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMissionCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionId);
}
// Autogenerated method: CampaignProgressModel.__SetMissionCleared
void GlobalNamespace::CampaignProgressModel::__SetMissionCleared(::Il2CppString* missionId, bool cleared) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::__SetMissionCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__SetMissionCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionId), ::il2cpp_utils::ExtractType(cleared)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionId, cleared);
}
// Autogenerated method: CampaignProgressModel.UpdateNumberOfClearedMissions
int GlobalNamespace::CampaignProgressModel::UpdateNumberOfClearedMissions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignProgressModel::UpdateNumberOfClearedMissions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateNumberOfClearedMissions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CampaignProgressModel::get_numberOfClearedMissions
// Il2CppName: get_numberOfClearedMissions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CampaignProgressModel::*)()>(&CampaignProgressModel::get_numberOfClearedMissions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "get_numberOfClearedMissions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignProgressModel::*)()>(&CampaignProgressModel::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::IsMissionRegistered
// Il2CppName: IsMissionRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CampaignProgressModel::*)(::Il2CppString*)>(&CampaignProgressModel::IsMissionRegistered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "IsMissionRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::RegisterMissionId
// Il2CppName: RegisterMissionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignProgressModel::*)(::Il2CppString*)>(&CampaignProgressModel::RegisterMissionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "RegisterMissionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::IsMissionCleared
// Il2CppName: IsMissionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CampaignProgressModel::*)(::Il2CppString*)>(&CampaignProgressModel::IsMissionCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "IsMissionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::IsMissionFinal
// Il2CppName: IsMissionFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CampaignProgressModel::*)(::Il2CppString*)>(&CampaignProgressModel::IsMissionFinal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "IsMissionFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::SetFinalMissionId
// Il2CppName: SetFinalMissionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignProgressModel::*)(::Il2CppString*)>(&CampaignProgressModel::SetFinalMissionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "SetFinalMissionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::WillFinishGameAfterThisMission
// Il2CppName: WillFinishGameAfterThisMission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CampaignProgressModel::*)(::Il2CppString*)>(&CampaignProgressModel::WillFinishGameAfterThisMission)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "WillFinishGameAfterThisMission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::SetMissionCleared
// Il2CppName: SetMissionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignProgressModel::*)(::Il2CppString*)>(&CampaignProgressModel::SetMissionCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "SetMissionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::__SetMissionCleared
// Il2CppName: __SetMissionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignProgressModel::*)(::Il2CppString*, bool)>(&CampaignProgressModel::__SetMissionCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "__SetMissionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::UpdateNumberOfClearedMissions
// Il2CppName: UpdateNumberOfClearedMissions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CampaignProgressModel::*)()>(&CampaignProgressModel::UpdateNumberOfClearedMissions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), "UpdateNumberOfClearedMissions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CampaignProgressModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignProgressModel::*)()>(&CampaignProgressModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignProgressModel::*)()>(&CampaignProgressModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignProgressModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DistanceObjectiveValueFormatterSO
#include "GlobalNamespace/DistanceObjectiveValueFormatterSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DistanceObjectiveValueFormatterSO.FormatValue
::Il2CppString* GlobalNamespace::DistanceObjectiveValueFormatterSO::FormatValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DistanceObjectiveValueFormatterSO::FormatValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FormatValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: DistanceObjectiveValueFormatterSO::FormatValue
// Il2CppName: FormatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DistanceObjectiveValueFormatterSO::*)(int)>(&DistanceObjectiveValueFormatterSO::FormatValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DistanceObjectiveValueFormatterSO*), "FormatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DistanceObjectiveValueFormatterSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DistanceObjectiveValueFormatterSO::*)()>(&DistanceObjectiveValueFormatterSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DistanceObjectiveValueFormatterSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DistanceObjectiveValueFormatterSO::*)()>(&DistanceObjectiveValueFormatterSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DistanceObjectiveValueFormatterSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionDataSO
#include "GlobalNamespace/MissionDataSO.hpp"
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: MissionObjective
#include "GlobalNamespace/MissionObjective.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: MissionHelpSO
#include "GlobalNamespace/MissionHelpSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionDataSO.get_missionObjectives
::Array<GlobalNamespace::MissionObjective*>* GlobalNamespace::MissionDataSO::get_missionObjectives() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataSO::get_missionObjectives");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionObjectives", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::MissionObjective*>*, false>(this, ___internal__method);
}
// Autogenerated method: MissionDataSO.get_level
GlobalNamespace::BeatmapLevelSO* GlobalNamespace::MissionDataSO::get_level() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataSO::get_level");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_level", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapLevelSO*, false>(this, ___internal__method);
}
// Autogenerated method: MissionDataSO.get_beatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::MissionDataSO::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataSO::get_beatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: MissionDataSO.get_beatmapDifficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::MissionDataSO::get_beatmapDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataSO::get_beatmapDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: MissionDataSO.get_gameplayModifiers
GlobalNamespace::GameplayModifiers* GlobalNamespace::MissionDataSO::get_gameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataSO::get_gameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method);
}
// Autogenerated method: MissionDataSO.get_missionHelp
GlobalNamespace::MissionHelpSO* GlobalNamespace::MissionDataSO::get_missionHelp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataSO::get_missionHelp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionHelp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionHelpSO*, false>(this, ___internal__method);
}
// Autogenerated method: MissionDataSO.OnValidate
void GlobalNamespace::MissionDataSO::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataSO::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionDataSO::get_missionObjectives
// Il2CppName: get_missionObjectives
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::MissionObjective*>* (MissionDataSO::*)()>(&MissionDataSO::get_missionObjectives)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), "get_missionObjectives", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionDataSO::get_level
// Il2CppName: get_level
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapLevelSO* (MissionDataSO::*)()>(&MissionDataSO::get_level)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), "get_level", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionDataSO::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (MissionDataSO::*)()>(&MissionDataSO::get_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionDataSO::get_beatmapDifficulty
// Il2CppName: get_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (MissionDataSO::*)()>(&MissionDataSO::get_beatmapDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), "get_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionDataSO::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (MissionDataSO::*)()>(&MissionDataSO::get_gameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionDataSO::get_missionHelp
// Il2CppName: get_missionHelp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionHelpSO* (MissionDataSO::*)()>(&MissionDataSO::get_missionHelp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), "get_missionHelp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionDataSO::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionDataSO::*)()>(&MissionDataSO::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionDataSO::*)()>(&MissionDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionDataSO::*)()>(&MissionDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionHelpSO
#include "GlobalNamespace/MissionHelpSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionHelpSO.get_missionHelpId
::Il2CppString* GlobalNamespace::MissionHelpSO::get_missionHelpId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionHelpSO::get_missionHelpId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionHelpId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionHelpSO::get_missionHelpId
// Il2CppName: get_missionHelpId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MissionHelpSO::*)()>(&MissionHelpSO::get_missionHelpId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionHelpSO*), "get_missionHelpId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionHelpSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionHelpSO::*)()>(&MissionHelpSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionHelpSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionHelpSO::*)()>(&MissionHelpSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionHelpSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionObjective
#include "GlobalNamespace/MissionObjective.hpp"
// Including type: MissionObjectiveTypeSO
#include "GlobalNamespace/MissionObjectiveTypeSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionObjective.get_type
GlobalNamespace::MissionObjectiveTypeSO* GlobalNamespace::MissionObjective::get_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::get_type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionObjectiveTypeSO*, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjective.get_referenceValueComparisonType
GlobalNamespace::MissionObjective::ReferenceValueComparisonType GlobalNamespace::MissionObjective::get_referenceValueComparisonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::get_referenceValueComparisonType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_referenceValueComparisonType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionObjective::ReferenceValueComparisonType, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjective.get_referenceValue
int GlobalNamespace::MissionObjective::get_referenceValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::get_referenceValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_referenceValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjective.Equals
bool GlobalNamespace::MissionObjective::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: MissionObjective.GetHashCode
int GlobalNamespace::MissionObjective::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjective.op_Equality
bool GlobalNamespace::operator ==(GlobalNamespace::MissionObjective* obj1, GlobalNamespace::MissionObjective& obj2) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionObjective", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj1), ::il2cpp_utils::ExtractType(&obj2)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj1, &obj2);
}
// Autogenerated method: MissionObjective.op_Inequality
bool GlobalNamespace::operator !=(GlobalNamespace::MissionObjective* obj1, GlobalNamespace::MissionObjective& obj2) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionObjective", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj1), ::il2cpp_utils::ExtractType(&obj2)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj1, &obj2);
}
// Writing MetadataGetter for method: MissionObjective::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionObjectiveTypeSO* (MissionObjective::*)()>(&MissionObjective::get_type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjective::get_referenceValueComparisonType
// Il2CppName: get_referenceValueComparisonType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionObjective::ReferenceValueComparisonType (MissionObjective::*)()>(&MissionObjective::get_referenceValueComparisonType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), "get_referenceValueComparisonType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjective::get_referenceValue
// Il2CppName: get_referenceValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MissionObjective::*)()>(&MissionObjective::get_referenceValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), "get_referenceValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjective::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionObjective::*)(::Il2CppObject*)>(&MissionObjective::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MissionObjective::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MissionObjective::*)()>(&MissionObjective::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjective::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjective::*)()>(&MissionObjective::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjective::*)()>(&MissionObjective::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjective::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::MissionObjective*, GlobalNamespace::MissionObjective&)>(&MissionObjective::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective&>()});
  }
};
// Writing MetadataGetter for method: MissionObjective::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::MissionObjective*, GlobalNamespace::MissionObjective&)>(&MissionObjective::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjective*), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjective/ReferenceValueComparisonType
#include "GlobalNamespace/MissionObjective.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MissionObjective/ReferenceValueComparisonType None
GlobalNamespace::MissionObjective::ReferenceValueComparisonType GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionObjective::ReferenceValueComparisonType>("", "MissionObjective/ReferenceValueComparisonType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjective/ReferenceValueComparisonType None
void GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_None(GlobalNamespace::MissionObjective::ReferenceValueComparisonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjective/ReferenceValueComparisonType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MissionObjective/ReferenceValueComparisonType Equal
GlobalNamespace::MissionObjective::ReferenceValueComparisonType GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_Equal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_Equal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionObjective::ReferenceValueComparisonType>("", "MissionObjective/ReferenceValueComparisonType", "Equal"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjective/ReferenceValueComparisonType Equal
void GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_Equal(GlobalNamespace::MissionObjective::ReferenceValueComparisonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_Equal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjective/ReferenceValueComparisonType", "Equal", value));
}
// Autogenerated static field getter
// Get static field: static public MissionObjective/ReferenceValueComparisonType Max
GlobalNamespace::MissionObjective::ReferenceValueComparisonType GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionObjective::ReferenceValueComparisonType>("", "MissionObjective/ReferenceValueComparisonType", "Max"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjective/ReferenceValueComparisonType Max
void GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_Max(GlobalNamespace::MissionObjective::ReferenceValueComparisonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjective/ReferenceValueComparisonType", "Max", value));
}
// Autogenerated static field getter
// Get static field: static public MissionObjective/ReferenceValueComparisonType Min
GlobalNamespace::MissionObjective::ReferenceValueComparisonType GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_Min() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_get_Min");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionObjective::ReferenceValueComparisonType>("", "MissionObjective/ReferenceValueComparisonType", "Min"));
}
// Autogenerated static field setter
// Set static field: static public MissionObjective/ReferenceValueComparisonType Min
void GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_Min(GlobalNamespace::MissionObjective::ReferenceValueComparisonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjective::ReferenceValueComparisonType::_set_Min");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionObjective/ReferenceValueComparisonType", "Min", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionDataExtensions
#include "GlobalNamespace/MissionDataExtensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionDataExtensions.Name
::Il2CppString* GlobalNamespace::MissionDataExtensions::Name(GlobalNamespace::MissionObjective::ReferenceValueComparisonType comparisonType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionDataExtensions::Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionDataExtensions", "Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(comparisonType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, comparisonType);
}
// Writing MetadataGetter for method: MissionDataExtensions::Name
// Il2CppName: Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::MissionObjective::ReferenceValueComparisonType)>(&MissionDataExtensions::Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionDataExtensions*), "Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective::ReferenceValueComparisonType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectiveResult
#include "GlobalNamespace/MissionObjectiveResult.hpp"
// Including type: MissionObjective
#include "GlobalNamespace/MissionObjective.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionObjectiveResult.get_missionObjective
GlobalNamespace::MissionObjective* GlobalNamespace::MissionObjectiveResult::get_missionObjective() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveResult::get_missionObjective");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionObjective", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionObjective*, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveResult.set_missionObjective
void GlobalNamespace::MissionObjectiveResult::set_missionObjective(GlobalNamespace::MissionObjective* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveResult::set_missionObjective");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_missionObjective", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveResult.get_cleared
bool GlobalNamespace::MissionObjectiveResult::get_cleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveResult::get_cleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveResult.set_cleared
void GlobalNamespace::MissionObjectiveResult::set_cleared(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveResult::set_cleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionObjectiveResult.get_value
int GlobalNamespace::MissionObjectiveResult::get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveResult::get_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveResult.set_value
void GlobalNamespace::MissionObjectiveResult::set_value(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveResult::set_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MissionObjectiveResult::get_missionObjective
// Il2CppName: get_missionObjective
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionObjective* (MissionObjectiveResult::*)()>(&MissionObjectiveResult::get_missionObjective)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), "get_missionObjective", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveResult::set_missionObjective
// Il2CppName: set_missionObjective
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveResult::*)(GlobalNamespace::MissionObjective*)>(&MissionObjectiveResult::set_missionObjective)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), "set_missionObjective", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective*>()});
  }
};
// Writing MetadataGetter for method: MissionObjectiveResult::get_cleared
// Il2CppName: get_cleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionObjectiveResult::*)()>(&MissionObjectiveResult::get_cleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), "get_cleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveResult::set_cleared
// Il2CppName: set_cleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveResult::*)(bool)>(&MissionObjectiveResult::set_cleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), "set_cleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionObjectiveResult::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MissionObjectiveResult::*)()>(&MissionObjectiveResult::get_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveResult::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveResult::*)(int)>(&MissionObjectiveResult::set_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionObjectiveResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveResult::*)(GlobalNamespace::MissionObjective*, bool, int)>(&MissionObjectiveResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveResult::*)(GlobalNamespace::MissionObjective*, bool, int)>(&MissionObjectiveResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjective*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionObjectiveTypeSO
#include "GlobalNamespace/MissionObjectiveTypeSO.hpp"
// Including type: ObjectiveValueFormatterSO
#include "GlobalNamespace/ObjectiveValueFormatterSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionObjectiveTypeSO.get_objectiveName
::Il2CppString* GlobalNamespace::MissionObjectiveTypeSO::get_objectiveName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveTypeSO::get_objectiveName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_objectiveName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveTypeSO.get_objectiveNameLocalized
::Il2CppString* GlobalNamespace::MissionObjectiveTypeSO::get_objectiveNameLocalized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveTypeSO::get_objectiveNameLocalized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_objectiveNameLocalized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveTypeSO.get_noConditionValue
bool GlobalNamespace::MissionObjectiveTypeSO::get_noConditionValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveTypeSO::get_noConditionValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noConditionValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveTypeSO.get_objectiveValueFormater
GlobalNamespace::ObjectiveValueFormatterSO* GlobalNamespace::MissionObjectiveTypeSO::get_objectiveValueFormater() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveTypeSO::get_objectiveValueFormater");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_objectiveValueFormater", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObjectiveValueFormatterSO*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionObjectiveTypeSO::get_objectiveName
// Il2CppName: get_objectiveName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MissionObjectiveTypeSO::*)()>(&MissionObjectiveTypeSO::get_objectiveName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveTypeSO*), "get_objectiveName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveTypeSO::get_objectiveNameLocalized
// Il2CppName: get_objectiveNameLocalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MissionObjectiveTypeSO::*)()>(&MissionObjectiveTypeSO::get_objectiveNameLocalized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveTypeSO*), "get_objectiveNameLocalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveTypeSO::get_noConditionValue
// Il2CppName: get_noConditionValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionObjectiveTypeSO::*)()>(&MissionObjectiveTypeSO::get_noConditionValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveTypeSO*), "get_noConditionValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveTypeSO::get_objectiveValueFormater
// Il2CppName: get_objectiveValueFormater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObjectiveValueFormatterSO* (MissionObjectiveTypeSO::*)()>(&MissionObjectiveTypeSO::get_objectiveValueFormater)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveTypeSO*), "get_objectiveValueFormater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveTypeSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveTypeSO::*)()>(&MissionObjectiveTypeSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveTypeSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveTypeSO::*)()>(&MissionObjectiveTypeSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveTypeSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionStage
#include "GlobalNamespace/MissionStage.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionStage.get_minimumMissionsToUnlock
int GlobalNamespace::MissionStage::get_minimumMissionsToUnlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStage::get_minimumMissionsToUnlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minimumMissionsToUnlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MissionStage.get_position
UnityEngine::Vector2 GlobalNamespace::MissionStage::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStage::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionStage::get_minimumMissionsToUnlock
// Il2CppName: get_minimumMissionsToUnlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MissionStage::*)()>(&MissionStage::get_minimumMissionsToUnlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStage*), "get_minimumMissionsToUnlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionStage::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (MissionStage::*)()>(&MissionStage::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStage*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionStage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStage::*)()>(&MissionStage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStage::*)()>(&MissionStage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ObjectiveValueFormatterSO
#include "GlobalNamespace/ObjectiveValueFormatterSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObjectiveValueFormatterSO.FormatValue
::Il2CppString* GlobalNamespace::ObjectiveValueFormatterSO::FormatValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObjectiveValueFormatterSO::FormatValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FormatValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ObjectiveValueFormatterSO::FormatValue
// Il2CppName: FormatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ObjectiveValueFormatterSO::*)(int)>(&ObjectiveValueFormatterSO::FormatValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveValueFormatterSO*), "FormatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ObjectiveValueFormatterSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveValueFormatterSO::*)()>(&ObjectiveValueFormatterSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveValueFormatterSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveValueFormatterSO::*)()>(&ObjectiveValueFormatterSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveValueFormatterSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ScoreObjectiveValueFormatterSO
#include "GlobalNamespace/ScoreObjectiveValueFormatterSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScoreObjectiveValueFormatterSO.FormatValue
::Il2CppString* GlobalNamespace::ScoreObjectiveValueFormatterSO::FormatValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreObjectiveValueFormatterSO::FormatValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FormatValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ScoreObjectiveValueFormatterSO::FormatValue
// Il2CppName: FormatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ScoreObjectiveValueFormatterSO::*)(int)>(&ScoreObjectiveValueFormatterSO::FormatValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreObjectiveValueFormatterSO*), "FormatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScoreObjectiveValueFormatterSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreObjectiveValueFormatterSO::*)()>(&ScoreObjectiveValueFormatterSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreObjectiveValueFormatterSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreObjectiveValueFormatterSO::*)()>(&ScoreObjectiveValueFormatterSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreObjectiveValueFormatterSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IMasterServerAvailabilityModel
#include "GlobalNamespace/IMasterServerAvailabilityModel.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMasterServerAvailabilityModel.GetAvailabilityAsync
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* GlobalNamespace::IMasterServerAvailabilityModel::GetAvailabilityAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMasterServerAvailabilityModel::GetAvailabilityAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAvailabilityAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>*, false>(this, ___internal__method, cancellationToken);
}
// Writing MetadataGetter for method: IMasterServerAvailabilityModel::GetAvailabilityAsync
// Il2CppName: GetAvailabilityAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* (IMasterServerAvailabilityModel::*)(System::Threading::CancellationToken)>(&IMasterServerAvailabilityModel::GetAvailabilityAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerAvailabilityModel*), "GetAvailabilityAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IMasterServerQuickPlaySetupModel
#include "GlobalNamespace/IMasterServerQuickPlaySetupModel.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMasterServerQuickPlaySetupModel.GetQuickPlaySetupAsync
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>* GlobalNamespace::IMasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetQuickPlaySetupAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>*, false>(this, ___internal__method, cancellationToken);
}
// Writing MetadataGetter for method: IMasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync
// Il2CppName: GetQuickPlaySetupAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>* (IMasterServerQuickPlaySetupModel::*)(System::Threading::CancellationToken)>(&IMasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMasterServerQuickPlaySetupModel*), "GetQuickPlaySetupAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: MasterServerAvailabilityData/UserMessage
#include "GlobalNamespace/MasterServerAvailabilityData_UserMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerAvailabilityData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityData::*)()>(&MasterServerAvailabilityData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityData::*)()>(&MasterServerAvailabilityData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerAvailabilityData/AvailabilityStatus
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MasterServerAvailabilityData/AvailabilityStatus Online
GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_get_Online() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_get_Online");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus>("", "MasterServerAvailabilityData/AvailabilityStatus", "Online"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerAvailabilityData/AvailabilityStatus Online
void GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_set_Online(GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_set_Online");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerAvailabilityData/AvailabilityStatus", "Online", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerAvailabilityData/AvailabilityStatus MaintenanceUpcoming
GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_get_MaintenanceUpcoming() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_get_MaintenanceUpcoming");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus>("", "MasterServerAvailabilityData/AvailabilityStatus", "MaintenanceUpcoming"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerAvailabilityData/AvailabilityStatus MaintenanceUpcoming
void GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_set_MaintenanceUpcoming(GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_set_MaintenanceUpcoming");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerAvailabilityData/AvailabilityStatus", "MaintenanceUpcoming", value));
}
// Autogenerated static field getter
// Get static field: static public MasterServerAvailabilityData/AvailabilityStatus Offline
GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_get_Offline() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_get_Offline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus>("", "MasterServerAvailabilityData/AvailabilityStatus", "Offline"));
}
// Autogenerated static field setter
// Set static field: static public MasterServerAvailabilityData/AvailabilityStatus Offline
void GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_set_Offline(GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityData::AvailabilityStatus::_set_Offline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerAvailabilityData/AvailabilityStatus", "Offline", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerAvailabilityData/UserMessage
#include "GlobalNamespace/MasterServerAvailabilityData_UserMessage.hpp"
// Including type: MasterServerAvailabilityData/UserMessage/LocalizedMessage
#include "GlobalNamespace/MasterServerAvailabilityData_UserMessage_LocalizedMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerAvailabilityData::UserMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityData::UserMessage::*)()>(&MasterServerAvailabilityData::UserMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityData::UserMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityData::UserMessage::*)()>(&MasterServerAvailabilityData::UserMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityData::UserMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerAvailabilityData/UserMessage/LocalizedMessage
#include "GlobalNamespace/MasterServerAvailabilityData_UserMessage_LocalizedMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerAvailabilityData::UserMessage::LocalizedMessage::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityData::UserMessage::LocalizedMessage::*)()>(&MasterServerAvailabilityData::UserMessage::LocalizedMessage::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityData::UserMessage::LocalizedMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityData::UserMessage::LocalizedMessage::*)()>(&MasterServerAvailabilityData::UserMessage::LocalizedMessage::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityData::UserMessage::LocalizedMessage*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerAvailabilityModel
#include "GlobalNamespace/MasterServerAvailabilityModel.hpp"
// Including type: MasterServerAvailabilityModel/<GetAvailabilityAsyncInternal>d__10
#include "GlobalNamespace/MasterServerAvailabilityModel_-GetAvailabilityAsyncInternal-d__10.hpp"
// Including type: INetworkConfig
#include "GlobalNamespace/INetworkConfig.hpp"
// Including type: System.Net.Http.HttpClient
#include "System/Net/Http/HttpClient.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kRequestCacheTimeHours
float GlobalNamespace::MasterServerAvailabilityModel::_get_kRequestCacheTimeHours() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::_get_kRequestCacheTimeHours");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MasterServerAvailabilityModel", "kRequestCacheTimeHours"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kRequestCacheTimeHours
void GlobalNamespace::MasterServerAvailabilityModel::_set_kRequestCacheTimeHours(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::_set_kRequestCacheTimeHours");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerAvailabilityModel", "kRequestCacheTimeHours", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRequestTimeoutSeconds
int GlobalNamespace::MasterServerAvailabilityModel::_get_kRequestTimeoutSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::_get_kRequestTimeoutSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MasterServerAvailabilityModel", "kRequestTimeoutSeconds"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRequestTimeoutSeconds
void GlobalNamespace::MasterServerAvailabilityModel::_set_kRequestTimeoutSeconds(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::_set_kRequestTimeoutSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerAvailabilityModel", "kRequestTimeoutSeconds", value));
}
// Autogenerated method: MasterServerAvailabilityModel.Init
void GlobalNamespace::MasterServerAvailabilityModel::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerAvailabilityModel.GetAvailabilityAsync
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* GlobalNamespace::MasterServerAvailabilityModel::GetAvailabilityAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::GetAvailabilityAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAvailabilityAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: MasterServerAvailabilityModel.IsAvailabilityTaskValid
bool GlobalNamespace::MasterServerAvailabilityModel::IsAvailabilityTaskValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::IsAvailabilityTaskValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAvailabilityTaskValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerAvailabilityModel.StartRequest
void GlobalNamespace::MasterServerAvailabilityModel::StartRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::StartRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerAvailabilityModel.GetAvailabilityAsyncInternal
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* GlobalNamespace::MasterServerAvailabilityModel::GetAvailabilityAsyncInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::GetAvailabilityAsyncInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAvailabilityAsyncInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MasterServerAvailabilityModel::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityModel::*)()>(&MasterServerAvailabilityModel::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerAvailabilityModel::GetAvailabilityAsync
// Il2CppName: GetAvailabilityAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* (MasterServerAvailabilityModel::*)(System::Threading::CancellationToken)>(&MasterServerAvailabilityModel::GetAvailabilityAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel*), "GetAvailabilityAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MasterServerAvailabilityModel::IsAvailabilityTaskValid
// Il2CppName: IsAvailabilityTaskValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerAvailabilityModel::*)()>(&MasterServerAvailabilityModel::IsAvailabilityTaskValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel*), "IsAvailabilityTaskValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerAvailabilityModel::StartRequest
// Il2CppName: StartRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityModel::*)()>(&MasterServerAvailabilityModel::StartRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel*), "StartRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerAvailabilityModel::GetAvailabilityAsyncInternal
// Il2CppName: GetAvailabilityAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* (MasterServerAvailabilityModel::*)()>(&MasterServerAvailabilityModel::GetAvailabilityAsyncInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel*), "GetAvailabilityAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerAvailabilityModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityModel::*)()>(&MasterServerAvailabilityModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityModel::*)()>(&MasterServerAvailabilityModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerAvailabilityModel/<GetAvailabilityAsyncInternal>d__10
#include "GlobalNamespace/MasterServerAvailabilityModel_-GetAvailabilityAsyncInternal-d__10.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServerAvailabilityModel/<GetAvailabilityAsyncInternal>d__10.MoveNext
void GlobalNamespace::MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServerAvailabilityModel/<GetAvailabilityAsyncInternal>d__10.SetStateMachine
void GlobalNamespace::MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::*)()>(&MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerQuickPlaySetupModel
#include "GlobalNamespace/MasterServerQuickPlaySetupModel.hpp"
// Including type: MasterServerQuickPlaySetupModel/<GetQuickPlaySetupInternal>d__10
#include "GlobalNamespace/MasterServerQuickPlaySetupModel_-GetQuickPlaySetupInternal-d__10.hpp"
// Including type: INetworkConfig
#include "GlobalNamespace/INetworkConfig.hpp"
// Including type: System.Net.Http.HttpClient
#include "System/Net/Http/HttpClient.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kRequestCacheTimeoutHours
float GlobalNamespace::MasterServerQuickPlaySetupModel::_get_kRequestCacheTimeoutHours() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::_get_kRequestCacheTimeoutHours");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MasterServerQuickPlaySetupModel", "kRequestCacheTimeoutHours"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kRequestCacheTimeoutHours
void GlobalNamespace::MasterServerQuickPlaySetupModel::_set_kRequestCacheTimeoutHours(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::_set_kRequestCacheTimeoutHours");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerQuickPlaySetupModel", "kRequestCacheTimeoutHours", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kRequestTimeoutSeconds
int GlobalNamespace::MasterServerQuickPlaySetupModel::_get_kRequestTimeoutSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::_get_kRequestTimeoutSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MasterServerQuickPlaySetupModel", "kRequestTimeoutSeconds"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kRequestTimeoutSeconds
void GlobalNamespace::MasterServerQuickPlaySetupModel::_set_kRequestTimeoutSeconds(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::_set_kRequestTimeoutSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerQuickPlaySetupModel", "kRequestTimeoutSeconds", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kQuickPlayOverrideSetupJson
::Il2CppString* GlobalNamespace::MasterServerQuickPlaySetupModel::_get_kQuickPlayOverrideSetupJson() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::_get_kQuickPlayOverrideSetupJson");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MasterServerQuickPlaySetupModel", "kQuickPlayOverrideSetupJson"));
}
// Autogenerated static field setter
// Set static field: static private System.String kQuickPlayOverrideSetupJson
void GlobalNamespace::MasterServerQuickPlaySetupModel::_set_kQuickPlayOverrideSetupJson(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::_set_kQuickPlayOverrideSetupJson");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MasterServerQuickPlaySetupModel", "kQuickPlayOverrideSetupJson", value));
}
// Autogenerated method: MasterServerQuickPlaySetupModel.GetQuickPlaySetupAsync
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>* GlobalNamespace::MasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync(System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetQuickPlaySetupAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>*, false>(this, ___internal__method, cancellationToken);
}
// Autogenerated method: MasterServerQuickPlaySetupModel.Init
void GlobalNamespace::MasterServerQuickPlaySetupModel::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerQuickPlaySetupModel.StartRequest
void GlobalNamespace::MasterServerQuickPlaySetupModel::StartRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::StartRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerQuickPlaySetupModel.GetQuickPlaySetupInternal
System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>* GlobalNamespace::MasterServerQuickPlaySetupModel::GetQuickPlaySetupInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::GetQuickPlaySetupInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetQuickPlaySetupInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>*, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerQuickPlaySetupModel.IsQuickPlaySetupTaskValid
bool GlobalNamespace::MasterServerQuickPlaySetupModel::IsQuickPlaySetupTaskValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::IsQuickPlaySetupTaskValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsQuickPlaySetupTaskValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MasterServerQuickPlaySetupModel.IsUrlValid
bool GlobalNamespace::MasterServerQuickPlaySetupModel::IsUrlValid(::Il2CppString* url) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::IsUrlValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsUrlValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(url)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, url);
}
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync
// Il2CppName: GetQuickPlaySetupAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>* (MasterServerQuickPlaySetupModel::*)(System::Threading::CancellationToken)>(&MasterServerQuickPlaySetupModel::GetQuickPlaySetupAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), "GetQuickPlaySetupAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupModel::*)()>(&MasterServerQuickPlaySetupModel::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::StartRequest
// Il2CppName: StartRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupModel::*)()>(&MasterServerQuickPlaySetupModel::StartRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), "StartRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::GetQuickPlaySetupInternal
// Il2CppName: GetQuickPlaySetupInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerQuickPlaySetupData*>* (MasterServerQuickPlaySetupModel::*)()>(&MasterServerQuickPlaySetupModel::GetQuickPlaySetupInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), "GetQuickPlaySetupInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::IsQuickPlaySetupTaskValid
// Il2CppName: IsQuickPlaySetupTaskValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerQuickPlaySetupModel::*)()>(&MasterServerQuickPlaySetupModel::IsQuickPlaySetupTaskValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), "IsQuickPlaySetupTaskValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::IsUrlValid
// Il2CppName: IsUrlValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerQuickPlaySetupModel::*)(::Il2CppString*)>(&MasterServerQuickPlaySetupModel::IsUrlValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), "IsUrlValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupModel::*)()>(&MasterServerQuickPlaySetupModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupModel::*)()>(&MasterServerQuickPlaySetupModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerQuickPlaySetupModel/<GetQuickPlaySetupInternal>d__10
#include "GlobalNamespace/MasterServerQuickPlaySetupModel_-GetQuickPlaySetupInternal-d__10.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServerQuickPlaySetupModel/<GetQuickPlaySetupInternal>d__10.MoveNext
void GlobalNamespace::MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MasterServerQuickPlaySetupModel/<GetQuickPlaySetupInternal>d__10.SetStateMachine
void GlobalNamespace::MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::*)()>(&MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupModel::$GetQuickPlaySetupInternal$d__10), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MasterServerQuickPlaySetupData.get_hasOverride
bool GlobalNamespace::MasterServerQuickPlaySetupData::get_hasOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerQuickPlaySetupData::get_hasOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MasterServerQuickPlaySetupData::get_hasOverride
// Il2CppName: get_hasOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MasterServerQuickPlaySetupData::*)()>(&MasterServerQuickPlaySetupData::get_hasOverride)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData*), "get_hasOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServerQuickPlaySetupData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::*)()>(&MasterServerQuickPlaySetupData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::*)()>(&MasterServerQuickPlaySetupData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPackName
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_LocalizedCustomPackName.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPack
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_LocalizedCustomPack.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/PredefinedPack
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_PredefinedPack.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPackName
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_LocalizedCustomPackName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPack
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_LocalizedCustomPack.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPackName
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_LocalizedCustomPackName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/PredefinedPack
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_PredefinedPack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack::*)()>(&MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectionFailedReasonMethods
#include "GlobalNamespace/ConnectionFailedReasonMethods.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE17798
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedUnknown
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedUnknown"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedUnknown
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedUnknown(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedUnknown", value));
}
// [LocalizationKeyAttribute] Offset: 0xE177A8
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedConnectionCanceled
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedConnectionCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedConnectionCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedConnectionCanceled"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedConnectionCanceled
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedConnectionCanceled(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedConnectionCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedConnectionCanceled", value));
}
// [LocalizationKeyAttribute] Offset: 0xE177B8
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedServerUnreachable
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedServerUnreachable
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedServerUnreachable(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedServerUnreachable", value));
}
// [LocalizationKeyAttribute] Offset: 0xE177C8
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedServerDoesNotExist
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedServerDoesNotExist() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedServerDoesNotExist");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedServerDoesNotExist"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedServerDoesNotExist
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedServerDoesNotExist(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedServerDoesNotExist");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedServerDoesNotExist", value));
}
// [LocalizationKeyAttribute] Offset: 0xE177D8
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedServerAtCapacity
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedServerAtCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedServerAtCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedServerAtCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedServerAtCapacity
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedServerAtCapacity(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedServerAtCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedServerAtCapacity", value));
}
// [LocalizationKeyAttribute] Offset: 0xE177E8
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedVersionMismatch
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedVersionMismatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedVersionMismatch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedVersionMismatch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedVersionMismatch
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedVersionMismatch(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedVersionMismatch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedVersionMismatch", value));
}
// [LocalizationKeyAttribute] Offset: 0xE177F8
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedInvalidPassword
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedInvalidPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedInvalidPassword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedInvalidPassword"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedInvalidPassword
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedInvalidPassword(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedInvalidPassword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedInvalidPassword", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17808
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedMasterServerUnreachable
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedMasterServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedMasterServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedMasterServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedMasterServerUnreachable
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedMasterServerUnreachable(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedMasterServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedMasterServerUnreachable", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17818
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedMasterServerNotAuthenticated
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedMasterServerNotAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedMasterServerNotAuthenticated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedMasterServerNotAuthenticated"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedMasterServerNotAuthenticated
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedMasterServerNotAuthenticated(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedMasterServerNotAuthenticated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedMasterServerNotAuthenticated", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17828
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedNetworkNotConnected
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedNetworkNotConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedNetworkNotConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedNetworkNotConnected"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedNetworkNotConnected
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedNetworkNotConnected(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedNetworkNotConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedNetworkNotConnected", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17838
// Autogenerated static field getter
// Get static field: static private System.String kConnectionFailedMasterServerCertificateValidationFailed
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedMasterServerCertificateValidationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_get_kConnectionFailedMasterServerCertificateValidationFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ConnectionFailedReasonMethods", "kConnectionFailedMasterServerCertificateValidationFailed"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionFailedMasterServerCertificateValidationFailed
void GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedMasterServerCertificateValidationFailed(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::_set_kConnectionFailedMasterServerCertificateValidationFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReasonMethods", "kConnectionFailedMasterServerCertificateValidationFailed", value));
}
// Autogenerated method: ConnectionFailedReasonMethods.LocalizedKey
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::LocalizedKey(GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::LocalizedKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectionFailedReasonMethods", "LocalizedKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionFailedReason)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectionFailedReason);
}
// Autogenerated method: ConnectionFailedReasonMethods.ErrorCode
::Il2CppString* GlobalNamespace::ConnectionFailedReasonMethods::ErrorCode(GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReasonMethods::ErrorCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectionFailedReasonMethods", "ErrorCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionFailedReason)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectionFailedReason);
}
// Writing MetadataGetter for method: ConnectionFailedReasonMethods::LocalizedKey
// Il2CppName: LocalizedKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::ConnectionFailedReason)>(&ConnectionFailedReasonMethods::LocalizedKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectionFailedReasonMethods*), "LocalizedKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectionFailedReasonMethods::ErrorCode
// Il2CppName: ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::ConnectionFailedReason)>(&ConnectionFailedReasonMethods::ErrorCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectionFailedReasonMethods*), "ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DisconnectedReasonMethods
#include "GlobalNamespace/DisconnectedReasonMethods.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE17848
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectedUnknown
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "DisconnectedReasonMethods", "kDisconnectedUnknown"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectedUnknown
void GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedUnknown(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReasonMethods", "kDisconnectedUnknown", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17858
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectedUserInitiated
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedUserInitiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedUserInitiated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "DisconnectedReasonMethods", "kDisconnectedUserInitiated"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectedUserInitiated
void GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedUserInitiated(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedUserInitiated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReasonMethods", "kDisconnectedUserInitiated", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17868
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectedTimeout
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "DisconnectedReasonMethods", "kDisconnectedTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectedTimeout
void GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedTimeout(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReasonMethods", "kDisconnectedTimeout", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17878
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectedKicked
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedKicked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "DisconnectedReasonMethods", "kDisconnectedKicked"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectedKicked
void GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedKicked(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedKicked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReasonMethods", "kDisconnectedKicked", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17888
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectedServerAtCapacity
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedServerAtCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedServerAtCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "DisconnectedReasonMethods", "kDisconnectedServerAtCapacity"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectedServerAtCapacity
void GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedServerAtCapacity(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedServerAtCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReasonMethods", "kDisconnectedServerAtCapacity", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17898
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectedServerShutDown
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedServerShutDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedServerShutDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "DisconnectedReasonMethods", "kDisconnectedServerShutDown"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectedServerShutDown
void GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedServerShutDown(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedServerShutDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReasonMethods", "kDisconnectedServerShutDown", value));
}
// [LocalizationKeyAttribute] Offset: 0xE178A8
// Autogenerated static field getter
// Get static field: static private System.String kDisconnectedMasterServerUnreachable
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedMasterServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_get_kDisconnectedMasterServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "DisconnectedReasonMethods", "kDisconnectedMasterServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDisconnectedMasterServerUnreachable
void GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedMasterServerUnreachable(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::_set_kDisconnectedMasterServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReasonMethods", "kDisconnectedMasterServerUnreachable", value));
}
// Autogenerated method: DisconnectedReasonMethods.LocalizedKey
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::LocalizedKey(GlobalNamespace::DisconnectedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::LocalizedKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DisconnectedReasonMethods", "LocalizedKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionFailedReason)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectionFailedReason);
}
// Autogenerated method: DisconnectedReasonMethods.ErrorCode
::Il2CppString* GlobalNamespace::DisconnectedReasonMethods::ErrorCode(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReasonMethods::ErrorCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DisconnectedReasonMethods", "ErrorCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, disconnectedReason);
}
// Writing MetadataGetter for method: DisconnectedReasonMethods::LocalizedKey
// Il2CppName: LocalizedKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::DisconnectedReason)>(&DisconnectedReasonMethods::LocalizedKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedReasonMethods*), "LocalizedKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: DisconnectedReasonMethods::ErrorCode
// Il2CppName: ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::DisconnectedReason)>(&DisconnectedReasonMethods::ErrorCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedReasonMethods*), "ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameServerListItem
#include "GlobalNamespace/GameServerListItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameServerListItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListItem::*)(::Il2CppString*, int, int, bool)>(&GameServerListItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListItem::*)(::Il2CppString*, int, int, bool)>(&GameServerListItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameServerPlayerTableItem
#include "GlobalNamespace/GameServerPlayerTableItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameServerPlayerTableItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableItem::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool)>(&GameServerPlayerTableItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableItem::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool)>(&GameServerPlayerTableItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILevelGameplaySetupData
#include "GlobalNamespace/ILevelGameplaySetupData.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILevelGameplaySetupData.get_beatmapLevel
GlobalNamespace::IPreviewBeatmapLevel* GlobalNamespace::ILevelGameplaySetupData::get_beatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::get_beatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPreviewBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: ILevelGameplaySetupData.set_beatmapLevel
void GlobalNamespace::ILevelGameplaySetupData::set_beatmapLevel(GlobalNamespace::IPreviewBeatmapLevel* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::set_beatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelGameplaySetupData.get_beatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::ILevelGameplaySetupData::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: ILevelGameplaySetupData.set_beatmapCharacteristic
void GlobalNamespace::ILevelGameplaySetupData::set_beatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::set_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelGameplaySetupData.get_beatmapDifficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::ILevelGameplaySetupData::get_beatmapDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::get_beatmapDifficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: ILevelGameplaySetupData.set_beatmapDifficulty
void GlobalNamespace::ILevelGameplaySetupData::set_beatmapDifficulty(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::set_beatmapDifficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelGameplaySetupData.get_gameplayModifiers
GlobalNamespace::GameplayModifiers* GlobalNamespace::ILevelGameplaySetupData::get_gameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::get_gameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method);
}
// Autogenerated method: ILevelGameplaySetupData.set_gameplayModifiers
void GlobalNamespace::ILevelGameplaySetupData::set_gameplayModifiers(GlobalNamespace::GameplayModifiers* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelGameplaySetupData::set_gameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_gameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ILevelGameplaySetupData::get_beatmapLevel
// Il2CppName: get_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPreviewBeatmapLevel* (ILevelGameplaySetupData::*)()>(&ILevelGameplaySetupData::get_beatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "get_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILevelGameplaySetupData::set_beatmapLevel
// Il2CppName: set_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelGameplaySetupData::*)(GlobalNamespace::IPreviewBeatmapLevel*)>(&ILevelGameplaySetupData::set_beatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "set_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: ILevelGameplaySetupData::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (ILevelGameplaySetupData::*)()>(&ILevelGameplaySetupData::get_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILevelGameplaySetupData::set_beatmapCharacteristic
// Il2CppName: set_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelGameplaySetupData::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&ILevelGameplaySetupData::set_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "set_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: ILevelGameplaySetupData::get_beatmapDifficulty
// Il2CppName: get_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (ILevelGameplaySetupData::*)()>(&ILevelGameplaySetupData::get_beatmapDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "get_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILevelGameplaySetupData::set_beatmapDifficulty
// Il2CppName: set_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelGameplaySetupData::*)(GlobalNamespace::BeatmapDifficulty)>(&ILevelGameplaySetupData::set_beatmapDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "set_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: ILevelGameplaySetupData::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (ILevelGameplaySetupData::*)()>(&ILevelGameplaySetupData::get_gameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILevelGameplaySetupData::set_gameplayModifiers
// Il2CppName: set_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelGameplaySetupData::*)(GlobalNamespace::GameplayModifiers*)>(&ILevelGameplaySetupData::set_gameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelGameplaySetupData*), "set_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILobbyGameStateController
#include "GlobalNamespace/ILobbyGameStateController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerLobbyState
#include "GlobalNamespace/MultiplayerLobbyState.hpp"
// Including type: MultiplayerGameType
#include "GlobalNamespace/MultiplayerGameType.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILobbyGameStateController.add_gameStartedEvent
void GlobalNamespace::ILobbyGameStateController::add_gameStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_gameStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_gameStartedEvent
void GlobalNamespace::ILobbyGameStateController::remove_gameStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_gameStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_gameStartCancelledEvent
void GlobalNamespace::ILobbyGameStateController::add_gameStartCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_gameStartCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameStartCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_gameStartCancelledEvent
void GlobalNamespace::ILobbyGameStateController::remove_gameStartCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_gameStartCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameStartCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_countdownStartedEvent
void GlobalNamespace::ILobbyGameStateController::add_countdownStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_countdownStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_countdownStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_countdownStartedEvent
void GlobalNamespace::ILobbyGameStateController::remove_countdownStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_countdownStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_countdownStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_countdownCancelledEvent
void GlobalNamespace::ILobbyGameStateController::add_countdownCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_countdownCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_countdownCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_countdownCancelledEvent
void GlobalNamespace::ILobbyGameStateController::remove_countdownCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_countdownCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_countdownCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_songStillDownloadingEvent
void GlobalNamespace::ILobbyGameStateController::add_songStillDownloadingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_songStillDownloadingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_songStillDownloadingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_songStillDownloadingEvent
void GlobalNamespace::ILobbyGameStateController::remove_songStillDownloadingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_songStillDownloadingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_songStillDownloadingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_startTimeChangedEvent
void GlobalNamespace::ILobbyGameStateController::add_startTimeChangedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_startTimeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_startTimeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_startTimeChangedEvent
void GlobalNamespace::ILobbyGameStateController::remove_startTimeChangedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_startTimeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_startTimeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_levelFinishedEvent
void GlobalNamespace::ILobbyGameStateController::add_levelFinishedEvent(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_levelFinishedEvent
void GlobalNamespace::ILobbyGameStateController::remove_levelFinishedEvent(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_levelDidGetDisconnectedEvent
void GlobalNamespace::ILobbyGameStateController::add_levelDidGetDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_levelDidGetDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_levelDidGetDisconnectedEvent
void GlobalNamespace::ILobbyGameStateController::remove_levelDidGetDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_levelDidGetDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_lobbyDisconnectedEvent
void GlobalNamespace::ILobbyGameStateController::add_lobbyDisconnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_lobbyDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_lobbyDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_lobbyDisconnectedEvent
void GlobalNamespace::ILobbyGameStateController::remove_lobbyDisconnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_lobbyDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_lobbyDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.add_beforeSceneSwitchCallback
void GlobalNamespace::ILobbyGameStateController::add_beforeSceneSwitchCallback(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::add_beforeSceneSwitchCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beforeSceneSwitchCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.remove_beforeSceneSwitchCallback
void GlobalNamespace::ILobbyGameStateController::remove_beforeSceneSwitchCallback(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::remove_beforeSceneSwitchCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beforeSceneSwitchCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.get_state
GlobalNamespace::MultiplayerLobbyState GlobalNamespace::ILobbyGameStateController::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_state");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLobbyState, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.get_gameType
GlobalNamespace::MultiplayerGameType GlobalNamespace::ILobbyGameStateController::get_gameType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_gameType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerGameType, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.get_startedBeatmapId
GlobalNamespace::BeatmapIdentifierNetSerializable* GlobalNamespace::ILobbyGameStateController::get_startedBeatmapId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_startedBeatmapId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startedBeatmapId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapIdentifierNetSerializable*, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.get_countdownStarted
bool GlobalNamespace::ILobbyGameStateController::get_countdownStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_countdownStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_countdownStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.get_countdownEndTime
float GlobalNamespace::ILobbyGameStateController::get_countdownEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_countdownEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_countdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.get_levelStartInitiated
bool GlobalNamespace::ILobbyGameStateController::get_levelStartInitiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_levelStartInitiated");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelStartInitiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.get_startTime
float GlobalNamespace::ILobbyGameStateController::get_startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_startTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.set_startTime
void GlobalNamespace::ILobbyGameStateController::set_startTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::set_startTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyGameStateController.get_isDisconnected
bool GlobalNamespace::ILobbyGameStateController::get_isDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_isDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::ILobbyGameStateController::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.Activate
void GlobalNamespace::ILobbyGameStateController::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.Deactivate
void GlobalNamespace::ILobbyGameStateController::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.StartListeningToGameStart
void GlobalNamespace::ILobbyGameStateController::StartListeningToGameStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::StartListeningToGameStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartListeningToGameStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.GetCurrentLevelIfGameStarted
void GlobalNamespace::ILobbyGameStateController::GetCurrentLevelIfGameStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::GetCurrentLevelIfGameStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentLevelIfGameStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyGameStateController.SetMultiplayerGameType
void GlobalNamespace::ILobbyGameStateController::SetMultiplayerGameType(GlobalNamespace::MultiplayerGameType multiplayerGameType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::SetMultiplayerGameType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMultiplayerGameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerGameType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerGameType);
}
// Autogenerated method: ILobbyGameStateController.ClearDisconnectedState
void GlobalNamespace::ILobbyGameStateController::ClearDisconnectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyGameStateController::ClearDisconnectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearDisconnectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ILobbyGameStateController::add_gameStartedEvent
// Il2CppName: add_gameStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_gameStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_gameStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_gameStartedEvent
// Il2CppName: remove_gameStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_gameStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_gameStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_gameStartCancelledEvent
// Il2CppName: add_gameStartCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_gameStartCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_gameStartCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_gameStartCancelledEvent
// Il2CppName: remove_gameStartCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_gameStartCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_gameStartCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_countdownStartedEvent
// Il2CppName: add_countdownStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_countdownStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_countdownStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_countdownStartedEvent
// Il2CppName: remove_countdownStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_countdownStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_countdownStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_countdownCancelledEvent
// Il2CppName: add_countdownCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_countdownCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_countdownCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_countdownCancelledEvent
// Il2CppName: remove_countdownCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_countdownCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_countdownCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_songStillDownloadingEvent
// Il2CppName: add_songStillDownloadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_songStillDownloadingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_songStillDownloadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_songStillDownloadingEvent
// Il2CppName: remove_songStillDownloadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_songStillDownloadingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_songStillDownloadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_startTimeChangedEvent
// Il2CppName: add_startTimeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_startTimeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_startTimeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_startTimeChangedEvent
// Il2CppName: remove_startTimeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_startTimeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_startTimeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*)>(&ILobbyGameStateController::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*)>(&ILobbyGameStateController::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_levelDidGetDisconnectedEvent
// Il2CppName: add_levelDidGetDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&ILobbyGameStateController::add_levelDidGetDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_levelDidGetDisconnectedEvent
// Il2CppName: remove_levelDidGetDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&ILobbyGameStateController::remove_levelDidGetDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_lobbyDisconnectedEvent
// Il2CppName: add_lobbyDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_lobbyDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_lobbyDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_lobbyDisconnectedEvent
// Il2CppName: remove_lobbyDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_lobbyDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_lobbyDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::add_beforeSceneSwitchCallback
// Il2CppName: add_beforeSceneSwitchCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::add_beforeSceneSwitchCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "add_beforeSceneSwitchCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::remove_beforeSceneSwitchCallback
// Il2CppName: remove_beforeSceneSwitchCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(System::Action*)>(&ILobbyGameStateController::remove_beforeSceneSwitchCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "remove_beforeSceneSwitchCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerLobbyState (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_gameType
// Il2CppName: get_gameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerGameType (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_gameType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_gameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_startedBeatmapId
// Il2CppName: get_startedBeatmapId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapIdentifierNetSerializable* (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_startedBeatmapId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_startedBeatmapId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_countdownStarted
// Il2CppName: get_countdownStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_countdownStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_countdownStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_countdownEndTime
// Il2CppName: get_countdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_countdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_countdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_levelStartInitiated
// Il2CppName: get_levelStartInitiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_levelStartInitiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_levelStartInitiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_startTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::set_startTime
// Il2CppName: set_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(float)>(&ILobbyGameStateController::set_startTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "set_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_isDisconnected
// Il2CppName: get_isDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_isDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_isDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::get_disconnectedReason
// Il2CppName: get_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DisconnectedReason (ILobbyGameStateController::*)()>(&ILobbyGameStateController::get_disconnectedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "get_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)()>(&ILobbyGameStateController::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)()>(&ILobbyGameStateController::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::StartListeningToGameStart
// Il2CppName: StartListeningToGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)()>(&ILobbyGameStateController::StartListeningToGameStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "StartListeningToGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::GetCurrentLevelIfGameStarted
// Il2CppName: GetCurrentLevelIfGameStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)()>(&ILobbyGameStateController::GetCurrentLevelIfGameStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "GetCurrentLevelIfGameStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::SetMultiplayerGameType
// Il2CppName: SetMultiplayerGameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)(GlobalNamespace::MultiplayerGameType)>(&ILobbyGameStateController::SetMultiplayerGameType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "SetMultiplayerGameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameType>()});
  }
};
// Writing MetadataGetter for method: ILobbyGameStateController::ClearDisconnectedState
// Il2CppName: ClearDisconnectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyGameStateController::*)()>(&ILobbyGameStateController::ClearDisconnectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyGameStateController*), "ClearDisconnectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILobbyHostGameStateController
#include "GlobalNamespace/ILobbyHostGameStateController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILobbyHostGameStateController.StartGame
void GlobalNamespace::ILobbyHostGameStateController::StartGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyHostGameStateController::StartGame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyHostGameStateController.CancelGame
void GlobalNamespace::ILobbyHostGameStateController::CancelGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyHostGameStateController::CancelGame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ILobbyHostGameStateController::StartGame
// Il2CppName: StartGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyHostGameStateController::*)()>(&ILobbyHostGameStateController::StartGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyHostGameStateController*), "StartGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyHostGameStateController::CancelGame
// Il2CppName: CancelGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyHostGameStateController::*)()>(&ILobbyHostGameStateController::CancelGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyHostGameStateController*), "CancelGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILobbyPlayerDataModel
#include "GlobalNamespace/ILobbyPlayerDataModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILobbyPlayerDataModel.get_isActive
bool GlobalNamespace::ILobbyPlayerDataModel::get_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayerDataModel::get_isActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayerDataModel.set_isActive
void GlobalNamespace::ILobbyPlayerDataModel::set_isActive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayerDataModel::set_isActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyPlayerDataModel.get_isReady
bool GlobalNamespace::ILobbyPlayerDataModel::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayerDataModel::get_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayerDataModel.set_isReady
void GlobalNamespace::ILobbyPlayerDataModel::set_isReady(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayerDataModel::set_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyPlayerDataModel.get_isInLobby
bool GlobalNamespace::ILobbyPlayerDataModel::get_isInLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayerDataModel::get_isInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayerDataModel.set_isInLobby
void GlobalNamespace::ILobbyPlayerDataModel::set_isInLobby(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayerDataModel::set_isInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ILobbyPlayerDataModel::get_isActive
// Il2CppName: get_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyPlayerDataModel::*)()>(&ILobbyPlayerDataModel::get_isActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayerDataModel*), "get_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayerDataModel::set_isActive
// Il2CppName: set_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayerDataModel::*)(bool)>(&ILobbyPlayerDataModel::set_isActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayerDataModel*), "set_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayerDataModel::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyPlayerDataModel::*)()>(&ILobbyPlayerDataModel::get_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayerDataModel*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayerDataModel::set_isReady
// Il2CppName: set_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayerDataModel::*)(bool)>(&ILobbyPlayerDataModel::set_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayerDataModel*), "set_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayerDataModel::get_isInLobby
// Il2CppName: get_isInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyPlayerDataModel::*)()>(&ILobbyPlayerDataModel::get_isInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayerDataModel*), "get_isInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayerDataModel::set_isInLobby
// Il2CppName: set_isInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayerDataModel::*)(bool)>(&ILobbyPlayerDataModel::set_isInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayerDataModel*), "set_isInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ILobbyPlayersDataModel
#include "GlobalNamespace/ILobbyPlayersDataModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyDictionary`2
#include "System/Collections/Generic/IReadOnlyDictionary_2.hpp"
// Including type: ILobbyPlayerDataModel
#include "GlobalNamespace/ILobbyPlayerDataModel.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILobbyPlayersDataModel.add_didChangeEvent
void GlobalNamespace::ILobbyPlayersDataModel::add_didChangeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::add_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyPlayersDataModel.remove_didChangeEvent
void GlobalNamespace::ILobbyPlayersDataModel::remove_didChangeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::remove_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyPlayersDataModel.get_localUserId
::Il2CppString* GlobalNamespace::ILobbyPlayersDataModel::get_localUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::get_localUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.get_hostUserId
::Il2CppString* GlobalNamespace::ILobbyPlayersDataModel::get_hostUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::get_hostUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hostUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.get_playersData
System::Collections::Generic::IReadOnlyDictionary_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>* GlobalNamespace::ILobbyPlayersDataModel::get_playersData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::get_playersData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyDictionary_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>*, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.GetLobbyPlayerDataModel
GlobalNamespace::ILobbyPlayerDataModel* GlobalNamespace::ILobbyPlayersDataModel::GetLobbyPlayerDataModel(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetLobbyPlayerDataModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLobbyPlayerDataModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILobbyPlayerDataModel*, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.GetPlayerBeatmapLevel
GlobalNamespace::IPreviewBeatmapLevel* GlobalNamespace::ILobbyPlayersDataModel::GetPlayerBeatmapLevel(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetPlayerBeatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPreviewBeatmapLevel*, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.GetPlayerBeatmapDifficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::ILobbyPlayersDataModel::GetPlayerBeatmapDifficulty(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetPlayerBeatmapDifficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerBeatmapDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.GetPlayerBeatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::ILobbyPlayersDataModel::GetPlayerBeatmapCharacteristic(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetPlayerBeatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerBeatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.GetPlayerGameplayModifiers
GlobalNamespace::GameplayModifiers* GlobalNamespace::ILobbyPlayersDataModel::GetPlayerGameplayModifiers(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetPlayerGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.GetPlayerIsActive
bool GlobalNamespace::ILobbyPlayersDataModel::GetPlayerIsActive(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetPlayerIsActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.GetPlayerIsReady
bool GlobalNamespace::ILobbyPlayersDataModel::GetPlayerIsReady(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetPlayerIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.GetPlayerIsInLobby
bool GlobalNamespace::ILobbyPlayersDataModel::GetPlayerIsInLobby(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::GetPlayerIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId);
}
// Autogenerated method: ILobbyPlayersDataModel.SetLocalPlayerBeatmapLevel
void GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerBeatmapLevel(::Il2CppString* levelId, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* characteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerBeatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(beatmapDifficulty), ::il2cpp_utils::ExtractType(characteristic)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId, beatmapDifficulty, characteristic);
}
// Autogenerated method: ILobbyPlayersDataModel.ClearLocalPlayerBeatmapLevel
void GlobalNamespace::ILobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.SetLocalPlayerGameplayModifiers
void GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerGameplayModifiers(GlobalNamespace::GameplayModifiers* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(modifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, modifiers);
}
// Autogenerated method: ILobbyPlayersDataModel.ClearLocalPlayerGameplayModifiers
void GlobalNamespace::ILobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.SetLocalPlayerIsActive
void GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerIsActive(bool isActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerIsActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerIsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isActive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isActive);
}
// Autogenerated method: ILobbyPlayersDataModel.SetLocalPlayerIsReady
void GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerIsReady(bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isReady);
}
// Autogenerated method: ILobbyPlayersDataModel.SetLocalPlayerIsInLobby
void GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerIsInLobby(bool isInLobby) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::SetLocalPlayerIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isInLobby)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isInLobby);
}
// Autogenerated method: ILobbyPlayersDataModel.ClearData
void GlobalNamespace::ILobbyPlayersDataModel::ClearData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::ClearData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.ClearRecommendations
void GlobalNamespace::ILobbyPlayersDataModel::ClearRecommendations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::ClearRecommendations");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearRecommendations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.Activate
void GlobalNamespace::ILobbyPlayersDataModel::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyPlayersDataModel.Deactivate
void GlobalNamespace::ILobbyPlayersDataModel::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyPlayersDataModel::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ILobbyPlayersDataModel::add_didChangeEvent
// Il2CppName: add_didChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)(System::Action_1<::Il2CppString*>*)>(&ILobbyPlayersDataModel::add_didChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "add_didChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::remove_didChangeEvent
// Il2CppName: remove_didChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)(System::Action_1<::Il2CppString*>*)>(&ILobbyPlayersDataModel::remove_didChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "remove_didChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::get_localUserId
// Il2CppName: get_localUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::get_localUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "get_localUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::get_hostUserId
// Il2CppName: get_hostUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::get_hostUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "get_hostUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::get_playersData
// Il2CppName: get_playersData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyDictionary_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>* (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::get_playersData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "get_playersData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetLobbyPlayerDataModel
// Il2CppName: GetLobbyPlayerDataModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ILobbyPlayerDataModel* (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetLobbyPlayerDataModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetLobbyPlayerDataModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetPlayerBeatmapLevel
// Il2CppName: GetPlayerBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPreviewBeatmapLevel* (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetPlayerBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetPlayerBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetPlayerBeatmapDifficulty
// Il2CppName: GetPlayerBeatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetPlayerBeatmapDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetPlayerBeatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetPlayerBeatmapCharacteristic
// Il2CppName: GetPlayerBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetPlayerBeatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetPlayerBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetPlayerGameplayModifiers
// Il2CppName: GetPlayerGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetPlayerGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetPlayerGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetPlayerIsActive
// Il2CppName: GetPlayerIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetPlayerIsActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetPlayerIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetPlayerIsReady
// Il2CppName: GetPlayerIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetPlayerIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetPlayerIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::GetPlayerIsInLobby
// Il2CppName: GetPlayerIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyPlayersDataModel::*)(::Il2CppString*)>(&ILobbyPlayersDataModel::GetPlayerIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "GetPlayerIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::SetLocalPlayerBeatmapLevel
// Il2CppName: SetLocalPlayerBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)(::Il2CppString*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*)>(&ILobbyPlayersDataModel::SetLocalPlayerBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "SetLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel
// Il2CppName: ClearLocalPlayerBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "ClearLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::SetLocalPlayerGameplayModifiers
// Il2CppName: SetLocalPlayerGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)(GlobalNamespace::GameplayModifiers*)>(&ILobbyPlayersDataModel::SetLocalPlayerGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "SetLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers
// Il2CppName: ClearLocalPlayerGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "ClearLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::SetLocalPlayerIsActive
// Il2CppName: SetLocalPlayerIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)(bool)>(&ILobbyPlayersDataModel::SetLocalPlayerIsActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "SetLocalPlayerIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::SetLocalPlayerIsReady
// Il2CppName: SetLocalPlayerIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)(bool)>(&ILobbyPlayersDataModel::SetLocalPlayerIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "SetLocalPlayerIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::SetLocalPlayerIsInLobby
// Il2CppName: SetLocalPlayerIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)(bool)>(&ILobbyPlayersDataModel::SetLocalPlayerIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "SetLocalPlayerIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::ClearData
// Il2CppName: ClearData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::ClearData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "ClearData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::ClearRecommendations
// Il2CppName: ClearRecommendations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::ClearRecommendations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "ClearRecommendations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyPlayersDataModel::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyPlayersDataModel::*)()>(&ILobbyPlayersDataModel::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyPlayersDataModel*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILobbyStateDataModel.add_playerConnectedEvent
void GlobalNamespace::ILobbyStateDataModel::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::add_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyStateDataModel.remove_playerConnectedEvent
void GlobalNamespace::ILobbyStateDataModel::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::remove_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyStateDataModel.add_playerDisconnectedEvent
void GlobalNamespace::ILobbyStateDataModel::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::add_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyStateDataModel.remove_playerDisconnectedEvent
void GlobalNamespace::ILobbyStateDataModel::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::remove_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILobbyStateDataModel.get_isConnected
bool GlobalNamespace::ILobbyStateDataModel::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::ILobbyStateDataModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.get_connectedPlayers
System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ILobbyStateDataModel::get_connectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::get_connectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.get_rawConnectedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ILobbyStateDataModel::get_rawConnectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::get_rawConnectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rawConnectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.get_isHost
bool GlobalNamespace::ILobbyStateDataModel::get_isHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::get_isHost");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isHost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.get_maxPartySize
int GlobalNamespace::ILobbyStateDataModel::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.Activate
void GlobalNamespace::ILobbyStateDataModel::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.Deactivate
void GlobalNamespace::ILobbyStateDataModel::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ILobbyStateDataModel.GetPlayerById
GlobalNamespace::IConnectedPlayer* GlobalNamespace::ILobbyStateDataModel::GetPlayerById(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILobbyStateDataModel::GetPlayerById");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Writing MetadataGetter for method: ILobbyStateDataModel::add_playerConnectedEvent
// Il2CppName: add_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ILobbyStateDataModel::add_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "add_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::remove_playerConnectedEvent
// Il2CppName: remove_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ILobbyStateDataModel::remove_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "remove_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::add_playerDisconnectedEvent
// Il2CppName: add_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ILobbyStateDataModel::add_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "add_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::remove_playerDisconnectedEvent
// Il2CppName: remove_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ILobbyStateDataModel::remove_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::get_connectedPlayers
// Il2CppName: get_connectedPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::get_connectedPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "get_connectedPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::get_rawConnectedPlayers
// Il2CppName: get_rawConnectedPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::get_rawConnectedPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "get_rawConnectedPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::get_isHost
// Il2CppName: get_isHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::get_isHost)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "get_isHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILobbyStateDataModel::*)()>(&ILobbyStateDataModel::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ILobbyStateDataModel::GetPlayerById
// Il2CppName: GetPlayerById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (ILobbyStateDataModel::*)(::Il2CppString*)>(&ILobbyStateDataModel::GetPlayerById)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILobbyStateDataModel*), "GetPlayerById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelGameplaySetupData
#include "GlobalNamespace/LevelGameplaySetupData.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelGameplaySetupData.get_beatmapLevel
GlobalNamespace::IPreviewBeatmapLevel* GlobalNamespace::LevelGameplaySetupData::get_beatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::get_beatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPreviewBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: LevelGameplaySetupData.set_beatmapLevel
void GlobalNamespace::LevelGameplaySetupData::set_beatmapLevel(GlobalNamespace::IPreviewBeatmapLevel* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::set_beatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelGameplaySetupData.get_beatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::LevelGameplaySetupData::get_beatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::get_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: LevelGameplaySetupData.set_beatmapCharacteristic
void GlobalNamespace::LevelGameplaySetupData::set_beatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::set_beatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelGameplaySetupData.get_beatmapDifficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::LevelGameplaySetupData::get_beatmapDifficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::get_beatmapDifficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: LevelGameplaySetupData.set_beatmapDifficulty
void GlobalNamespace::LevelGameplaySetupData::set_beatmapDifficulty(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::set_beatmapDifficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelGameplaySetupData.get_gameplayModifiers
GlobalNamespace::GameplayModifiers* GlobalNamespace::LevelGameplaySetupData::get_gameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::get_gameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method);
}
// Autogenerated method: LevelGameplaySetupData.set_gameplayModifiers
void GlobalNamespace::LevelGameplaySetupData::set_gameplayModifiers(GlobalNamespace::GameplayModifiers* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::set_gameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_gameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: LevelGameplaySetupData::get_beatmapLevel
// Il2CppName: get_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPreviewBeatmapLevel* (LevelGameplaySetupData::*)()>(&LevelGameplaySetupData::get_beatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "get_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::set_beatmapLevel
// Il2CppName: set_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelGameplaySetupData::*)(GlobalNamespace::IPreviewBeatmapLevel*)>(&LevelGameplaySetupData::set_beatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "set_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (LevelGameplaySetupData::*)()>(&LevelGameplaySetupData::get_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::set_beatmapCharacteristic
// Il2CppName: set_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelGameplaySetupData::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&LevelGameplaySetupData::set_beatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "set_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::get_beatmapDifficulty
// Il2CppName: get_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (LevelGameplaySetupData::*)()>(&LevelGameplaySetupData::get_beatmapDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "get_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::set_beatmapDifficulty
// Il2CppName: set_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelGameplaySetupData::*)(GlobalNamespace::BeatmapDifficulty)>(&LevelGameplaySetupData::set_beatmapDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "set_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (LevelGameplaySetupData::*)()>(&LevelGameplaySetupData::get_gameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::set_gameplayModifiers
// Il2CppName: set_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelGameplaySetupData::*)(GlobalNamespace::GameplayModifiers*)>(&LevelGameplaySetupData::set_gameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), "set_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: LevelGameplaySetupData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelGameplaySetupData::*)()>(&LevelGameplaySetupData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelGameplaySetupData::*)()>(&LevelGameplaySetupData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelGameplaySetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LobbyDataModelsManager
#include "GlobalNamespace/LobbyDataModelsManager.hpp"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
// Including type: ILobbyPlayersDataModel
#include "GlobalNamespace/ILobbyPlayersDataModel.hpp"
// Including type: ILobbyGameStateController
#include "GlobalNamespace/ILobbyGameStateController.hpp"
// Including type: INodePoseSyncStateManager
#include "GlobalNamespace/INodePoseSyncStateManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyDataModelsManager.Activate
void GlobalNamespace::LobbyDataModelsManager::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyDataModelsManager::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyDataModelsManager.Deactivate
void GlobalNamespace::LobbyDataModelsManager::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyDataModelsManager::Deactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LobbyDataModelsManager::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyDataModelsManager::*)()>(&LobbyDataModelsManager::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyDataModelsManager*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyDataModelsManager::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyDataModelsManager::*)()>(&LobbyDataModelsManager::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyDataModelsManager*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyDataModelsManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyDataModelsManager::*)()>(&LobbyDataModelsManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyDataModelsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyDataModelsManager::*)()>(&LobbyDataModelsManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyDataModelsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LobbyGameState
#include "GlobalNamespace/LobbyGameState.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyGameState.get_gameState
GlobalNamespace::MultiplayerGameState GlobalNamespace::LobbyGameState::get_gameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::get_gameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerGameState, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameState.add_gameStateDidChangeEvent
void GlobalNamespace::LobbyGameState::add_gameStateDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::add_gameStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameState.remove_gameStateDidChangeEvent
void GlobalNamespace::LobbyGameState::remove_gameStateDidChangeEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::remove_gameStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameState.add_gameStateDidChangeAlwaysSentEvent
void GlobalNamespace::LobbyGameState::add_gameStateDidChangeAlwaysSentEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::add_gameStateDidChangeAlwaysSentEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameStateDidChangeAlwaysSentEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameState.remove_gameStateDidChangeAlwaysSentEvent
void GlobalNamespace::LobbyGameState::remove_gameStateDidChangeAlwaysSentEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::remove_gameStateDidChangeAlwaysSentEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameStateDidChangeAlwaysSentEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameState.SetGameState
void GlobalNamespace::LobbyGameState::SetGameState(GlobalNamespace::MultiplayerGameState newGameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::SetGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newGameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newGameState);
}
// Autogenerated method: LobbyGameState.SetGameStateWithoutNotification
void GlobalNamespace::LobbyGameState::SetGameStateWithoutNotification(GlobalNamespace::MultiplayerGameState newGameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::SetGameStateWithoutNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameStateWithoutNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newGameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newGameState);
}
// Autogenerated method: LobbyGameState.SetGameState
void GlobalNamespace::LobbyGameState::SetGameState(GlobalNamespace::MultiplayerGameState newGameState, bool sendNotification) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameState::SetGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newGameState), ::il2cpp_utils::ExtractType(sendNotification)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newGameState, sendNotification);
}
// Writing MetadataGetter for method: LobbyGameState::get_gameState
// Il2CppName: get_gameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerGameState (LobbyGameState::*)()>(&LobbyGameState::get_gameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "get_gameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameState::add_gameStateDidChangeEvent
// Il2CppName: add_gameStateDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)(System::Action_1<GlobalNamespace::MultiplayerGameState>*)>(&LobbyGameState::add_gameStateDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "add_gameStateDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameState::remove_gameStateDidChangeEvent
// Il2CppName: remove_gameStateDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)(System::Action_1<GlobalNamespace::MultiplayerGameState>*)>(&LobbyGameState::remove_gameStateDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "remove_gameStateDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameState::add_gameStateDidChangeAlwaysSentEvent
// Il2CppName: add_gameStateDidChangeAlwaysSentEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)(System::Action_1<GlobalNamespace::MultiplayerGameState>*)>(&LobbyGameState::add_gameStateDidChangeAlwaysSentEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "add_gameStateDidChangeAlwaysSentEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameState::remove_gameStateDidChangeAlwaysSentEvent
// Il2CppName: remove_gameStateDidChangeAlwaysSentEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)(System::Action_1<GlobalNamespace::MultiplayerGameState>*)>(&LobbyGameState::remove_gameStateDidChangeAlwaysSentEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "remove_gameStateDidChangeAlwaysSentEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameState::SetGameState
// Il2CppName: SetGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)(GlobalNamespace::MultiplayerGameState)>(&LobbyGameState::SetGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "SetGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: LobbyGameState::SetGameStateWithoutNotification
// Il2CppName: SetGameStateWithoutNotification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)(GlobalNamespace::MultiplayerGameState)>(&LobbyGameState::SetGameStateWithoutNotification)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "SetGameStateWithoutNotification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: LobbyGameState::SetGameState
// Il2CppName: SetGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)(GlobalNamespace::MultiplayerGameState, bool)>(&LobbyGameState::SetGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), "SetGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyGameState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)()>(&LobbyGameState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameState::*)()>(&LobbyGameState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LobbyGameStateController
#include "GlobalNamespace/LobbyGameStateController.hpp"
// Including type: ILobbyPlayersDataModel
#include "GlobalNamespace/ILobbyPlayersDataModel.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerLevelLoader
#include "GlobalNamespace/MultiplayerLevelLoader.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: LobbyGameState
#include "GlobalNamespace/LobbyGameState.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyGameStateController.add_gameStartedEvent
void GlobalNamespace::LobbyGameStateController::add_gameStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_gameStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_gameStartedEvent
void GlobalNamespace::LobbyGameStateController::remove_gameStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_gameStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_gameStartCancelledEvent
void GlobalNamespace::LobbyGameStateController::add_gameStartCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_gameStartCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_gameStartCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_gameStartCancelledEvent
void GlobalNamespace::LobbyGameStateController::remove_gameStartCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_gameStartCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_gameStartCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_countdownStartedEvent
void GlobalNamespace::LobbyGameStateController::add_countdownStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_countdownStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_countdownStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_countdownStartedEvent
void GlobalNamespace::LobbyGameStateController::remove_countdownStartedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_countdownStartedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_countdownStartedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_countdownCancelledEvent
void GlobalNamespace::LobbyGameStateController::add_countdownCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_countdownCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_countdownCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_countdownCancelledEvent
void GlobalNamespace::LobbyGameStateController::remove_countdownCancelledEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_countdownCancelledEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_countdownCancelledEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_songStillDownloadingEvent
void GlobalNamespace::LobbyGameStateController::add_songStillDownloadingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_songStillDownloadingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_songStillDownloadingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_songStillDownloadingEvent
void GlobalNamespace::LobbyGameStateController::remove_songStillDownloadingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_songStillDownloadingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_songStillDownloadingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_startTimeChangedEvent
void GlobalNamespace::LobbyGameStateController::add_startTimeChangedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_startTimeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_startTimeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_startTimeChangedEvent
void GlobalNamespace::LobbyGameStateController::remove_startTimeChangedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_startTimeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_startTimeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_multiplayerGameStateChangedEvent
void GlobalNamespace::LobbyGameStateController::add_multiplayerGameStateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_multiplayerGameStateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_multiplayerGameStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_multiplayerGameStateChangedEvent
void GlobalNamespace::LobbyGameStateController::remove_multiplayerGameStateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_multiplayerGameStateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_multiplayerGameStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_levelFinishedEvent
void GlobalNamespace::LobbyGameStateController::add_levelFinishedEvent(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_levelFinishedEvent
void GlobalNamespace::LobbyGameStateController::remove_levelFinishedEvent(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_levelDidGetDisconnectedEvent
void GlobalNamespace::LobbyGameStateController::add_levelDidGetDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_levelDidGetDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_levelDidGetDisconnectedEvent
void GlobalNamespace::LobbyGameStateController::remove_levelDidGetDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_levelDidGetDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_lobbyDisconnectedEvent
void GlobalNamespace::LobbyGameStateController::add_lobbyDisconnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_lobbyDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_lobbyDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_lobbyDisconnectedEvent
void GlobalNamespace::LobbyGameStateController::remove_lobbyDisconnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_lobbyDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_lobbyDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.add_beforeSceneSwitchCallback
void GlobalNamespace::LobbyGameStateController::add_beforeSceneSwitchCallback(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::add_beforeSceneSwitchCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beforeSceneSwitchCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.remove_beforeSceneSwitchCallback
void GlobalNamespace::LobbyGameStateController::remove_beforeSceneSwitchCallback(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::remove_beforeSceneSwitchCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beforeSceneSwitchCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_startTime
float GlobalNamespace::LobbyGameStateController::get_startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_startTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_startTime
void GlobalNamespace::LobbyGameStateController::set_startTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_startTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_levelStartInitiated
bool GlobalNamespace::LobbyGameStateController::get_levelStartInitiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_levelStartInitiated");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelStartInitiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_levelStartInitiated
void GlobalNamespace::LobbyGameStateController::set_levelStartInitiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_levelStartInitiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_levelStartInitiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_startedBeatmapId
GlobalNamespace::BeatmapIdentifierNetSerializable* GlobalNamespace::LobbyGameStateController::get_startedBeatmapId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_startedBeatmapId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startedBeatmapId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapIdentifierNetSerializable*, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_startedBeatmapId
void GlobalNamespace::LobbyGameStateController::set_startedBeatmapId(GlobalNamespace::BeatmapIdentifierNetSerializable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_startedBeatmapId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startedBeatmapId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_countdownStarted
bool GlobalNamespace::LobbyGameStateController::get_countdownStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_countdownStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_countdownStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_countdownStarted
void GlobalNamespace::LobbyGameStateController::set_countdownStarted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_countdownStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_countdownStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_countdownEndTime
float GlobalNamespace::LobbyGameStateController::get_countdownEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_countdownEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_countdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_countdownEndTime
void GlobalNamespace::LobbyGameStateController::set_countdownEndTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_countdownEndTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_countdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_state
GlobalNamespace::MultiplayerLobbyState GlobalNamespace::LobbyGameStateController::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_state");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLobbyState, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_state
void GlobalNamespace::LobbyGameStateController::set_state(GlobalNamespace::MultiplayerLobbyState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_gameType
GlobalNamespace::MultiplayerGameType GlobalNamespace::LobbyGameStateController::get_gameType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_gameType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerGameType, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_gameType
void GlobalNamespace::LobbyGameStateController::set_gameType(GlobalNamespace::MultiplayerGameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_gameType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_gameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_isDisconnected
bool GlobalNamespace::LobbyGameStateController::get_isDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_isDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_isDisconnected
void GlobalNamespace::LobbyGameStateController::set_isDisconnected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_isDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::LobbyGameStateController::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.set_disconnectedReason
void GlobalNamespace::LobbyGameStateController::set_disconnectedReason(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::set_disconnectedReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyGameStateController.Activate
void GlobalNamespace::LobbyGameStateController::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.Deactivate
void GlobalNamespace::LobbyGameStateController::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.Dispose
void GlobalNamespace::LobbyGameStateController::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.StartListeningToGameStart
void GlobalNamespace::LobbyGameStateController::StartListeningToGameStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::StartListeningToGameStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartListeningToGameStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.GetCurrentLevelIfGameStarted
void GlobalNamespace::LobbyGameStateController::GetCurrentLevelIfGameStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::GetCurrentLevelIfGameStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentLevelIfGameStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.SetMultiplayerGameType
void GlobalNamespace::LobbyGameStateController::SetMultiplayerGameType(GlobalNamespace::MultiplayerGameType multiplayerGameType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::SetMultiplayerGameType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMultiplayerGameType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerGameType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerGameType);
}
// Autogenerated method: LobbyGameStateController.ClearDisconnectedState
void GlobalNamespace::LobbyGameStateController::ClearDisconnectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::ClearDisconnectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearDisconnectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.StartGame
void GlobalNamespace::LobbyGameStateController::StartGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::StartGame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.CancelGame
void GlobalNamespace::LobbyGameStateController::CancelGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::CancelGame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.HandleMultiplayerSessionManagerDisconnected
void GlobalNamespace::LobbyGameStateController::HandleMultiplayerSessionManagerDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMultiplayerSessionManagerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: LobbyGameStateController.HandleGameStateDidChange
void GlobalNamespace::LobbyGameStateController::HandleGameStateDidChange(GlobalNamespace::MultiplayerGameState newGameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleGameStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newGameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newGameState);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerGetMultiplayerGameState
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerGetMultiplayerGameState(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerGetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerGetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerSetMultiplayerGameState
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState newGameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(newGameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, newGameState);
}
// Autogenerated method: LobbyGameStateController.StopListeningToGameStart
void GlobalNamespace::LobbyGameStateController::StopListeningToGameStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::StopListeningToGameStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopListeningToGameStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerGetStartedLevel
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerGetStartedLevel(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerGetStartedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerGetStartedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerStartedLevel
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerStartedLevel(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerStartedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerStartedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, beatmapId, gameplayModifiers, startTime);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerCancelledLevelStart
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelledLevelStart(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelledLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerCancelledLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerSetCountdownEndTime
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetCountdownEndTime(::Il2CppString* userId, float countdownTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetCountdownEndTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetCountdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(countdownTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, countdownTime);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerCancelCountdown
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelCountdown(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerCancelCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyGameStateController.HandleMenuRpcManagerSetStartGameTime
void GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetStartGameTime(::Il2CppString* userId, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetStartGameTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetStartGameTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, startTime);
}
// Autogenerated method: LobbyGameStateController.HandleStartTimeChanged
void GlobalNamespace::LobbyGameStateController::HandleStartTimeChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleStartTimeChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStartTimeChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.HandleMultiplayerLevelLoaderStillDownloadingSong
void GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderStillDownloadingSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderStillDownloadingSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelLoaderStillDownloadingSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyGameStateController.HandleMultiplayerLevelLoaderCountdownFinished
void GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderCountdownFinished(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderCountdownFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelLoaderCountdownFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(beatmapDifficulty), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, previewBeatmapLevel, beatmapDifficulty, beatmapCharacteristic, difficultyBeatmap, gameplayModifiers);
}
// Autogenerated method: LobbyGameStateController.StartMultiplayerLevel
void GlobalNamespace::LobbyGameStateController::StartMultiplayerLevel(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, System::Action* beforeSceneSwitchCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::StartMultiplayerLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartMultiplayerLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(beatmapDifficulty), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(beforeSceneSwitchCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, previewBeatmapLevel, beatmapDifficulty, beatmapCharacteristic, difficultyBeatmap, gameplayModifiers, beforeSceneSwitchCallback);
}
// Autogenerated method: LobbyGameStateController.HandleMultiplayerLevelDidFinish
void GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidFinish(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(multiplayerResultsData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerLevelScenesTransitionSetupData, multiplayerResultsData);
}
// Autogenerated method: LobbyGameStateController.HandleMultiplayerLevelDidDisconnect
void GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidDisconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidDisconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelDidDisconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: LobbyGameStateController.StopLoading
void GlobalNamespace::LobbyGameStateController::StopLoading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::StopLoading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopLoading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LobbyGameStateController::add_gameStartedEvent
// Il2CppName: add_gameStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_gameStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_gameStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_gameStartedEvent
// Il2CppName: remove_gameStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_gameStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_gameStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_gameStartCancelledEvent
// Il2CppName: add_gameStartCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_gameStartCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_gameStartCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_gameStartCancelledEvent
// Il2CppName: remove_gameStartCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_gameStartCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_gameStartCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_countdownStartedEvent
// Il2CppName: add_countdownStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_countdownStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_countdownStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_countdownStartedEvent
// Il2CppName: remove_countdownStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_countdownStartedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_countdownStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_countdownCancelledEvent
// Il2CppName: add_countdownCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_countdownCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_countdownCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_countdownCancelledEvent
// Il2CppName: remove_countdownCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_countdownCancelledEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_countdownCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_songStillDownloadingEvent
// Il2CppName: add_songStillDownloadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_songStillDownloadingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_songStillDownloadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_songStillDownloadingEvent
// Il2CppName: remove_songStillDownloadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_songStillDownloadingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_songStillDownloadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_startTimeChangedEvent
// Il2CppName: add_startTimeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_startTimeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_startTimeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_startTimeChangedEvent
// Il2CppName: remove_startTimeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_startTimeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_startTimeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_multiplayerGameStateChangedEvent
// Il2CppName: add_multiplayerGameStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action_1<GlobalNamespace::MultiplayerGameState>*)>(&LobbyGameStateController::add_multiplayerGameStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_multiplayerGameStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_multiplayerGameStateChangedEvent
// Il2CppName: remove_multiplayerGameStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action_1<GlobalNamespace::MultiplayerGameState>*)>(&LobbyGameStateController::remove_multiplayerGameStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_multiplayerGameStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*)>(&LobbyGameStateController::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*)>(&LobbyGameStateController::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_levelDidGetDisconnectedEvent
// Il2CppName: add_levelDidGetDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&LobbyGameStateController::add_levelDidGetDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_levelDidGetDisconnectedEvent
// Il2CppName: remove_levelDidGetDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&LobbyGameStateController::remove_levelDidGetDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_lobbyDisconnectedEvent
// Il2CppName: add_lobbyDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_lobbyDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_lobbyDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_lobbyDisconnectedEvent
// Il2CppName: remove_lobbyDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_lobbyDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_lobbyDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::add_beforeSceneSwitchCallback
// Il2CppName: add_beforeSceneSwitchCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::add_beforeSceneSwitchCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "add_beforeSceneSwitchCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::remove_beforeSceneSwitchCallback
// Il2CppName: remove_beforeSceneSwitchCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(System::Action*)>(&LobbyGameStateController::remove_beforeSceneSwitchCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "remove_beforeSceneSwitchCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LobbyGameStateController::*)()>(&LobbyGameStateController::get_startTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_startTime
// Il2CppName: set_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(float)>(&LobbyGameStateController::set_startTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_levelStartInitiated
// Il2CppName: get_levelStartInitiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyGameStateController::*)()>(&LobbyGameStateController::get_levelStartInitiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_levelStartInitiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_levelStartInitiated
// Il2CppName: set_levelStartInitiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(bool)>(&LobbyGameStateController::set_levelStartInitiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_levelStartInitiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_startedBeatmapId
// Il2CppName: get_startedBeatmapId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapIdentifierNetSerializable* (LobbyGameStateController::*)()>(&LobbyGameStateController::get_startedBeatmapId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_startedBeatmapId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_startedBeatmapId
// Il2CppName: set_startedBeatmapId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*)>(&LobbyGameStateController::set_startedBeatmapId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_startedBeatmapId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_countdownStarted
// Il2CppName: get_countdownStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyGameStateController::*)()>(&LobbyGameStateController::get_countdownStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_countdownStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_countdownStarted
// Il2CppName: set_countdownStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(bool)>(&LobbyGameStateController::set_countdownStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_countdownStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_countdownEndTime
// Il2CppName: get_countdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LobbyGameStateController::*)()>(&LobbyGameStateController::get_countdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_countdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_countdownEndTime
// Il2CppName: set_countdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(float)>(&LobbyGameStateController::set_countdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_countdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerLobbyState (LobbyGameStateController::*)()>(&LobbyGameStateController::get_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_state
// Il2CppName: set_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::MultiplayerLobbyState)>(&LobbyGameStateController::set_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLobbyState>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_gameType
// Il2CppName: get_gameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerGameType (LobbyGameStateController::*)()>(&LobbyGameStateController::get_gameType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_gameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_gameType
// Il2CppName: set_gameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::MultiplayerGameType)>(&LobbyGameStateController::set_gameType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_gameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameType>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_isDisconnected
// Il2CppName: get_isDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyGameStateController::*)()>(&LobbyGameStateController::get_isDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_isDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_isDisconnected
// Il2CppName: set_isDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(bool)>(&LobbyGameStateController::set_isDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_isDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::get_disconnectedReason
// Il2CppName: get_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DisconnectedReason (LobbyGameStateController::*)()>(&LobbyGameStateController::get_disconnectedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "get_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::set_disconnectedReason
// Il2CppName: set_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::DisconnectedReason)>(&LobbyGameStateController::set_disconnectedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "set_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::StartListeningToGameStart
// Il2CppName: StartListeningToGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::StartListeningToGameStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "StartListeningToGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::GetCurrentLevelIfGameStarted
// Il2CppName: GetCurrentLevelIfGameStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::GetCurrentLevelIfGameStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "GetCurrentLevelIfGameStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::SetMultiplayerGameType
// Il2CppName: SetMultiplayerGameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::MultiplayerGameType)>(&LobbyGameStateController::SetMultiplayerGameType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "SetMultiplayerGameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameType>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::ClearDisconnectedState
// Il2CppName: ClearDisconnectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::ClearDisconnectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "ClearDisconnectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::StartGame
// Il2CppName: StartGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::StartGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "StartGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::CancelGame
// Il2CppName: CancelGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::CancelGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "CancelGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMultiplayerSessionManagerDisconnected
// Il2CppName: HandleMultiplayerSessionManagerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::DisconnectedReason)>(&LobbyGameStateController::HandleMultiplayerSessionManagerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMultiplayerSessionManagerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleGameStateDidChange
// Il2CppName: HandleGameStateDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::MultiplayerGameState)>(&LobbyGameStateController::HandleGameStateDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleGameStateDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerGetMultiplayerGameState
// Il2CppName: HandleMenuRpcManagerGetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*)>(&LobbyGameStateController::HandleMenuRpcManagerGetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerGetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerSetMultiplayerGameState
// Il2CppName: HandleMenuRpcManagerSetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*, GlobalNamespace::MultiplayerGameState)>(&LobbyGameStateController::HandleMenuRpcManagerSetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerSetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::StopListeningToGameStart
// Il2CppName: StopListeningToGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::StopListeningToGameStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "StopListeningToGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerGetStartedLevel
// Il2CppName: HandleMenuRpcManagerGetStartedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*)>(&LobbyGameStateController::HandleMenuRpcManagerGetStartedLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerGetStartedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerStartedLevel
// Il2CppName: HandleMenuRpcManagerStartedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float)>(&LobbyGameStateController::HandleMenuRpcManagerStartedLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerStartedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerCancelledLevelStart
// Il2CppName: HandleMenuRpcManagerCancelledLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*)>(&LobbyGameStateController::HandleMenuRpcManagerCancelledLevelStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerCancelledLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerSetCountdownEndTime
// Il2CppName: HandleMenuRpcManagerSetCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*, float)>(&LobbyGameStateController::HandleMenuRpcManagerSetCountdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerSetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerCancelCountdown
// Il2CppName: HandleMenuRpcManagerCancelCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*)>(&LobbyGameStateController::HandleMenuRpcManagerCancelCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerCancelCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMenuRpcManagerSetStartGameTime
// Il2CppName: HandleMenuRpcManagerSetStartGameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(::Il2CppString*, float)>(&LobbyGameStateController::HandleMenuRpcManagerSetStartGameTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMenuRpcManagerSetStartGameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleStartTimeChanged
// Il2CppName: HandleStartTimeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::HandleStartTimeChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleStartTimeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMultiplayerLevelLoaderStillDownloadingSong
// Il2CppName: HandleMultiplayerLevelLoaderStillDownloadingSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::HandleMultiplayerLevelLoaderStillDownloadingSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMultiplayerLevelLoaderStillDownloadingSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMultiplayerLevelLoaderCountdownFinished
// Il2CppName: HandleMultiplayerLevelLoaderCountdownFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*)>(&LobbyGameStateController::HandleMultiplayerLevelLoaderCountdownFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMultiplayerLevelLoaderCountdownFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::StartMultiplayerLevel
// Il2CppName: StartMultiplayerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, System::Action*)>(&LobbyGameStateController::StartMultiplayerLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "StartMultiplayerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMultiplayerLevelDidFinish
// Il2CppName: HandleMultiplayerLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*)>(&LobbyGameStateController::HandleMultiplayerLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMultiplayerLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsData*>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::HandleMultiplayerLevelDidDisconnect
// Il2CppName: HandleMultiplayerLevelDidDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)(GlobalNamespace::DisconnectedReason)>(&LobbyGameStateController::HandleMultiplayerLevelDidDisconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "HandleMultiplayerLevelDidDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::StopLoading
// Il2CppName: StopLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::StopLoading)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), "StopLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyGameStateController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyGameStateController::*)()>(&LobbyGameStateController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyGameStateController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LobbyPlayerDataModel
#include "GlobalNamespace/LobbyPlayerDataModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyPlayerDataModel.get_isActive
bool GlobalNamespace::LobbyPlayerDataModel::get_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayerDataModel::get_isActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayerDataModel.set_isActive
void GlobalNamespace::LobbyPlayerDataModel::set_isActive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayerDataModel::set_isActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyPlayerDataModel.get_isReady
bool GlobalNamespace::LobbyPlayerDataModel::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayerDataModel::get_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayerDataModel.set_isReady
void GlobalNamespace::LobbyPlayerDataModel::set_isReady(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayerDataModel::set_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyPlayerDataModel.get_isInLobby
bool GlobalNamespace::LobbyPlayerDataModel::get_isInLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayerDataModel::get_isInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayerDataModel.set_isInLobby
void GlobalNamespace::LobbyPlayerDataModel::set_isInLobby(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayerDataModel::set_isInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: LobbyPlayerDataModel::get_isActive
// Il2CppName: get_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyPlayerDataModel::*)()>(&LobbyPlayerDataModel::get_isActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), "get_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayerDataModel::set_isActive
// Il2CppName: set_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayerDataModel::*)(bool)>(&LobbyPlayerDataModel::set_isActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), "set_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayerDataModel::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyPlayerDataModel::*)()>(&LobbyPlayerDataModel::get_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayerDataModel::set_isReady
// Il2CppName: set_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayerDataModel::*)(bool)>(&LobbyPlayerDataModel::set_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), "set_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayerDataModel::get_isInLobby
// Il2CppName: get_isInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyPlayerDataModel::*)()>(&LobbyPlayerDataModel::get_isInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), "get_isInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayerDataModel::set_isInLobby
// Il2CppName: set_isInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayerDataModel::*)(bool)>(&LobbyPlayerDataModel::set_isInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), "set_isInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayerDataModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayerDataModel::*)()>(&LobbyPlayerDataModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayerDataModel::*)()>(&LobbyPlayerDataModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayerDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LobbyPlayersDataModel
#include "GlobalNamespace/LobbyPlayersDataModel.hpp"
// Including type: LobbyPlayersDataModel/<>c
#include "GlobalNamespace/LobbyPlayersDataModel_--c.hpp"
// Including type: LobbyPlayersDataModel/<SetOwnedSongPacks>d__42
#include "GlobalNamespace/LobbyPlayersDataModel_-SetOwnedSongPacks-d__42.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: BeatmapCharacteristicCollectionSO
#include "GlobalNamespace/BeatmapCharacteristicCollectionSO.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: ILobbyPlayerDataModel
#include "GlobalNamespace/ILobbyPlayerDataModel.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyDictionary`2
#include "System/Collections/Generic/IReadOnlyDictionary_2.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyPlayersDataModel.get_localUserId
::Il2CppString* GlobalNamespace::LobbyPlayersDataModel::get_localUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::get_localUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.get_hostUserId
::Il2CppString* GlobalNamespace::LobbyPlayersDataModel::get_hostUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::get_hostUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hostUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.add_didChangeEvent
void GlobalNamespace::LobbyPlayersDataModel::add_didChangeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::add_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyPlayersDataModel.remove_didChangeEvent
void GlobalNamespace::LobbyPlayersDataModel::remove_didChangeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::remove_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyPlayersDataModel.get_playersData
System::Collections::Generic::IReadOnlyDictionary_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>* GlobalNamespace::LobbyPlayersDataModel::get_playersData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::get_playersData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playersData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyDictionary_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>*, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.GetLobbyPlayerDataModel
GlobalNamespace::ILobbyPlayerDataModel* GlobalNamespace::LobbyPlayersDataModel::GetLobbyPlayerDataModel(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetLobbyPlayerDataModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLobbyPlayerDataModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILobbyPlayerDataModel*, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetPlayerBeatmapLevel
GlobalNamespace::IPreviewBeatmapLevel* GlobalNamespace::LobbyPlayersDataModel::GetPlayerBeatmapLevel(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetPlayerBeatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPreviewBeatmapLevel*, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetPlayerGameplayModifiers
GlobalNamespace::GameplayModifiers* GlobalNamespace::LobbyPlayersDataModel::GetPlayerGameplayModifiers(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetPlayerGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetPlayerBeatmapDifficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::LobbyPlayersDataModel::GetPlayerBeatmapDifficulty(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetPlayerBeatmapDifficulty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerBeatmapDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetPlayerBeatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::LobbyPlayersDataModel::GetPlayerBeatmapCharacteristic(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetPlayerBeatmapCharacteristic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerBeatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetPlayerIsActive
bool GlobalNamespace::LobbyPlayersDataModel::GetPlayerIsActive(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetPlayerIsActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetPlayerIsReady
bool GlobalNamespace::LobbyPlayersDataModel::GetPlayerIsReady(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetPlayerIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetPlayerIsInLobby
bool GlobalNamespace::LobbyPlayersDataModel::GetPlayerIsInLobby(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetPlayerIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.GetOrCreateLobbyPlayerDataModel
GlobalNamespace::ILobbyPlayerDataModel* GlobalNamespace::LobbyPlayersDataModel::GetOrCreateLobbyPlayerDataModel(::Il2CppString* userId, bool& alreadyExists) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::GetOrCreateLobbyPlayerDataModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOrCreateLobbyPlayerDataModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILobbyPlayerDataModel*, false>(this, ___internal__method, userId, alreadyExists);
}
// Autogenerated method: LobbyPlayersDataModel.SetPlayerBeatmapLevel
void GlobalNamespace::LobbyPlayersDataModel::SetPlayerBeatmapLevel(::Il2CppString* userId, GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* characteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetPlayerBeatmapLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(beatmapLevel), ::il2cpp_utils::ExtractType(beatmapDifficulty), ::il2cpp_utils::ExtractType(characteristic)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, beatmapLevel, beatmapDifficulty, characteristic);
}
// Autogenerated method: LobbyPlayersDataModel.SetPlayerGameplayModifiers
void GlobalNamespace::LobbyPlayersDataModel::SetPlayerGameplayModifiers(::Il2CppString* userId, GlobalNamespace::GameplayModifiers* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetPlayerGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(modifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, modifiers);
}
// Autogenerated method: LobbyPlayersDataModel.SetPlayerIsActive
void GlobalNamespace::LobbyPlayersDataModel::SetPlayerIsActive(::Il2CppString* userId, bool isActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetPlayerIsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerIsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isActive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isActive);
}
// Autogenerated method: LobbyPlayersDataModel.SetPlayerIsReady
void GlobalNamespace::LobbyPlayersDataModel::SetPlayerIsReady(::Il2CppString* userId, bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetPlayerIsReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isReady);
}
// Autogenerated method: LobbyPlayersDataModel.SetPlayerIsInLobby
void GlobalNamespace::LobbyPlayersDataModel::SetPlayerIsInLobby(::Il2CppString* userId, bool isInLobby) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetPlayerIsInLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isInLobby)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isInLobby);
}
// Autogenerated method: LobbyPlayersDataModel.SetLocalPlayerBeatmapLevel
void GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerBeatmapLevel(::Il2CppString* levelId, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* characteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerBeatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(beatmapDifficulty), ::il2cpp_utils::ExtractType(characteristic)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId, beatmapDifficulty, characteristic);
}
// Autogenerated method: LobbyPlayersDataModel.ClearLocalPlayerBeatmapLevel
void GlobalNamespace::LobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.SetLocalPlayerGameplayModifiers
void GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerGameplayModifiers(GlobalNamespace::GameplayModifiers* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(modifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, modifiers);
}
// Autogenerated method: LobbyPlayersDataModel.ClearLocalPlayerGameplayModifiers
void GlobalNamespace::LobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.SetLocalPlayerIsActive
void GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerIsActive(bool isActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerIsActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerIsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isActive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isActive);
}
// Autogenerated method: LobbyPlayersDataModel.SetLocalPlayerIsReady
void GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerIsReady(bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isReady);
}
// Autogenerated method: LobbyPlayersDataModel.SetLocalPlayerIsInLobby
void GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerIsInLobby(bool isInLobby) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetLocalPlayerIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isInLobby)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isInLobby);
}
// Autogenerated method: LobbyPlayersDataModel.ClearData
void GlobalNamespace::LobbyPlayersDataModel::ClearData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::ClearData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.ClearRecommendations
void GlobalNamespace::LobbyPlayersDataModel::ClearRecommendations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::ClearRecommendations");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearRecommendations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.Activate
void GlobalNamespace::LobbyPlayersDataModel::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.Deactivate
void GlobalNamespace::LobbyPlayersDataModel::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.Dispose
void GlobalNamespace::LobbyPlayersDataModel::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.SetOwnedSongPacks
void GlobalNamespace::LobbyPlayersDataModel::SetOwnedSongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::SetOwnedSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerGetSelectedBeatmap
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedBeatmap(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerGetSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerGetSelectedGameplayModifiers
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedGameplayModifiers(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerGetSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerGetIsInLobby
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetIsInLobby(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetIsInLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerGetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerGetIsReady
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetIsReady(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetIsReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerGetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerSelectedBeatmap
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSelectedBeatmap(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSelectedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(beatmapId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, beatmapId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerSelectedGameplayModifiers
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSelectedGameplayModifiers(::Il2CppString* userId, GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSelectedGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(gameplayModifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, gameplayModifiers);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerClearSelectedGameplayModifiers
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerClearSelectedGameplayModifiers(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerClearSelectedGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerClearSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerClearBeatmap
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerClearBeatmap(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerClearBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerClearBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerSetIsReady
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSetIsReady(::Il2CppString* userId, bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSetIsReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isReady);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerSetIsInLobby
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSetIsInLobby(::Il2CppString* userId, bool isInLobby) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerSetIsInLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isInLobby)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isInLobby);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMultiplayerSessionManagerPlayerStateChanged
void GlobalNamespace::LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerPlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMultiplayerSessionManagerPlayerConnected
void GlobalNamespace::LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerPlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMultiplayerSessionManagerPlayerDisconnected
void GlobalNamespace::LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerPlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: LobbyPlayersDataModel.NotifyModelChange
void GlobalNamespace::LobbyPlayersDataModel::NotifyModelChange(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::NotifyModelChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NotifyModelChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyPlayersDataModel.HandleMenuRpcManagerGetOwnedSongPacks
void GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetOwnedSongPacks(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::HandleMenuRpcManagerGetOwnedSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerGetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Writing MetadataGetter for method: LobbyPlayersDataModel::get_localUserId
// Il2CppName: get_localUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::get_localUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "get_localUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::get_hostUserId
// Il2CppName: get_hostUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::get_hostUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "get_hostUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::add_didChangeEvent
// Il2CppName: add_didChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(System::Action_1<::Il2CppString*>*)>(&LobbyPlayersDataModel::add_didChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "add_didChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::remove_didChangeEvent
// Il2CppName: remove_didChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(System::Action_1<::Il2CppString*>*)>(&LobbyPlayersDataModel::remove_didChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "remove_didChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::get_playersData
// Il2CppName: get_playersData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyDictionary_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>* (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::get_playersData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "get_playersData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetLobbyPlayerDataModel
// Il2CppName: GetLobbyPlayerDataModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ILobbyPlayerDataModel* (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetLobbyPlayerDataModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetLobbyPlayerDataModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetPlayerBeatmapLevel
// Il2CppName: GetPlayerBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPreviewBeatmapLevel* (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetPlayerBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetPlayerBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetPlayerGameplayModifiers
// Il2CppName: GetPlayerGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetPlayerGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetPlayerGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetPlayerBeatmapDifficulty
// Il2CppName: GetPlayerBeatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetPlayerBeatmapDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetPlayerBeatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetPlayerBeatmapCharacteristic
// Il2CppName: GetPlayerBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetPlayerBeatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetPlayerBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetPlayerIsActive
// Il2CppName: GetPlayerIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetPlayerIsActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetPlayerIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetPlayerIsReady
// Il2CppName: GetPlayerIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetPlayerIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetPlayerIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetPlayerIsInLobby
// Il2CppName: GetPlayerIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::GetPlayerIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetPlayerIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::GetOrCreateLobbyPlayerDataModel
// Il2CppName: GetOrCreateLobbyPlayerDataModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ILobbyPlayerDataModel* (LobbyPlayersDataModel::*)(::Il2CppString*, bool&)>(&LobbyPlayersDataModel::GetOrCreateLobbyPlayerDataModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "GetOrCreateLobbyPlayerDataModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetPlayerBeatmapLevel
// Il2CppName: SetPlayerBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*)>(&LobbyPlayersDataModel::SetPlayerBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetPlayerBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetPlayerGameplayModifiers
// Il2CppName: SetPlayerGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, GlobalNamespace::GameplayModifiers*)>(&LobbyPlayersDataModel::SetPlayerGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetPlayerGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetPlayerIsActive
// Il2CppName: SetPlayerIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, bool)>(&LobbyPlayersDataModel::SetPlayerIsActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetPlayerIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetPlayerIsReady
// Il2CppName: SetPlayerIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, bool)>(&LobbyPlayersDataModel::SetPlayerIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetPlayerIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetPlayerIsInLobby
// Il2CppName: SetPlayerIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, bool)>(&LobbyPlayersDataModel::SetPlayerIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetPlayerIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetLocalPlayerBeatmapLevel
// Il2CppName: SetLocalPlayerBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*)>(&LobbyPlayersDataModel::SetLocalPlayerBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel
// Il2CppName: ClearLocalPlayerBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::ClearLocalPlayerBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "ClearLocalPlayerBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetLocalPlayerGameplayModifiers
// Il2CppName: SetLocalPlayerGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(GlobalNamespace::GameplayModifiers*)>(&LobbyPlayersDataModel::SetLocalPlayerGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers
// Il2CppName: ClearLocalPlayerGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::ClearLocalPlayerGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "ClearLocalPlayerGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetLocalPlayerIsActive
// Il2CppName: SetLocalPlayerIsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(bool)>(&LobbyPlayersDataModel::SetLocalPlayerIsActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetLocalPlayerIsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetLocalPlayerIsReady
// Il2CppName: SetLocalPlayerIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(bool)>(&LobbyPlayersDataModel::SetLocalPlayerIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetLocalPlayerIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetLocalPlayerIsInLobby
// Il2CppName: SetLocalPlayerIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(bool)>(&LobbyPlayersDataModel::SetLocalPlayerIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetLocalPlayerIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::ClearData
// Il2CppName: ClearData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::ClearData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "ClearData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::ClearRecommendations
// Il2CppName: ClearRecommendations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::ClearRecommendations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "ClearRecommendations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::SetOwnedSongPacks
// Il2CppName: SetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::SetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "SetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedBeatmap
// Il2CppName: HandleMenuRpcManagerGetSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerGetSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedGameplayModifiers
// Il2CppName: HandleMenuRpcManagerGetSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerGetSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerGetSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerGetIsInLobby
// Il2CppName: HandleMenuRpcManagerGetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerGetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerGetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerGetIsReady
// Il2CppName: HandleMenuRpcManagerGetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerGetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerGetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerSelectedBeatmap
// Il2CppName: HandleMenuRpcManagerSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerSelectedGameplayModifiers
// Il2CppName: HandleMenuRpcManagerSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, GlobalNamespace::GameplayModifiers*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerClearSelectedGameplayModifiers
// Il2CppName: HandleMenuRpcManagerClearSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerClearSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerClearSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerClearBeatmap
// Il2CppName: HandleMenuRpcManagerClearBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerClearBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerClearBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerSetIsReady
// Il2CppName: HandleMenuRpcManagerSetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, bool)>(&LobbyPlayersDataModel::HandleMenuRpcManagerSetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerSetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerSetIsInLobby
// Il2CppName: HandleMenuRpcManagerSetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*, bool)>(&LobbyPlayersDataModel::HandleMenuRpcManagerSetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerSetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerStateChanged
// Il2CppName: HandleMultiplayerSessionManagerPlayerStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMultiplayerSessionManagerPlayerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerConnected
// Il2CppName: HandleMultiplayerSessionManagerPlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMultiplayerSessionManagerPlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerDisconnected
// Il2CppName: HandleMultiplayerSessionManagerPlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LobbyPlayersDataModel::HandleMultiplayerSessionManagerPlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMultiplayerSessionManagerPlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::NotifyModelChange
// Il2CppName: NotifyModelChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::NotifyModelChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "NotifyModelChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::HandleMenuRpcManagerGetOwnedSongPacks
// Il2CppName: HandleMenuRpcManagerGetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)(::Il2CppString*)>(&LobbyPlayersDataModel::HandleMenuRpcManagerGetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), "HandleMenuRpcManagerGetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::*)()>(&LobbyPlayersDataModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
