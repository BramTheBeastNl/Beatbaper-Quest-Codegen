// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative
#include "Valve/VR/IVROverlay__GetOverlayTransformTrackedDeviceRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::Invoke(uint64_t ulOverlayHandle, uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::BeginInvoke(uint64_t ulOverlayHandle, uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::EndInvoke(uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punTrackedDevice, pmatTrackedDeviceToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punTrackedDevice, pmatTrackedDeviceToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent
#include "Valve/VR/IVROverlay__SetOverlayTransformTrackedDeviceComponent.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::Invoke(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unDeviceIndex, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::BeginInvoke(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unDeviceIndex, pchComponentName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent
#include "Valve/VR/IVROverlay__GetOverlayTransformTrackedDeviceComponent.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::Invoke(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::BeginInvoke(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::EndInvoke(uint& punDeviceIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punDeviceIndex, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punDeviceIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative
#include "Valve/VR/IVROverlay__GetOverlayTransformOverlayRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::Invoke(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::BeginInvoke(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTransformOverlayRelative.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::EndInvoke(uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTransformOverlayRelative::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative
#include "Valve/VR/IVROverlay__SetOverlayTransformOverlayRelative.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::Invoke(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTransformOverlayRelative.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::EndInvoke(Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTransformOverlayRelative::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatParentOverlayToOverlayTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pmatParentOverlayToOverlayTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowOverlay
#include "Valve/VR/IVROverlay__ShowOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_HideOverlay
#include "Valve/VR/IVROverlay__HideOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_HideOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_HideOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_HideOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsOverlayVisible
#include "Valve/VR/IVROverlay__IsOverlayVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.Invoke
bool Valve::VR::IVROverlay::_IsOverlayVisible::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsOverlayVisible::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsOverlayVisible::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsOverlayVisible::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsOverlayVisible.EndInvoke
bool Valve::VR::IVROverlay::_IsOverlayVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsOverlayVisible::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates
#include "Valve/VR/IVROverlay__GetTransformForOverlayCoordinates.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::Invoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdVector2_t coordinatesInOverlay, Valve::VR::HmdMatrix34_t& pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdVector2_t coordinatesInOverlay, Valve::VR::HmdMatrix34_t& pmatTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetTransformForOverlayCoordinates.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::EndInvoke(Valve::VR::HmdMatrix34_t& pmatTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetTransformForOverlayCoordinates::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatTransform, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pmatTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_PollNextOverlayEvent
#include "Valve/VR/IVROverlay__PollNextOverlayEvent.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.Invoke
bool Valve::VR::IVROverlay::_PollNextOverlayEvent::Invoke(uint64_t ulOverlayHandle, Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_PollNextOverlayEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_PollNextOverlayEvent::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_PollNextOverlayEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pEvent, uncbVREvent, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_PollNextOverlayEvent.EndInvoke
bool Valve::VR::IVROverlay::_PollNextOverlayEvent::EndInvoke(Valve::VR::VREvent_t& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_PollNextOverlayEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayInputMethod
#include "Valve/VR/IVROverlay__GetOverlayInputMethod.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayInputMethod::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod& peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayInputMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peInputMethod)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peInputMethod);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayInputMethod::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod& peInputMethod, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayInputMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peInputMethod, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, peInputMethod, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayInputMethod.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayInputMethod::EndInvoke(Valve::VR::VROverlayInputMethod& peInputMethod, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayInputMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peInputMethod, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, peInputMethod, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayInputMethod
#include "Valve/VR/IVROverlay__SetOverlayInputMethod.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayInputMethod::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayInputMethod::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMethod)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayInputMethod::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod eInputMethod, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayInputMethod::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMethod, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eInputMethod, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayInputMethod.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayInputMethod::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayInputMethod::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayMouseScale
#include "Valve/VR/IVROverlay__GetOverlayMouseScale.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayMouseScale::Invoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayMouseScale::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayMouseScale::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayMouseScale::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayMouseScale.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayMouseScale::EndInvoke(Valve::VR::HmdVector2_t& pvecMouseScale, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayMouseScale::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pvecMouseScale, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pvecMouseScale, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayMouseScale
#include "Valve/VR/IVROverlay__SetOverlayMouseScale.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayMouseScale::Invoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayMouseScale::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayMouseScale::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayMouseScale::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayMouseScale.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayMouseScale::EndInvoke(Valve::VR::HmdVector2_t& pvecMouseScale, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayMouseScale::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pvecMouseScale, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pvecMouseScale, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ComputeOverlayIntersection
#include "Valve/VR/IVROverlay__ComputeOverlayIntersection.hpp"
// Including type: Valve.VR.VROverlayIntersectionParams_t
#include "Valve/VR/VROverlayIntersectionParams_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionResults_t
#include "Valve/VR/VROverlayIntersectionResults_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.Invoke
bool Valve::VR::IVROverlay::_ComputeOverlayIntersection::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ComputeOverlayIntersection::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pParams, pResults)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pParams, pResults);
}
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ComputeOverlayIntersection::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ComputeOverlayIntersection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pParams, pResults, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pParams, pResults, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ComputeOverlayIntersection.EndInvoke
bool Valve::VR::IVROverlay::_ComputeOverlayIntersection::EndInvoke(Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ComputeOverlayIntersection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pParams, pResults, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pParams, pResults, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsHoverTargetOverlay
#include "Valve/VR/IVROverlay__IsHoverTargetOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.Invoke
bool Valve::VR::IVROverlay::_IsHoverTargetOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsHoverTargetOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsHoverTargetOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsHoverTargetOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsHoverTargetOverlay.EndInvoke
bool Valve::VR::IVROverlay::_IsHoverTargetOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsHoverTargetOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__GetGamepadFocusOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.Invoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.EndInvoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__SetGamepadFocusOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulNewFocusOverlay)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke(uint64_t ulNewFocusOverlay, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulNewFocusOverlay, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulNewFocusOverlay, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayNeighbor
#include "Valve/VR/IVROverlay__SetOverlayNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, ulTo)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, ulTo, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, ulTo, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor
#include "Valve/VR/IVROverlay__MoveGamepadFocusToNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__SetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, vCenter, fRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, vCenter, fRadius, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__GetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, pvCenter, pfRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, pvCenter, pfRadius, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke(Valve::VR::HmdVector2_t& pvCenter, float& pfRadius, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pvCenter, pfRadius, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pvCenter, pfRadius, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTexture
#include "Valve/VR/IVROverlay__SetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::Invoke(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pTexture);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke(Valve::VR::Texture_t& pTexture, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pTexture, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ClearOverlayTexture
#include "Valve/VR/IVROverlay__ClearOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRaw
#include "Valve/VR/IVROverlay__SetOverlayRaw.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::Invoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayFromFile
#include "Valve/VR/IVROverlay__SetOverlayFromFile.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchFilePath)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchFilePath, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchFilePath, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTexture
#include "Valve/VR/IVROverlay__GetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::Invoke(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke(System::IntPtr& pNativeTextureHandle, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pNativeTextureHandle, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pNativeTextureHandle, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle
#include "Valve/VR/IVROverlay__ReleaseNativeOverlayHandle.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureSize
#include "Valve/VR/IVROverlay__GetOverlayTextureSize.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pWidth, pHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pWidth, pHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke(uint& pWidth, uint& pHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pWidth, pHeight, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pWidth, pHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CreateDashboardOverlay
#include "Valve/VR/IVROverlay__CreateDashboardOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke(uint64_t& pMainHandle, uint64_t& pThumbnailHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMainHandle, pThumbnailHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pMainHandle, pThumbnailHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsDashboardVisible
#include "Valve/VR/IVROverlay__IsDashboardVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.Invoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.EndInvoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsActiveDashboardOverlay
#include "Valve/VR/IVROverlay__IsActiveDashboardOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.Invoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.EndInvoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__SetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, uint unProcessId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unProcessId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unProcessId, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__GetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, uint& punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punProcessId);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, uint& punProcessId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punProcessId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punProcessId, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke(uint& punProcessId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punProcessId, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punProcessId, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowDashboard
#include "Valve/VR/IVROverlay__ShowDashboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.Invoke
void Valve::VR::IVROverlay::_ShowDashboard::Invoke(::Il2CppString* pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayToShow)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke(::Il2CppString* pchOverlayToShow, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayToShow, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayToShow, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.EndInvoke
void Valve::VR::IVROverlay::_ShowDashboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice
#include "Valve/VR/IVROverlay__GetPrimaryDashboardDevice.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.Invoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.EndInvoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboard
#include "Valve/VR/IVROverlay__ShowKeyboard.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::Invoke(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboardForOverlay
#include "Valve/VR/IVROverlay__ShowKeyboardForOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetKeyboardText
#include "Valve/VR/IVROverlay__GetKeyboardText.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.Invoke
uint Valve::VR::IVROverlay::_GetKeyboardText::Invoke(System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, cchText)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke(System::Text::StringBuilder* pchText, uint cchText, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, cchText, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchText, cchText, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.EndInvoke
uint Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_HideKeyboard
#include "Valve/VR/IVROverlay__HideKeyboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.Invoke
void Valve::VR::IVROverlay::_HideKeyboard::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.EndInvoke
void Valve::VR::IVROverlay::_HideKeyboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute
#include "Valve/VR/IVROverlay__SetKeyboardTransformAbsolute.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.Invoke
void Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::Invoke(Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackingOrigin, pmatTrackingOriginToKeyboardTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTrackingOrigin, pmatTrackingOriginToKeyboardTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackingOrigin, pmatTrackingOriginToKeyboardTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eTrackingOrigin, pmatTrackingOriginToKeyboardTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.EndInvoke
void Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::EndInvoke(Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatTrackingOriginToKeyboardTransform, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pmatTrackingOriginToKeyboardTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay
#include "Valve/VR/IVROverlay__SetKeyboardPositionForOverlay.hpp"
// Including type: Valve.VR.HmdRect2_t
#include "Valve/VR/HmdRect2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.Invoke
void Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::Invoke(uint64_t ulOverlayHandle, Valve::VR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, avoidRect)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::HmdRect2_t avoidRect, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, avoidRect, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, avoidRect, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.EndInvoke
void Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayIntersectionMask
#include "Valve/VR/IVROverlay__SetOverlayIntersectionMask.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayIntersectionMaskPrimitive_t
#include "Valve/VR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayIntersectionMask::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayIntersectionMask::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayIntersectionMask::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayIntersectionMask::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayIntersectionMask::EndInvoke(Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayIntersectionMask::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMaskPrimitives, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pMaskPrimitives, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayFlags
#include "Valve/VR/IVROverlay__GetOverlayFlags.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlags::Invoke(uint64_t ulOverlayHandle, uint& pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlags::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pFlags)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pFlags);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayFlags::BeginInvoke(uint64_t ulOverlayHandle, uint& pFlags, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlags::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pFlags, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pFlags, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlags::EndInvoke(uint& pFlags, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlags::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pFlags, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pFlags, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowMessageOverlay
#include "Valve/VR/IVROverlay__ShowMessageOverlay.hpp"
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.Invoke
Valve::VR::VRMessageOverlayResponse Valve::VR::IVROverlay::_ShowMessageOverlay::Invoke(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowMessageOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowMessageOverlay::BeginInvoke(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowMessageOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.EndInvoke
Valve::VR::VRMessageOverlayResponse Valve::VR::IVROverlay::_ShowMessageOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowMessageOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CloseMessageOverlay
#include "Valve/VR/IVROverlay__CloseMessageOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.Invoke
void Valve::VR::IVROverlay::_CloseMessageOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CloseMessageOverlay::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_CloseMessageOverlay::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CloseMessageOverlay::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.EndInvoke
void Valve::VR::IVROverlay::_CloseMessageOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CloseMessageOverlay::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadRenderModel_Async
#include "Valve/VR/IVRRenderModels__LoadRenderModel_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadRenderModel_Async::Invoke(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadRenderModel_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, ppRenderModel)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, ppRenderModel);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadRenderModel_Async::BeginInvoke(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadRenderModel_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, ppRenderModel, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, ppRenderModel, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadRenderModel_Async::EndInvoke(System::IntPtr& ppRenderModel, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadRenderModel_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppRenderModel, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, ppRenderModel, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeRenderModel
#include "Valve/VR/IVRRenderModels__FreeRenderModel.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.Invoke
void Valve::VR::IVRRenderModels::_FreeRenderModel::Invoke(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeRenderModel::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeRenderModel::BeginInvoke(System::IntPtr pRenderModel, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeRenderModel::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pRenderModel, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.EndInvoke
void Valve::VR::IVRRenderModels::_FreeRenderModel::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeRenderModel::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadTexture_Async
#include "Valve/VR/IVRRenderModels__LoadTexture_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTexture_Async::Invoke(int textureId, System::IntPtr& ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTexture_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, ppTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, ppTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadTexture_Async::BeginInvoke(int textureId, System::IntPtr& ppTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTexture_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, ppTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, textureId, ppTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTexture_Async::EndInvoke(System::IntPtr& ppTexture, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTexture_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppTexture, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, ppTexture, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeTexture
#include "Valve/VR/IVRRenderModels__FreeTexture.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.Invoke
void Valve::VR::IVRRenderModels::_FreeTexture::Invoke(System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTexture::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeTexture::BeginInvoke(System::IntPtr pTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTexture::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.EndInvoke
void Valve::VR::IVRRenderModels::_FreeTexture::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTexture::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async
#include "Valve/VR/IVRRenderModels__LoadTextureD3D11_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::Invoke(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pD3D11Device, ppD3D11Texture2D)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, ppD3D11Texture2D);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::BeginInvoke(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pD3D11Device, ppD3D11Texture2D, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, textureId, pD3D11Device, ppD3D11Texture2D, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::EndInvoke(System::IntPtr& ppD3D11Texture2D, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppD3D11Texture2D, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, ppD3D11Texture2D, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async
#include "Valve/VR/IVRRenderModels__LoadIntoTextureD3D11_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::Invoke(int textureId, System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pDstTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::BeginInvoke(int textureId, System::IntPtr pDstTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pDstTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, textureId, pDstTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeTextureD3D11
#include "Valve/VR/IVRRenderModels__FreeTextureD3D11.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.Invoke
void Valve::VR::IVRRenderModels::_FreeTextureD3D11::Invoke(System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTextureD3D11::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11Texture2D)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeTextureD3D11::BeginInvoke(System::IntPtr pD3D11Texture2D, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTextureD3D11::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11Texture2D, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pD3D11Texture2D, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.EndInvoke
void Valve::VR::IVRRenderModels::_FreeTextureD3D11::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTextureD3D11::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelName
#include "Valve/VR/IVRRenderModels__GetRenderModelName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelName::Invoke(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unRenderModelIndex, pchRenderModelName, unRenderModelNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelName::BeginInvoke(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unRenderModelIndex, pchRenderModelName, unRenderModelNameLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelCount
#include "Valve/VR/IVRRenderModels__GetRenderModelCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelCount::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentCount
#include "Valve/VR/IVRRenderModels__GetComponentCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentCount::Invoke(::Il2CppString* pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentCount::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentCount::BeginInvoke(::Il2CppString* pchRenderModelName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentName
#include "Valve/VR/IVRRenderModels__GetComponentName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentName::Invoke(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentName::BeginInvoke(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentButtonMask
#include "Valve/VR/IVRRenderModels__GetComponentButtonMask.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.Invoke
uint64_t Valve::VR::IVRRenderModels::_GetComponentButtonMask::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentButtonMask::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.EndInvoke
uint64_t Valve::VR::IVRRenderModels::_GetComponentButtonMask::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentButtonMask::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentRenderModelName
#include "Valve/VR/IVRRenderModels__GetComponentRenderModelName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentRenderModelName::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentRenderModelName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentState
#include "Valve/VR/IVRRenderModels__GetComponentState.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.Invoke
bool Valve::VR::IVRRenderModels::_GetComponentState::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentState::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentState::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.EndInvoke
bool Valve::VR::IVRRenderModels::_GetComponentState::EndInvoke(Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, pState, pComponentState, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pState, pComponentState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_RenderModelHasComponent
#include "Valve/VR/IVRRenderModels__RenderModelHasComponent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.Invoke
bool Valve::VR::IVRRenderModels::_RenderModelHasComponent::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_RenderModelHasComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.EndInvoke
bool Valve::VR::IVRRenderModels::_RenderModelHasComponent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_RenderModelHasComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL
#include "Valve/VR/IVRRenderModels__GetRenderModelThumbnailURL.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, Valve::VR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, Valve::VR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke(Valve::VR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath
#include "Valve/VR/IVRRenderModels__GetRenderModelOriginalPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, Valve::VR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, Valve::VR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke(Valve::VR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum
#include "Valve/VR/IVRRenderModels__GetRenderModelErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke(Valve::VR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke(Valve::VR::EVRRenderModelError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRNotifications/_CreateNotification
#include "Valve/VR/IVRNotifications__CreateNotification.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
// Including type: Valve.VR.NotificationBitmap_t
#include "Valve/VR/NotificationBitmap_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.Invoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_CreateNotification::Invoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, Valve::VR::EVRNotificationType type, ::Il2CppString* pchText, Valve::VR::EVRNotificationStyle style, Valve::VR::NotificationBitmap_t& pImage, uint& pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_CreateNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId);
}
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.BeginInvoke
System::IAsyncResult* Valve::VR::IVRNotifications::_CreateNotification::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, Valve::VR::EVRNotificationType type, ::Il2CppString* pchText, Valve::VR::EVRNotificationStyle style, Valve::VR::NotificationBitmap_t& pImage, uint& pNotificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_CreateNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId, callback, object);
}
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.EndInvoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_CreateNotification::EndInvoke(Valve::VR::NotificationBitmap_t& pImage, uint& pNotificationId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_CreateNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pImage, pNotificationId, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, pImage, pNotificationId, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRNotifications/_RemoveNotification
#include "Valve/VR/IVRNotifications__RemoveNotification.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.Invoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_RemoveNotification::Invoke(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_RemoveNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(notificationId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.BeginInvoke
System::IAsyncResult* Valve::VR::IVRNotifications::_RemoveNotification::BeginInvoke(uint notificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_RemoveNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(notificationId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, notificationId, callback, object);
}
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.EndInvoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_RemoveNotification::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_RemoveNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum
#include "Valve/VR/IVRSettings__GetSettingsErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke(Valve::VR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eError)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke(Valve::VR::EVRSettingsError eError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_Sync
#include "Valve/VR/IVRSettings__Sync.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_Sync.Invoke
bool Valve::VR::IVRSettings::_Sync::Invoke(bool bForce, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_Sync::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_Sync.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_Sync::BeginInvoke(bool bForce, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_Sync::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bForce, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_Sync.EndInvoke
bool Valve::VR::IVRSettings::_Sync::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_Sync::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetBool
#include "Valve/VR/IVRSettings__SetBool.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.Invoke
void Valve::VR::IVRSettings::_SetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, bValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, bValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.EndInvoke
void Valve::VR::IVRSettings::_SetBool::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetInt32
#include "Valve/VR/IVRSettings__SetInt32.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.Invoke
void Valve::VR::IVRSettings::_SetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, nValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, nValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.EndInvoke
void Valve::VR::IVRSettings::_SetInt32::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetFloat
#include "Valve/VR/IVRSettings__SetFloat.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.Invoke
void Valve::VR::IVRSettings::_SetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, flValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, flValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.EndInvoke
void Valve::VR::IVRSettings::_SetFloat::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetString
#include "Valve/VR/IVRSettings__SetString.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetString.Invoke
void Valve::VR::IVRSettings::_SetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetString::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetString.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetString.EndInvoke
void Valve::VR::IVRSettings::_SetString::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetBool
#include "Valve/VR/IVRSettings__GetBool.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.Invoke
bool Valve::VR::IVRSettings::_GetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.EndInvoke
bool Valve::VR::IVRSettings::_GetBool::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetInt32
#include "Valve/VR/IVRSettings__GetInt32.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.Invoke
int Valve::VR::IVRSettings::_GetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.EndInvoke
int Valve::VR::IVRSettings::_GetInt32::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetFloat
#include "Valve/VR/IVRSettings__GetFloat.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.Invoke
float Valve::VR::IVRSettings::_GetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.EndInvoke
float Valve::VR::IVRSettings::_GetFloat::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetString
#include "Valve/VR/IVRSettings__GetString.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetString.Invoke
void Valve::VR::IVRSettings::_GetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetString::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, unValueLen, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetString.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, unValueLen, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetString.EndInvoke
void Valve::VR::IVRSettings::_GetString::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_RemoveSection
#include "Valve/VR/IVRSettings__RemoveSection.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.Invoke
void Valve::VR::IVRSettings::_RemoveSection::Invoke(::Il2CppString* pchSection, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveSection::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_RemoveSection::BeginInvoke(::Il2CppString* pchSection, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.EndInvoke
void Valve::VR::IVRSettings::_RemoveSection::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_RemoveKeyInSection
#include "Valve/VR/IVRSettings__RemoveKeyInSection.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.Invoke
void Valve::VR::IVRSettings::_RemoveKeyInSection::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveKeyInSection::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_RemoveKeyInSection::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveKeyInSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.EndInvoke
void Valve::VR::IVRSettings::_RemoveKeyInSection::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveKeyInSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_RequestScreenshot
#include "Valve/VR/IVRScreenshots__RequestScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_RequestScreenshot::Invoke(uint& pOutScreenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_RequestScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_RequestScreenshot::BeginInvoke(uint& pOutScreenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_RequestScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_RequestScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_RequestScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_HookScreenshot
#include "Valve/VR/IVRScreenshots__HookScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_HookScreenshot::Invoke(::Array<Valve::VR::EVRScreenshotType>*& pSupportedTypes, int numTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_HookScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSupportedTypes, numTypes)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes, numTypes);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_HookScreenshot::BeginInvoke(::Array<Valve::VR::EVRScreenshotType>*& pSupportedTypes, int numTypes, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_HookScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSupportedTypes, numTypes, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSupportedTypes, numTypes, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_HookScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_HookScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType
#include "Valve/VR/IVRScreenshots__GetScreenshotPropertyType.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.Invoke
Valve::VR::EVRScreenshotType Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::Invoke(uint screenshotHandle, Valve::VR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, pError)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, pError);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke(uint screenshotHandle, Valve::VR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.EndInvoke
Valve::VR::EVRScreenshotType Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke(Valve::VR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotType, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename
#include "Valve/VR/IVRScreenshots__GetScreenshotPropertyFilename.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.Invoke
uint Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, Valve::VR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, filenameType, pchFilename, cchFilename, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, Valve::VR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, filenameType, pchFilename, cchFilename, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.EndInvoke
uint Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke(Valve::VR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress
#include "Valve/VR/IVRScreenshots__UpdateScreenshotProgress.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::Invoke(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, flProgress)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke(uint screenshotHandle, float flProgress, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, flProgress, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, flProgress, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_TakeStereoScreenshot
#include "Valve/VR/IVRScreenshots__TakeStereoScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_TakeStereoScreenshot::Invoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_TakeStereoScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, pchPreviewFilename, pchVRFilename)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, pchPreviewFilename, pchVRFilename, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_SubmitScreenshot
#include "Valve/VR/IVRScreenshots__SubmitScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_SubmitScreenshot::Invoke(uint screenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_SubmitScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_SubmitScreenshot::BeginInvoke(uint screenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_SubmitScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_SubmitScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_SubmitScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRResources/_LoadSharedResource
#include "Valve/VR/IVRResources__LoadSharedResource.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.Invoke
uint Valve::VR::IVRResources::_LoadSharedResource::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_LoadSharedResource::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchBuffer, unBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.BeginInvoke
System::IAsyncResult* Valve::VR::IVRResources::_LoadSharedResource::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_LoadSharedResource::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchBuffer, unBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.EndInvoke
uint Valve::VR::IVRResources::_LoadSharedResource::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_LoadSharedResource::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRResources/_GetResourceFullPath
#include "Valve/VR/IVRResources__GetResourceFullPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.Invoke
uint Valve::VR::IVRResources::_GetResourceFullPath::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_GetResourceFullPath::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.BeginInvoke
System::IAsyncResult* Valve::VR::IVRResources::_GetResourceFullPath::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_GetResourceFullPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.EndInvoke
uint Valve::VR::IVRResources::_GetResourceFullPath::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_GetResourceFullPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRDriverManager/_GetDriverCount
#include "Valve/VR/IVRDriverManager__GetDriverCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.Invoke
uint Valve::VR::IVRDriverManager::_GetDriverCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverCount::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRDriverManager::_GetDriverCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.EndInvoke
uint Valve::VR::IVRDriverManager::_GetDriverCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRDriverManager/_GetDriverName
#include "Valve/VR/IVRDriverManager__GetDriverName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.Invoke
uint Valve::VR::IVRDriverManager::_GetDriverName::Invoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverName::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDriver, pchValue, unBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRDriverManager::_GetDriverName::BeginInvoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDriver, pchValue, unBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDriver, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.EndInvoke
uint Valve::VR::IVRDriverManager::_GetDriverName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRSystem/_PollNextEventPacked
#include "Valve/VR/CVRSystem__PollNextEventPacked.hpp"
// Including type: Valve.VR.CVRSystem/PollNextEventUnion
#include "Valve/VR/CVRSystem_PollNextEventUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStatePacked
#include "Valve/VR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateUnion
#include "Valve/VR/CVRSystem_GetControllerStateUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked
#include "Valve/VR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateWithPoseUnion
#include "Valve/VR/CVRSystem_GetControllerStateWithPoseUnion.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.DistortionCoordinates_t
#include "Valve/VR/DistortionCoordinates_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
// Including type: Valve.VR.HiddenAreaMesh_t
#include "Valve/VR/HiddenAreaMesh_t.hpp"
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem.GetRecommendedRenderTargetSize
void Valve::VR::CVRSystem::GetRecommendedRenderTargetSize(uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetRecommendedRenderTargetSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRecommendedRenderTargetSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionMatrix
Valve::VR::HmdMatrix44_t Valve::VR::CVRSystem::GetProjectionMatrix(Valve::VR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetProjectionMatrix");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetProjectionMatrix", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fNearZ, fFarZ)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionRaw
void Valve::VR::CVRSystem::GetProjectionRaw(Valve::VR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetProjectionRaw");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetProjectionRaw", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pfLeft, pfRight, pfTop, pfBottom)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom);
}
// Autogenerated method: Valve.VR.CVRSystem.ComputeDistortion
bool Valve::VR::CVRSystem::ComputeDistortion(Valve::VR::EVREye eEye, float fU, float fV, Valve::VR::DistortionCoordinates_t& pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ComputeDistortion");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeDistortion", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fU, fV, pDistortionCoordinates)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates);
}
// Autogenerated method: Valve.VR.CVRSystem.GetEyeToHeadTransform
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetEyeToHeadTransform(Valve::VR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetEyeToHeadTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEyeToHeadTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTimeSinceLastVsync
bool Valve::VR::CVRSystem::GetTimeSinceLastVsync(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTimeSinceLastVsync");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTimeSinceLastVsync", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter);
}
// Autogenerated method: Valve.VR.CVRSystem.GetD3D9AdapterIndex
int Valve::VR::CVRSystem::GetD3D9AdapterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetD3D9AdapterIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetD3D9AdapterIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetDXGIOutputInfo
void Valve::VR::CVRSystem::GetDXGIOutputInfo(int& pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetOutputDevice
void Valve::VR::CVRSystem::GetOutputDevice(uint64_t& pnDevice, Valve::VR::ETextureType textureType, System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetOutputDevice");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOutputDevice", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, textureType, pInstance)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, textureType, pInstance);
}
// Autogenerated method: Valve.VR.CVRSystem.IsDisplayOnDesktop
bool Valve::VR::CVRSystem::IsDisplayOnDesktop() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsDisplayOnDesktop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsDisplayOnDesktop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.SetDisplayVisibility
bool Valve::VR::CVRSystem::SetDisplayVisibility(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::SetDisplayVisibility");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDisplayVisibility", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bIsVisibleOnDesktop)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: Valve.VR.CVRSystem.GetDeviceToAbsoluteTrackingPose
void Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose(Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<Valve::VR::TrackedDevicePose_t>* pTrackedDevicePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDeviceToAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray);
}
// Autogenerated method: Valve.VR.CVRSystem.ResetSeatedZeroPose
void Valve::VR::CVRSystem::ResetSeatedZeroPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ResetSeatedZeroPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetSeatedZeroPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetSeatedZeroPoseToStandingAbsoluteTrackingPose
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetRawZeroPoseToStandingAbsoluteTrackingPose
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRawZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetSortedTrackedDeviceIndicesOfClass
uint Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass(Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>* punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSortedTrackedDeviceIndicesOfClass", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceActivityLevel
Valve::VR::EDeviceActivityLevel Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackedDeviceActivityLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: Valve.VR.CVRSystem.ApplyTransform
void Valve::VR::CVRSystem::ApplyTransform(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ApplyTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ApplyTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceIndexForControllerRole
uint Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole(Valve::VR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackedDeviceIndexForControllerRole", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceType)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerRoleForTrackedDeviceIndex
Valve::VR::ETrackedControllerRole Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerRoleForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceClass
Valve::VR::ETrackedDeviceClass Valve::VR::CVRSystem::GetTrackedDeviceClass(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTrackedDeviceClass");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackedDeviceClass", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.IsTrackedDeviceConnected
bool Valve::VR::CVRSystem::IsTrackedDeviceConnected(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsTrackedDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsTrackedDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetBoolTrackedDeviceProperty
bool Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetBoolTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetFloatTrackedDeviceProperty
float Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFloatTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetInt32TrackedDeviceProperty
int Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetInt32TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetUint64TrackedDeviceProperty
uint64_t Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetUint64TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetMatrix34TrackedDeviceProperty
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetMatrix34TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetArrayTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetArrayTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetStringTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetStringTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetStringTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetPropErrorNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetPropErrorNameFromEnum(Valve::VR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetPropErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPropErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEvent
bool Valve::VR::CVRSystem::PollNextEvent(Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEventWithPose
bool Valve::VR::CVRSystem::PollNextEventWithPose(Valve::VR::ETrackingUniverseOrigin eOrigin, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::PollNextEventWithPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PollNextEventWithPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, pEvent, uncbVREvent, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.CVRSystem.GetEventTypeNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetEventTypeNameFromEnum(Valve::VR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetEventTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEventTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eType)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eType);
}
// Autogenerated method: Valve.VR.CVRSystem.GetHiddenAreaMesh
Valve::VR::HiddenAreaMesh_t Valve::VR::CVRSystem::GetHiddenAreaMesh(Valve::VR::EVREye eEye, Valve::VR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetHiddenAreaMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHiddenAreaMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, type)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerState
bool Valve::VR::CVRSystem::GetControllerState(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerStateWithPose
bool Valve::VR::CVRSystem::GetControllerStateWithPose(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerStateWithPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerStateWithPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.CVRSystem.TriggerHapticPulse
void Valve::VR::CVRSystem::TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, unAxisId, usDurationMicroSec)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: Valve.VR.CVRSystem.GetButtonIdNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetButtonIdNameFromEnum(Valve::VR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetButtonIdNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetButtonIdNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eButtonId)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerAxisTypeNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum(Valve::VR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerAxisTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eAxisType)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: Valve.VR.CVRSystem.IsInputAvailable
bool Valve::VR::CVRSystem::IsInputAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsInputAvailable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsInputAvailable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.IsSteamVRDrawingControllers
bool Valve::VR::CVRSystem::IsSteamVRDrawingControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsSteamVRDrawingControllers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsSteamVRDrawingControllers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationPause
bool Valve::VR::CVRSystem::ShouldApplicationPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ShouldApplicationPause");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShouldApplicationPause", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationReduceRenderingWork
bool Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShouldApplicationReduceRenderingWork", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.DriverDebugRequest
uint Valve::VR::CVRSystem::DriverDebugRequest(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::DriverDebugRequest");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DriverDebugRequest", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: Valve.VR.CVRSystem.PerformFirmwareUpdate
Valve::VR::EVRFirmwareError Valve::VR::CVRSystem::PerformFirmwareUpdate(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::PerformFirmwareUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PerformFirmwareUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_Exiting
void Valve::VR::CVRSystem::AcknowledgeQuit_Exiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::AcknowledgeQuit_Exiting");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_Exiting", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_UserPrompt
void Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_UserPrompt", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_PollNextEventPacked
#include "Valve/VR/CVRSystem__PollNextEventPacked.hpp"
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.Invoke
bool Valve::VR::CVRSystem::_PollNextEventPacked::Invoke(Valve::VR::VREvent_t_Packed& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_PollNextEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVRSystem::_PollNextEventPacked::BeginInvoke(Valve::VR::VREvent_t_Packed& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_PollNextEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.EndInvoke
bool Valve::VR::CVRSystem::_PollNextEventPacked::EndInvoke(Valve::VR::VREvent_t_Packed& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_PollNextEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_GetControllerStatePacked
#include "Valve/VR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.Invoke
bool Valve::VR::CVRSystem::_GetControllerStatePacked::Invoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVRSystem::_GetControllerStatePacked::BeginInvoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.EndInvoke
bool Valve::VR::CVRSystem::_GetControllerStatePacked::EndInvoke(Valve::VR::VRControllerState_t_Packed& pControllerState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, result);
}
