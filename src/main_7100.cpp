// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__GetGamepadFocusOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.Invoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetGamepadFocusOverlay.EndInvoke
uint64_t Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetGamepadFocusOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetGamepadFocusOverlay
#include "Valve/VR/IVROverlay__SetGamepadFocusOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulNewFocusOverlay)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke(uint64_t ulNewFocusOverlay, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulNewFocusOverlay, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulNewFocusOverlay, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetGamepadFocusOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetGamepadFocusOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayNeighbor
#include "Valve/VR/IVROverlay__SetOverlayNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, ulTo)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, ulTo, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, ulTo, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayNeighbor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayNeighbor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor
#include "Valve/VR/IVROverlay__MoveGamepadFocusToNeighbor.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eDirection, ulFrom, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_MoveGamepadFocusToNeighbor.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_MoveGamepadFocusToNeighbor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__SetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, vCenter, fRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, vCenter, fRadius, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayDualAnalogTransform.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayDualAnalogTransform::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform
#include "Valve/VR/IVROverlay__GetOverlayDualAnalogTransform.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, pvCenter, pfRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, pvCenter, pfRadius, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayDualAnalogTransform.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke(Valve::VR::HmdVector2_t& pvCenter, float& pfRadius, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayDualAnalogTransform::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pvCenter, pfRadius, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pvCenter, pfRadius, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayTexture
#include "Valve/VR/IVROverlay__SetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::Invoke(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pTexture);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke(Valve::VR::Texture_t& pTexture, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pTexture, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ClearOverlayTexture
#include "Valve/VR/IVROverlay__ClearOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ClearOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ClearOverlayTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayRaw
#include "Valve/VR/IVROverlay__SetOverlayRaw.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::Invoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayRaw.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayRaw::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayFromFile
#include "Valve/VR/IVROverlay__SetOverlayFromFile.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchFilePath)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchFilePath, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pchFilePath, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayFromFile.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayFromFile::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTexture
#include "Valve/VR/IVROverlay__GetOverlayTexture.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::Invoke(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTexture.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke(System::IntPtr& pNativeTextureHandle, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pNativeTextureHandle, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pNativeTextureHandle, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle
#include "Valve/VR/IVROverlay__ReleaseNativeOverlayHandle.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ReleaseNativeOverlayHandle.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ReleaseNativeOverlayHandle::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayTextureSize
#include "Valve/VR/IVROverlay__GetOverlayTextureSize.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pWidth, pHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pWidth, pHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayTextureSize.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke(uint& pWidth, uint& pHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayTextureSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pWidth, pHeight, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pWidth, pHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CreateDashboardOverlay
#include "Valve/VR/IVROverlay__CreateDashboardOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CreateDashboardOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke(uint64_t& pMainHandle, uint64_t& pThumbnailHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CreateDashboardOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMainHandle, pThumbnailHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pMainHandle, pThumbnailHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsDashboardVisible
#include "Valve/VR/IVROverlay__IsDashboardVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.Invoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsDashboardVisible.EndInvoke
bool Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsDashboardVisible::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_IsActiveDashboardOverlay
#include "Valve/VR/IVROverlay__IsActiveDashboardOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.Invoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke(uint64_t ulOverlayHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_IsActiveDashboardOverlay.EndInvoke
bool Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_IsActiveDashboardOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__SetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, uint unProcessId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unProcessId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, unProcessId, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetDashboardOverlaySceneProcess.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetDashboardOverlaySceneProcess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess
#include "Valve/VR/IVROverlay__GetDashboardOverlaySceneProcess.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke(uint64_t ulOverlayHandle, uint& punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punProcessId);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke(uint64_t ulOverlayHandle, uint& punProcessId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punProcessId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, punProcessId, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetDashboardOverlaySceneProcess.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke(uint& punProcessId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetDashboardOverlaySceneProcess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punProcessId, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, punProcessId, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowDashboard
#include "Valve/VR/IVROverlay__ShowDashboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.Invoke
void Valve::VR::IVROverlay::_ShowDashboard::Invoke(::Il2CppString* pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayToShow)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke(::Il2CppString* pchOverlayToShow, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayToShow, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchOverlayToShow, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowDashboard.EndInvoke
void Valve::VR::IVROverlay::_ShowDashboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowDashboard::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice
#include "Valve/VR/IVROverlay__GetPrimaryDashboardDevice.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.Invoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetPrimaryDashboardDevice.EndInvoke
uint Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetPrimaryDashboardDevice::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboard
#include "Valve/VR/IVROverlay__ShowKeyboard.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::Invoke(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboard.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboard::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowKeyboardForOverlay
#include "Valve/VR/IVROverlay__ShowKeyboardForOverlay.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowKeyboardForOverlay.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowKeyboardForOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetKeyboardText
#include "Valve/VR/IVROverlay__GetKeyboardText.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.Invoke
uint Valve::VR::IVROverlay::_GetKeyboardText::Invoke(System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, cchText)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke(System::Text::StringBuilder* pchText, uint cchText, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, cchText, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchText, cchText, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetKeyboardText.EndInvoke
uint Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetKeyboardText::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_HideKeyboard
#include "Valve/VR/IVROverlay__HideKeyboard.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.Invoke
void Valve::VR::IVROverlay::_HideKeyboard::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_HideKeyboard.EndInvoke
void Valve::VR::IVROverlay::_HideKeyboard::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_HideKeyboard::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute
#include "Valve/VR/IVROverlay__SetKeyboardTransformAbsolute.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.Invoke
void Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::Invoke(Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackingOrigin, pmatTrackingOriginToKeyboardTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTrackingOrigin, pmatTrackingOriginToKeyboardTransform);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackingOrigin, pmatTrackingOriginToKeyboardTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eTrackingOrigin, pmatTrackingOriginToKeyboardTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardTransformAbsolute.EndInvoke
void Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::EndInvoke(Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardTransformAbsolute::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatTrackingOriginToKeyboardTransform, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pmatTrackingOriginToKeyboardTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay
#include "Valve/VR/IVROverlay__SetKeyboardPositionForOverlay.hpp"
// Including type: Valve.VR.HmdRect2_t
#include "Valve/VR/HmdRect2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.Invoke
void Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::Invoke(uint64_t ulOverlayHandle, Valve::VR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, avoidRect)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::HmdRect2_t avoidRect, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, avoidRect, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, avoidRect, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetKeyboardPositionForOverlay.EndInvoke
void Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetKeyboardPositionForOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_SetOverlayIntersectionMask
#include "Valve/VR/IVROverlay__SetOverlayIntersectionMask.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: Valve.VR.VROverlayIntersectionMaskPrimitive_t
#include "Valve/VR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayIntersectionMask::Invoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayIntersectionMask::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_SetOverlayIntersectionMask::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayIntersectionMask::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_SetOverlayIntersectionMask.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_SetOverlayIntersectionMask::EndInvoke(Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_SetOverlayIntersectionMask::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMaskPrimitives, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pMaskPrimitives, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_GetOverlayFlags
#include "Valve/VR/IVROverlay__GetOverlayFlags.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.Invoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlags::Invoke(uint64_t ulOverlayHandle, uint& pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlags::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pFlags)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pFlags);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_GetOverlayFlags::BeginInvoke(uint64_t ulOverlayHandle, uint& pFlags, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlags::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pFlags, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pFlags, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_GetOverlayFlags.EndInvoke
Valve::VR::EVROverlayError Valve::VR::IVROverlay::_GetOverlayFlags::EndInvoke(uint& pFlags, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_GetOverlayFlags::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pFlags, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pFlags, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_ShowMessageOverlay
#include "Valve/VR/IVROverlay__ShowMessageOverlay.hpp"
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.Invoke
Valve::VR::VRMessageOverlayResponse Valve::VR::IVROverlay::_ShowMessageOverlay::Invoke(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowMessageOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_ShowMessageOverlay::BeginInvoke(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowMessageOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_ShowMessageOverlay.EndInvoke
Valve::VR::VRMessageOverlayResponse Valve::VR::IVROverlay::_ShowMessageOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_ShowMessageOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVROverlay/_CloseMessageOverlay
#include "Valve/VR/IVROverlay__CloseMessageOverlay.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.Invoke
void Valve::VR::IVROverlay::_CloseMessageOverlay::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CloseMessageOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVROverlay::_CloseMessageOverlay::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CloseMessageOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVROverlay/_CloseMessageOverlay.EndInvoke
void Valve::VR::IVROverlay::_CloseMessageOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVROverlay::_CloseMessageOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadRenderModel_Async
#include "Valve/VR/IVRRenderModels__LoadRenderModel_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadRenderModel_Async::Invoke(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadRenderModel_Async::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, ppRenderModel)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, ppRenderModel);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadRenderModel_Async::BeginInvoke(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadRenderModel_Async::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, ppRenderModel, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, ppRenderModel, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadRenderModel_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadRenderModel_Async::EndInvoke(System::IntPtr& ppRenderModel, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadRenderModel_Async::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppRenderModel, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, ppRenderModel, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeRenderModel
#include "Valve/VR/IVRRenderModels__FreeRenderModel.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.Invoke
void Valve::VR::IVRRenderModels::_FreeRenderModel::Invoke(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeRenderModel::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeRenderModel::BeginInvoke(System::IntPtr pRenderModel, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeRenderModel::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pRenderModel, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeRenderModel.EndInvoke
void Valve::VR::IVRRenderModels::_FreeRenderModel::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeRenderModel::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadTexture_Async
#include "Valve/VR/IVRRenderModels__LoadTexture_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTexture_Async::Invoke(int textureId, System::IntPtr& ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTexture_Async::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, ppTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, ppTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadTexture_Async::BeginInvoke(int textureId, System::IntPtr& ppTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTexture_Async::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, ppTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, textureId, ppTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTexture_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTexture_Async::EndInvoke(System::IntPtr& ppTexture, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTexture_Async::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppTexture, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, ppTexture, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeTexture
#include "Valve/VR/IVRRenderModels__FreeTexture.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.Invoke
void Valve::VR::IVRRenderModels::_FreeTexture::Invoke(System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTexture::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeTexture::BeginInvoke(System::IntPtr pTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTexture::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTexture.EndInvoke
void Valve::VR::IVRRenderModels::_FreeTexture::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTexture::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async
#include "Valve/VR/IVRRenderModels__LoadTextureD3D11_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::Invoke(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pD3D11Device, ppD3D11Texture2D)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, ppD3D11Texture2D);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::BeginInvoke(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pD3D11Device, ppD3D11Texture2D, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, textureId, pD3D11Device, ppD3D11Texture2D, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadTextureD3D11_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::EndInvoke(System::IntPtr& ppD3D11Texture2D, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadTextureD3D11_Async::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppD3D11Texture2D, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, ppD3D11Texture2D, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async
#include "Valve/VR/IVRRenderModels__LoadIntoTextureD3D11_Async.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.Invoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::Invoke(int textureId, System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pDstTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::BeginInvoke(int textureId, System::IntPtr pDstTexture, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pDstTexture, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, textureId, pDstTexture, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_LoadIntoTextureD3D11_Async.EndInvoke
Valve::VR::EVRRenderModelError Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_LoadIntoTextureD3D11_Async::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_FreeTextureD3D11
#include "Valve/VR/IVRRenderModels__FreeTextureD3D11.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.Invoke
void Valve::VR::IVRRenderModels::_FreeTextureD3D11::Invoke(System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTextureD3D11::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11Texture2D)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_FreeTextureD3D11::BeginInvoke(System::IntPtr pD3D11Texture2D, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTextureD3D11::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11Texture2D, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pD3D11Texture2D, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_FreeTextureD3D11.EndInvoke
void Valve::VR::IVRRenderModels::_FreeTextureD3D11::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_FreeTextureD3D11::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelName
#include "Valve/VR/IVRRenderModels__GetRenderModelName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelName::Invoke(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelName::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unRenderModelIndex, pchRenderModelName, unRenderModelNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelName::BeginInvoke(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelName::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unRenderModelIndex, pchRenderModelName, unRenderModelNameLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelName::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelCount
#include "Valve/VR/IVRRenderModels__GetRenderModelCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelCount::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelCount::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelCount.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelCount::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentCount
#include "Valve/VR/IVRRenderModels__GetComponentCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentCount::Invoke(::Il2CppString* pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentCount::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentCount::BeginInvoke(::Il2CppString* pchRenderModelName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentCount::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentCount.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentCount::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentName
#include "Valve/VR/IVRRenderModels__GetComponentName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentName::Invoke(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentName::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentName::BeginInvoke(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentName::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentName::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentButtonMask
#include "Valve/VR/IVRRenderModels__GetComponentButtonMask.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.Invoke
uint64_t Valve::VR::IVRRenderModels::_GetComponentButtonMask::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentButtonMask::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentButtonMask.EndInvoke
uint64_t Valve::VR::IVRRenderModels::_GetComponentButtonMask::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentButtonMask::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentRenderModelName
#include "Valve/VR/IVRRenderModels__GetComponentRenderModelName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.Invoke
uint Valve::VR::IVRRenderModels::_GetComponentRenderModelName::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentRenderModelName::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentRenderModelName.EndInvoke
uint Valve::VR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetComponentState
#include "Valve/VR/IVRRenderModels__GetComponentState.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.Invoke
bool Valve::VR::IVRRenderModels::_GetComponentState::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentState::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetComponentState::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentState::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetComponentState.EndInvoke
bool Valve::VR::IVRRenderModels::_GetComponentState::EndInvoke(Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetComponentState::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, pState, pComponentState, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pState, pComponentState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_RenderModelHasComponent
#include "Valve/VR/IVRRenderModels__RenderModelHasComponent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.Invoke
bool Valve::VR::IVRRenderModels::_RenderModelHasComponent::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_RenderModelHasComponent::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_RenderModelHasComponent.EndInvoke
bool Valve::VR::IVRRenderModels::_RenderModelHasComponent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_RenderModelHasComponent::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL
#include "Valve/VR/IVRRenderModels__GetRenderModelThumbnailURL.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, Valve::VR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, Valve::VR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelThumbnailURL.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke(Valve::VR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath
#include "Valve/VR/IVRRenderModels__GetRenderModelOriginalPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.Invoke
uint Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, Valve::VR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, Valve::VR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelOriginalPath.EndInvoke
uint Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke(Valve::VR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum
#include "Valve/VR/IVRRenderModels__GetRenderModelErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke(Valve::VR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke(Valve::VR::EVRRenderModelError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRNotifications/_CreateNotification
#include "Valve/VR/IVRNotifications__CreateNotification.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
// Including type: Valve.VR.NotificationBitmap_t
#include "Valve/VR/NotificationBitmap_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.Invoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_CreateNotification::Invoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, Valve::VR::EVRNotificationType type, ::Il2CppString* pchText, Valve::VR::EVRNotificationStyle style, Valve::VR::NotificationBitmap_t& pImage, uint& pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_CreateNotification::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId);
}
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.BeginInvoke
System::IAsyncResult* Valve::VR::IVRNotifications::_CreateNotification::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, Valve::VR::EVRNotificationType type, ::Il2CppString* pchText, Valve::VR::EVRNotificationStyle style, Valve::VR::NotificationBitmap_t& pImage, uint& pNotificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_CreateNotification::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId, callback, object);
}
// Autogenerated method: Valve.VR.IVRNotifications/_CreateNotification.EndInvoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_CreateNotification::EndInvoke(Valve::VR::NotificationBitmap_t& pImage, uint& pNotificationId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_CreateNotification::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pImage, pNotificationId, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, pImage, pNotificationId, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRNotifications/_RemoveNotification
#include "Valve/VR/IVRNotifications__RemoveNotification.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.Invoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_RemoveNotification::Invoke(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_RemoveNotification::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(notificationId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.BeginInvoke
System::IAsyncResult* Valve::VR::IVRNotifications::_RemoveNotification::BeginInvoke(uint notificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_RemoveNotification::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(notificationId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, notificationId, callback, object);
}
// Autogenerated method: Valve.VR.IVRNotifications/_RemoveNotification.EndInvoke
Valve::VR::EVRNotificationError Valve::VR::IVRNotifications::_RemoveNotification::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRNotifications::_RemoveNotification::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum
#include "Valve/VR/IVRSettings__GetSettingsErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke(Valve::VR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eError)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke(Valve::VR::EVRSettingsError eError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetSettingsErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_Sync
#include "Valve/VR/IVRSettings__Sync.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_Sync.Invoke
bool Valve::VR::IVRSettings::_Sync::Invoke(bool bForce, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_Sync::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_Sync.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_Sync::BeginInvoke(bool bForce, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_Sync::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bForce, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_Sync.EndInvoke
bool Valve::VR::IVRSettings::_Sync::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_Sync::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetBool
#include "Valve/VR/IVRSettings__SetBool.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.Invoke
void Valve::VR::IVRSettings::_SetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetBool::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, bValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetBool::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, bValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetBool.EndInvoke
void Valve::VR::IVRSettings::_SetBool::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetBool::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetInt32
#include "Valve/VR/IVRSettings__SetInt32.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.Invoke
void Valve::VR::IVRSettings::_SetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetInt32::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, nValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetInt32::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, nValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetInt32.EndInvoke
void Valve::VR::IVRSettings::_SetInt32::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetInt32::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetFloat
#include "Valve/VR/IVRSettings__SetFloat.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.Invoke
void Valve::VR::IVRSettings::_SetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetFloat::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, flValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetFloat::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, flValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetFloat.EndInvoke
void Valve::VR::IVRSettings::_SetFloat::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetFloat::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_SetString
#include "Valve/VR/IVRSettings__SetString.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_SetString.Invoke
void Valve::VR::IVRSettings::_SetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetString::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetString.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_SetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetString::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_SetString.EndInvoke
void Valve::VR::IVRSettings::_SetString::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_SetString::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetBool
#include "Valve/VR/IVRSettings__GetBool.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.Invoke
bool Valve::VR::IVRSettings::_GetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetBool::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetBool::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetBool.EndInvoke
bool Valve::VR::IVRSettings::_GetBool::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetBool::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetInt32
#include "Valve/VR/IVRSettings__GetInt32.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.Invoke
int Valve::VR::IVRSettings::_GetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetInt32::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetInt32::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetInt32.EndInvoke
int Valve::VR::IVRSettings::_GetInt32::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetInt32::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetFloat
#include "Valve/VR/IVRSettings__GetFloat.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.Invoke
float Valve::VR::IVRSettings::_GetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetFloat::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetFloat::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetFloat.EndInvoke
float Valve::VR::IVRSettings::_GetFloat::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetFloat::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_GetString
#include "Valve/VR/IVRSettings__GetString.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_GetString.Invoke
void Valve::VR::IVRSettings::_GetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetString::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, unValueLen, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetString.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_GetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetString::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, unValueLen, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_GetString.EndInvoke
void Valve::VR::IVRSettings::_GetString::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_GetString::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_RemoveSection
#include "Valve/VR/IVRSettings__RemoveSection.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.Invoke
void Valve::VR::IVRSettings::_RemoveSection::Invoke(::Il2CppString* pchSection, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveSection::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_RemoveSection::BeginInvoke(::Il2CppString* pchSection, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveSection::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveSection.EndInvoke
void Valve::VR::IVRSettings::_RemoveSection::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveSection::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSettings/_RemoveKeyInSection
#include "Valve/VR/IVRSettings__RemoveKeyInSection.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.Invoke
void Valve::VR::IVRSettings::_RemoveKeyInSection::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveKeyInSection::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSettings::_RemoveKeyInSection::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveKeyInSection::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSettings/_RemoveKeyInSection.EndInvoke
void Valve::VR::IVRSettings::_RemoveKeyInSection::EndInvoke(Valve::VR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSettings::_RemoveKeyInSection::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_RequestScreenshot
#include "Valve/VR/IVRScreenshots__RequestScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_RequestScreenshot::Invoke(uint& pOutScreenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_RequestScreenshot::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_RequestScreenshot::BeginInvoke(uint& pOutScreenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_RequestScreenshot::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_RequestScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_RequestScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_RequestScreenshot::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_HookScreenshot
#include "Valve/VR/IVRScreenshots__HookScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_HookScreenshot::Invoke(::Array<Valve::VR::EVRScreenshotType>*& pSupportedTypes, int numTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_HookScreenshot::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSupportedTypes, numTypes)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes, numTypes);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_HookScreenshot::BeginInvoke(::Array<Valve::VR::EVRScreenshotType>*& pSupportedTypes, int numTypes, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_HookScreenshot::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSupportedTypes, numTypes, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSupportedTypes, numTypes, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_HookScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_HookScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_HookScreenshot::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType
#include "Valve/VR/IVRScreenshots__GetScreenshotPropertyType.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.Invoke
Valve::VR::EVRScreenshotType Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::Invoke(uint screenshotHandle, Valve::VR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, pError)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, pError);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke(uint screenshotHandle, Valve::VR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyType.EndInvoke
Valve::VR::EVRScreenshotType Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke(Valve::VR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotType, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename
#include "Valve/VR/IVRScreenshots__GetScreenshotPropertyFilename.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.Invoke
uint Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, Valve::VR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, filenameType, pchFilename, cchFilename, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, Valve::VR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, filenameType, pchFilename, cchFilename, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_GetScreenshotPropertyFilename.EndInvoke
uint Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke(Valve::VR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress
#include "Valve/VR/IVRScreenshots__UpdateScreenshotProgress.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::Invoke(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, flProgress)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke(uint screenshotHandle, float flProgress, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, flProgress, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, flProgress, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_UpdateScreenshotProgress.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_TakeStereoScreenshot
#include "Valve/VR/IVRScreenshots__TakeStereoScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_TakeStereoScreenshot::Invoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_TakeStereoScreenshot::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, pchPreviewFilename, pchVRFilename)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, pchPreviewFilename, pchVRFilename, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_TakeStereoScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutScreenshotHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRScreenshots/_SubmitScreenshot
#include "Valve/VR/IVRScreenshots__SubmitScreenshot.hpp"
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.Invoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_SubmitScreenshot::Invoke(uint screenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_SubmitScreenshot::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.BeginInvoke
System::IAsyncResult* Valve::VR::IVRScreenshots::_SubmitScreenshot::BeginInvoke(uint screenshotHandle, Valve::VR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_SubmitScreenshot::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename, callback, object);
}
// Autogenerated method: Valve.VR.IVRScreenshots/_SubmitScreenshot.EndInvoke
Valve::VR::EVRScreenshotError Valve::VR::IVRScreenshots::_SubmitScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRScreenshots::_SubmitScreenshot::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRResources/_LoadSharedResource
#include "Valve/VR/IVRResources__LoadSharedResource.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.Invoke
uint Valve::VR::IVRResources::_LoadSharedResource::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_LoadSharedResource::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchBuffer, unBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.BeginInvoke
System::IAsyncResult* Valve::VR::IVRResources::_LoadSharedResource::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_LoadSharedResource::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchBuffer, unBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRResources/_LoadSharedResource.EndInvoke
uint Valve::VR::IVRResources::_LoadSharedResource::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_LoadSharedResource::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRResources/_GetResourceFullPath
#include "Valve/VR/IVRResources__GetResourceFullPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.Invoke
uint Valve::VR::IVRResources::_GetResourceFullPath::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_GetResourceFullPath::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.BeginInvoke
System::IAsyncResult* Valve::VR::IVRResources::_GetResourceFullPath::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_GetResourceFullPath::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRResources/_GetResourceFullPath.EndInvoke
uint Valve::VR::IVRResources::_GetResourceFullPath::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRResources::_GetResourceFullPath::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRDriverManager/_GetDriverCount
#include "Valve/VR/IVRDriverManager__GetDriverCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.Invoke
uint Valve::VR::IVRDriverManager::_GetDriverCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverCount::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRDriverManager::_GetDriverCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverCount::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverCount.EndInvoke
uint Valve::VR::IVRDriverManager::_GetDriverCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverCount::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRDriverManager/_GetDriverName
#include "Valve/VR/IVRDriverManager__GetDriverName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.Invoke
uint Valve::VR::IVRDriverManager::_GetDriverName::Invoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverName::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDriver, pchValue, unBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.BeginInvoke
System::IAsyncResult* Valve::VR::IVRDriverManager::_GetDriverName::BeginInvoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverName::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDriver, pchValue, unBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDriver, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRDriverManager/_GetDriverName.EndInvoke
uint Valve::VR::IVRDriverManager::_GetDriverName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRDriverManager::_GetDriverName::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRSystem/_PollNextEventPacked
#include "Valve/VR/CVRSystem__PollNextEventPacked.hpp"
// Including type: Valve.VR.CVRSystem/PollNextEventUnion
#include "Valve/VR/CVRSystem_PollNextEventUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStatePacked
#include "Valve/VR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateUnion
#include "Valve/VR/CVRSystem_GetControllerStateUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked
#include "Valve/VR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateWithPoseUnion
#include "Valve/VR/CVRSystem_GetControllerStateWithPoseUnion.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.DistortionCoordinates_t
#include "Valve/VR/DistortionCoordinates_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
// Including type: Valve.VR.HiddenAreaMesh_t
#include "Valve/VR/HiddenAreaMesh_t.hpp"
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem.GetRecommendedRenderTargetSize
void Valve::VR::CVRSystem::GetRecommendedRenderTargetSize(uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetRecommendedRenderTargetSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRecommendedRenderTargetSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionMatrix
Valve::VR::HmdMatrix44_t Valve::VR::CVRSystem::GetProjectionMatrix(Valve::VR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetProjectionMatrix");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetProjectionMatrix", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fNearZ, fFarZ)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionRaw
void Valve::VR::CVRSystem::GetProjectionRaw(Valve::VR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetProjectionRaw");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetProjectionRaw", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pfLeft, pfRight, pfTop, pfBottom)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom);
}
// Autogenerated method: Valve.VR.CVRSystem.ComputeDistortion
bool Valve::VR::CVRSystem::ComputeDistortion(Valve::VR::EVREye eEye, float fU, float fV, Valve::VR::DistortionCoordinates_t& pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ComputeDistortion");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeDistortion", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fU, fV, pDistortionCoordinates)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates);
}
// Autogenerated method: Valve.VR.CVRSystem.GetEyeToHeadTransform
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetEyeToHeadTransform(Valve::VR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetEyeToHeadTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEyeToHeadTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTimeSinceLastVsync
bool Valve::VR::CVRSystem::GetTimeSinceLastVsync(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTimeSinceLastVsync");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTimeSinceLastVsync", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter);
}
// Autogenerated method: Valve.VR.CVRSystem.GetD3D9AdapterIndex
int Valve::VR::CVRSystem::GetD3D9AdapterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetD3D9AdapterIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetD3D9AdapterIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetDXGIOutputInfo
void Valve::VR::CVRSystem::GetDXGIOutputInfo(int& pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetOutputDevice
void Valve::VR::CVRSystem::GetOutputDevice(uint64_t& pnDevice, Valve::VR::ETextureType textureType, System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetOutputDevice");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOutputDevice", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, textureType, pInstance)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, textureType, pInstance);
}
// Autogenerated method: Valve.VR.CVRSystem.IsDisplayOnDesktop
bool Valve::VR::CVRSystem::IsDisplayOnDesktop() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsDisplayOnDesktop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsDisplayOnDesktop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.SetDisplayVisibility
bool Valve::VR::CVRSystem::SetDisplayVisibility(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::SetDisplayVisibility");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDisplayVisibility", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bIsVisibleOnDesktop)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: Valve.VR.CVRSystem.GetDeviceToAbsoluteTrackingPose
void Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose(Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<Valve::VR::TrackedDevicePose_t>* pTrackedDevicePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDeviceToAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray);
}
// Autogenerated method: Valve.VR.CVRSystem.ResetSeatedZeroPose
void Valve::VR::CVRSystem::ResetSeatedZeroPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ResetSeatedZeroPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetSeatedZeroPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetSeatedZeroPoseToStandingAbsoluteTrackingPose
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetRawZeroPoseToStandingAbsoluteTrackingPose
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRawZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.GetSortedTrackedDeviceIndicesOfClass
uint Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass(Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>* punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSortedTrackedDeviceIndicesOfClass", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceActivityLevel
Valve::VR::EDeviceActivityLevel Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackedDeviceActivityLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: Valve.VR.CVRSystem.ApplyTransform
void Valve::VR::CVRSystem::ApplyTransform(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ApplyTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ApplyTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceIndexForControllerRole
uint Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole(Valve::VR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackedDeviceIndexForControllerRole", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceType)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerRoleForTrackedDeviceIndex
Valve::VR::ETrackedControllerRole Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerRoleForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceClass
Valve::VR::ETrackedDeviceClass Valve::VR::CVRSystem::GetTrackedDeviceClass(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetTrackedDeviceClass");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackedDeviceClass", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.IsTrackedDeviceConnected
bool Valve::VR::CVRSystem::IsTrackedDeviceConnected(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsTrackedDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsTrackedDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.GetBoolTrackedDeviceProperty
bool Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetBoolTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetFloatTrackedDeviceProperty
float Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFloatTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetInt32TrackedDeviceProperty
int Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetInt32TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetUint64TrackedDeviceProperty
uint64_t Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetUint64TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetMatrix34TrackedDeviceProperty
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetMatrix34TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetArrayTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetArrayTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetStringTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetStringTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetStringTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.CVRSystem.GetPropErrorNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetPropErrorNameFromEnum(Valve::VR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetPropErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPropErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEvent
bool Valve::VR::CVRSystem::PollNextEvent(Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEventWithPose
bool Valve::VR::CVRSystem::PollNextEventWithPose(Valve::VR::ETrackingUniverseOrigin eOrigin, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::PollNextEventWithPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PollNextEventWithPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, pEvent, uncbVREvent, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.CVRSystem.GetEventTypeNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetEventTypeNameFromEnum(Valve::VR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetEventTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEventTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eType)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eType);
}
// Autogenerated method: Valve.VR.CVRSystem.GetHiddenAreaMesh
Valve::VR::HiddenAreaMesh_t Valve::VR::CVRSystem::GetHiddenAreaMesh(Valve::VR::EVREye eEye, Valve::VR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetHiddenAreaMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHiddenAreaMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, type)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerState
bool Valve::VR::CVRSystem::GetControllerState(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerStateWithPose
bool Valve::VR::CVRSystem::GetControllerStateWithPose(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerStateWithPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerStateWithPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.CVRSystem.TriggerHapticPulse
void Valve::VR::CVRSystem::TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, unAxisId, usDurationMicroSec)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: Valve.VR.CVRSystem.GetButtonIdNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetButtonIdNameFromEnum(Valve::VR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetButtonIdNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetButtonIdNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eButtonId)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerAxisTypeNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum(Valve::VR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetControllerAxisTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eAxisType)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: Valve.VR.CVRSystem.IsInputAvailable
bool Valve::VR::CVRSystem::IsInputAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsInputAvailable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsInputAvailable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.IsSteamVRDrawingControllers
bool Valve::VR::CVRSystem::IsSteamVRDrawingControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::IsSteamVRDrawingControllers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsSteamVRDrawingControllers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationPause
bool Valve::VR::CVRSystem::ShouldApplicationPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ShouldApplicationPause");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShouldApplicationPause", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationReduceRenderingWork
bool Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShouldApplicationReduceRenderingWork", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.DriverDebugRequest
uint Valve::VR::CVRSystem::DriverDebugRequest(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::DriverDebugRequest");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DriverDebugRequest", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: Valve.VR.CVRSystem.PerformFirmwareUpdate
Valve::VR::EVRFirmwareError Valve::VR::CVRSystem::PerformFirmwareUpdate(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::PerformFirmwareUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PerformFirmwareUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_Exiting
void Valve::VR::CVRSystem::AcknowledgeQuit_Exiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::AcknowledgeQuit_Exiting");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_Exiting", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_UserPrompt
void Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_UserPrompt", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_PollNextEventPacked
#include "Valve/VR/CVRSystem__PollNextEventPacked.hpp"
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.Invoke
bool Valve::VR::CVRSystem::_PollNextEventPacked::Invoke(Valve::VR::VREvent_t_Packed& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_PollNextEventPacked::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVRSystem::_PollNextEventPacked::BeginInvoke(Valve::VR::VREvent_t_Packed& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_PollNextEventPacked::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_PollNextEventPacked.EndInvoke
bool Valve::VR::CVRSystem::_PollNextEventPacked::EndInvoke(Valve::VR::VREvent_t_Packed& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_PollNextEventPacked::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_GetControllerStatePacked
#include "Valve/VR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.Invoke
bool Valve::VR::CVRSystem::_GetControllerStatePacked::Invoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStatePacked::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVRSystem::_GetControllerStatePacked::BeginInvoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStatePacked::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStatePacked.EndInvoke
bool Valve::VR::CVRSystem::_GetControllerStatePacked::EndInvoke(Valve::VR::VRControllerState_t_Packed& pControllerState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStatePacked::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked
#include "Valve/VR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked.Invoke
bool Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object);
}
// Autogenerated method: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked.EndInvoke
bool Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke(Valve::VR::VRControllerState_t_Packed& pControllerState, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, pTrackedDevicePose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRExtendedDisplay.GetWindowBounds
void Valve::VR::CVRExtendedDisplay::GetWindowBounds(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRExtendedDisplay::GetWindowBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWindowBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.CVRExtendedDisplay.GetEyeOutputViewport
void Valve::VR::CVRExtendedDisplay::GetEyeOutputViewport(Valve::VR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRExtendedDisplay::GetEyeOutputViewport");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEyeOutputViewport", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pnX, pnY, pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.CVRExtendedDisplay.GetDXGIOutputInfo
void Valve::VR::CVRExtendedDisplay::GetDXGIOutputInfo(int& pnAdapterIndex, int& pnAdapterOutputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRExtendedDisplay::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, pnAdapterOutputIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraErrorNameFromEnum
::Il2CppString* Valve::VR::CVRTrackedCamera::GetCameraErrorNameFromEnum(Valve::VR::EVRTrackedCameraError eCameraError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetCameraErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCameraErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eCameraError)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eCameraError);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.HasCamera
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::HasCamera(uint nDeviceIndex, bool& pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::HasCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HasCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHasCamera)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHasCamera);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraFrameSize
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetCameraFrameSize(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetCameraFrameSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCameraFrameSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraIntrinsics
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetCameraIntrinsics(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::HmdVector2_t& pFocalLength, Valve::VR::HmdVector2_t& pCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetCameraIntrinsics");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCameraIntrinsics", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pFocalLength, pCenter)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetCameraProjection
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetCameraProjection(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, Valve::VR::HmdMatrix44_t& pProjection) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetCameraProjection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCameraProjection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, flZNear, flZFar, pProjection)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.AcquireVideoStreamingService
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::AcquireVideoStreamingService(uint nDeviceIndex, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::AcquireVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AcquireVideoStreamingService", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHandle);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.ReleaseVideoStreamingService
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::ReleaseVideoStreamingService(uint64_t hTrackedCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::ReleaseVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamingService", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamFrameBuffer
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamFrameBuffer(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetVideoStreamFrameBuffer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVideoStreamFrameBuffer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamTextureSize
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamTextureSize(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetVideoStreamTextureSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamTextureD3D11
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamTextureD3D11(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetVideoStreamTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureD3D11", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.GetVideoStreamTextureGL
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::GetVideoStreamTextureGL(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::GetVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.CVRTrackedCamera.ReleaseVideoStreamTextureGL
Valve::VR::EVRTrackedCameraError Valve::VR::CVRTrackedCamera::ReleaseVideoStreamTextureGL(uint64_t hTrackedCamera, uint glTextureId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRTrackedCamera::ReleaseVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, glTextureId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, glTextureId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRApplications.AddApplicationManifest
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::AddApplicationManifest(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::AddApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddApplicationManifest", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath, bTemporary)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: Valve.VR.CVRApplications.RemoveApplicationManifest
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::RemoveApplicationManifest(::Il2CppString* pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::RemoveApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RemoveApplicationManifest", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: Valve.VR.CVRApplications.IsApplicationInstalled
bool Valve::VR::CVRApplications::IsApplicationInstalled(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::IsApplicationInstalled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsApplicationInstalled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationCount
uint Valve::VR::CVRApplications::GetApplicationCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationKeyByIndex
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetApplicationKeyByIndex(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationKeyByIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationKeyByIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationKeyByProcessId
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetApplicationKeyByProcessId(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationKeyByProcessId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationKeyByProcessId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchApplication(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchApplication");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LaunchApplication", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchTemplateApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchTemplateApplication(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<Valve::VR::AppOverrideKeys_t>* pKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchTemplateApplication");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LaunchTemplateApplication", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchTemplateAppKey, pchNewAppKey, pKeys)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchApplicationFromMimeType
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchApplicationFromMimeType(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchApplicationFromMimeType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LaunchApplicationFromMimeType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchArgs)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchDashboardOverlay
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchDashboardOverlay(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LaunchDashboardOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.CancelApplicationLaunch
bool Valve::VR::CVRApplications::CancelApplicationLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::CancelApplicationLaunch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CancelApplicationLaunch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.IdentifyApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::IdentifyApplication(uint unProcessId, ::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::IdentifyApplication");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IdentifyApplication", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationProcessId
uint Valve::VR::CVRApplications::GetApplicationProcessId(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationProcessId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationProcessId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsErrorNameFromEnum
::Il2CppString* Valve::VR::CVRApplications::GetApplicationsErrorNameFromEnum(Valve::VR::EVRApplicationError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyString
uint Valve::VR::CVRApplications::GetApplicationPropertyString(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationPropertyString");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationPropertyString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyBool
bool Valve::VR::CVRApplications::GetApplicationPropertyBool(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationPropertyBool");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationPropertyBool", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationPropertyUint64
uint64_t Valve::VR::CVRApplications::GetApplicationPropertyUint64(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationPropertyUint64");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationPropertyUint64", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: Valve.VR.CVRApplications.SetApplicationAutoLaunch
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::SetApplicationAutoLaunch(::Il2CppString* pchAppKey, bool bAutoLaunch) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::SetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, bAutoLaunch)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, bAutoLaunch);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationAutoLaunch
bool Valve::VR::CVRApplications::GetApplicationAutoLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.SetDefaultApplicationForMimeType
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::SetDefaultApplicationForMimeType(::Il2CppString* pchAppKey, ::Il2CppString* pchMimeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::SetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, pchMimeType)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, pchMimeType);
}
// Autogenerated method: Valve.VR.CVRApplications.GetDefaultApplicationForMimeType
bool Valve::VR::CVRApplications::GetDefaultApplicationForMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationSupportedMimeTypes
bool Valve::VR::CVRApplications::GetApplicationSupportedMimeTypes(::Il2CppString* pchAppKey, System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationSupportedMimeTypes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationSupportedMimeTypes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsThatSupportMimeType
uint Valve::VR::CVRApplications::GetApplicationsThatSupportMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationsThatSupportMimeType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationsThatSupportMimeType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationLaunchArguments
uint Valve::VR::CVRApplications::GetApplicationLaunchArguments(uint unHandle, System::Text::StringBuilder* pchArgs, uint unArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationLaunchArguments");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationLaunchArguments", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unHandle, pchArgs, unArgs)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unHandle, pchArgs, unArgs);
}
// Autogenerated method: Valve.VR.CVRApplications.GetStartingApplication
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::GetStartingApplication(System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetStartingApplication");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetStartingApplication", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.CVRApplications.GetTransitionState
Valve::VR::EVRApplicationTransitionState Valve::VR::CVRApplications::GetTransitionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetTransitionState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTransitionState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationTransitionState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.PerformApplicationPrelaunchCheck
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::PerformApplicationPrelaunchCheck(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::PerformApplicationPrelaunchCheck");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PerformApplicationPrelaunchCheck", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.CVRApplications.GetApplicationsTransitionStateNameFromEnum
::Il2CppString* Valve::VR::CVRApplications::GetApplicationsTransitionStateNameFromEnum(Valve::VR::EVRApplicationTransitionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetApplicationsTransitionStateNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetApplicationsTransitionStateNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, state);
}
// Autogenerated method: Valve.VR.CVRApplications.IsQuitUserPromptRequested
bool Valve::VR::CVRApplications::IsQuitUserPromptRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::IsQuitUserPromptRequested");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsQuitUserPromptRequested", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRApplications.LaunchInternalProcess
Valve::VR::EVRApplicationError Valve::VR::CVRApplications::LaunchInternalProcess(::Il2CppString* pchBinaryPath, ::Il2CppString* pchArguments, ::Il2CppString* pchWorkingDirectory) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::LaunchInternalProcess");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LaunchInternalProcess", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchBinaryPath, pchArguments, pchWorkingDirectory)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchBinaryPath, pchArguments, pchWorkingDirectory);
}
// Autogenerated method: Valve.VR.CVRApplications.GetCurrentSceneProcessId
uint Valve::VR::CVRApplications::GetCurrentSceneProcessId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRApplications::GetCurrentSceneProcessId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentSceneProcessId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRChaperone.GetCalibrationState
Valve::VR::ChaperoneCalibrationState Valve::VR::CVRChaperone::GetCalibrationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetCalibrationState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCalibrationState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ChaperoneCalibrationState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaSize
bool Valve::VR::CVRChaperone::GetPlayAreaSize(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPlayAreaSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaRect
bool Valve::VR::CVRChaperone::GetPlayAreaRect(Valve::VR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPlayAreaRect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: Valve.VR.CVRChaperone.ReloadInfo
void Valve::VR::CVRChaperone::ReloadInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::ReloadInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReloadInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.SetSceneColor
void Valve::VR::CVRChaperone::SetSceneColor(Valve::VR::HmdColor_t color) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::SetSceneColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetSceneColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: Valve.VR.CVRChaperone.GetBoundsColor
void Valve::VR::CVRChaperone::GetBoundsColor(Valve::VR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, Valve::VR::HmdColor_t& pOutputCameraColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::GetBoundsColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetBoundsColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor);
}
// Autogenerated method: Valve.VR.CVRChaperone.AreBoundsVisible
bool Valve::VR::CVRChaperone::AreBoundsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::AreBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AreBoundsVisible", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperone.ForceBoundsVisible
void Valve::VR::CVRChaperone::ForceBoundsVisible(bool bForce) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::ForceBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ForceBoundsVisible", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bForce);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRChaperoneSetup.CommitWorkingCopy
bool Valve::VR::CVRChaperoneSetup::CommitWorkingCopy(Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::CommitWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CommitWorkingCopy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(configFile)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.RevertWorkingCopy
void Valve::VR::CVRChaperoneSetup::RevertWorkingCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::RevertWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RevertWorkingCopy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaSize
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaSize(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaRect
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaRect(Valve::VR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaRect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingStandingZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pmatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatStandingZeroPoseToRawTrackingPose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPlayAreaSize
void Valve::VR::CVRChaperoneSetup::SetWorkingPlayAreaSize(float sizeX, float sizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sizeX, sizeZ)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sizeX, sizeZ);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingCollisionBoundsInfo
void Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo(::Array<Valve::VR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingSeatedZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pMatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatSeatedZeroPoseToRawTrackingPose)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingStandingZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pMatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatStandingZeroPoseToRawTrackingPose)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ReloadFromDisk
void Valve::VR::CVRChaperoneSetup::ReloadFromDisk(Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::ReloadFromDisk");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReloadFromDisk", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(configFile)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLiveSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingCollisionBoundsTagsInfo
void Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo(::Array<uint8_t>* pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTagsBuffer)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTagsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveCollisionBoundsTagsInfo
bool Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo(::Array<uint8_t>*& pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTagsBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTagsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPhysicalBoundsInfo
bool Valve::VR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo(::Array<Valve::VR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetWorkingPhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLivePhysicalBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLivePhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ExportLiveToBuffer
bool Valve::VR::CVRChaperoneSetup::ExportLiveToBuffer(System::Text::StringBuilder* pBuffer, uint& pnBufferLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::ExportLiveToBuffer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ExportLiveToBuffer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pBuffer, pnBufferLength)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, pnBufferLength);
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ImportFromBufferToWorking
bool Valve::VR::CVRChaperoneSetup::ImportFromBufferToWorking(::Il2CppString* pBuffer, uint nImportFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperoneSetup::ImportFromBufferToWorking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ImportFromBufferToWorking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pBuffer, nImportFlags)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, nImportFlags);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
// Including type: Valve.VR.Compositor_FrameTiming
#include "Valve/VR/Compositor_FrameTiming.hpp"
// Including type: Valve.VR.Compositor_CumulativeStats
#include "Valve/VR/Compositor_CumulativeStats.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRCompositor.SetTrackingSpace
void Valve::VR::CVRCompositor::SetTrackingSpace(Valve::VR::ETrackingUniverseOrigin eOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetTrackingSpace", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetTrackingSpace
Valve::VR::ETrackingUniverseOrigin Valve::VR::CVRCompositor::GetTrackingSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTrackingSpace", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackingUniverseOrigin, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.WaitGetPoses
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::WaitGetPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::WaitGetPoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "WaitGetPoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderPoseArray, pGamePoseArray)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoses
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetLastPoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLastPoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderPoseArray, pGamePoseArray)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoseForTrackedDeviceIndex
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pOutputGamePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLastPoseForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pOutputPose, pOutputGamePose)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, unDeviceIndex, pOutputPose, pOutputGamePose);
}
// Autogenerated method: Valve.VR.CVRCompositor.Submit
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::Submit(Valve::VR::EVREye eEye, Valve::VR::Texture_t& pTexture, Valve::VR::VRTextureBounds_t& pBounds, Valve::VR::EVRSubmitFlags nSubmitFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::Submit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Submit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pTexture, pBounds, nSubmitFlags)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pTexture, pBounds, nSubmitFlags);
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearLastSubmittedFrame
void Valve::VR::CVRCompositor::ClearLastSubmittedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ClearLastSubmittedFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearLastSubmittedFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.PostPresentHandoff
void Valve::VR::CVRCompositor::PostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::PostPresentHandoff");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PostPresentHandoff", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTiming
bool Valve::VR::CVRCompositor::GetFrameTiming(Valve::VR::Compositor_FrameTiming& pTiming, uint unFramesAgo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetFrameTiming");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFrameTiming", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, unFramesAgo)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTiming, unFramesAgo);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimings
uint Valve::VR::CVRCompositor::GetFrameTimings(Valve::VR::Compositor_FrameTiming& pTiming, uint nFrames) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetFrameTimings");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFrameTimings", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, nFrames)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pTiming, nFrames);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimeRemaining
float Valve::VR::CVRCompositor::GetFrameTimeRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetFrameTimeRemaining");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFrameTimeRemaining", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCumulativeStats
void Valve::VR::CVRCompositor::GetCumulativeStats(Valve::VR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCumulativeStats");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCumulativeStats", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pStats, nStatsSizeInBytes)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pStats, nStatsSizeInBytes);
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeToColor
void Valve::VR::CVRCompositor::FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::FadeToColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FadeToColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentFadeColor
Valve::VR::HmdColor_t Valve::VR::CVRCompositor::GetCurrentFadeColor(bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCurrentFadeColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentFadeColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bBackground)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdColor_t, false>(this, ___internal__method, bBackground);
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeGrid
void Valve::VR::CVRCompositor::FadeGrid(float fSeconds, bool bFadeIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::FadeGrid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FadeGrid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fSeconds, bFadeIn)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, bFadeIn);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentGridAlpha
float Valve::VR::CVRCompositor::GetCurrentGridAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCurrentGridAlpha");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentGridAlpha", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.SetSkyboxOverride
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SetSkyboxOverride(::Array<Valve::VR::Texture_t>* pTextures) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SetSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetSkyboxOverride", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTextures)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pTextures);
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearSkyboxOverride
void Valve::VR::CVRCompositor::ClearSkyboxOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ClearSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearSkyboxOverride", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorBringToFront
void Valve::VR::CVRCompositor::CompositorBringToFront() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorBringToFront");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CompositorBringToFront", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorGoToBack
void Valve::VR::CVRCompositor::CompositorGoToBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorGoToBack");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CompositorGoToBack", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorQuit
void Valve::VR::CVRCompositor::CompositorQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorQuit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CompositorQuit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.IsFullscreen
bool Valve::VR::CVRCompositor::IsFullscreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::IsFullscreen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsFullscreen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentSceneFocusProcess
uint Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentSceneFocusProcess", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastFrameRenderer
uint Valve::VR::CVRCompositor::GetLastFrameRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetLastFrameRenderer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLastFrameRenderer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CanRenderScene
bool Valve::VR::CVRCompositor::CanRenderScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CanRenderScene");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CanRenderScene", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ShowMirrorWindow
void Valve::VR::CVRCompositor::ShowMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ShowMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowMirrorWindow", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.HideMirrorWindow
void Valve::VR::CVRCompositor::HideMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::HideMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HideMirrorWindow", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.IsMirrorWindowVisible
bool Valve::VR::CVRCompositor::IsMirrorWindowVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::IsMirrorWindowVisible");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsMirrorWindowVisible", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorDumpImages
void Valve::VR::CVRCompositor::CompositorDumpImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::CompositorDumpImages");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CompositorDumpImages", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ShouldAppRenderWithLowResources
bool Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShouldAppRenderWithLowResources", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceInterleavedReprojectionOn
void Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn(bool bOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ForceInterleavedReprojectionOn", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bOverride)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bOverride);
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceReconnectProcess
void Valve::VR::CVRCompositor::ForceReconnectProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ForceReconnectProcess");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ForceReconnectProcess", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRCompositor.SuspendRendering
void Valve::VR::CVRCompositor::SuspendRendering(bool bSuspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SuspendRendering");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SuspendRendering", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bSuspend)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bSuspend);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureD3D11
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureD3D11(Valve::VR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView);
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseMirrorTextureD3D11
void Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11(System::IntPtr pD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReleaseMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11ShaderResourceView)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11ShaderResourceView);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureGL
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureGL(Valve::VR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetMirrorTextureGL");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetMirrorTextureGL", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pglTextureId, pglSharedTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pglTextureId, pglSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseSharedGLTexture
bool Valve::VR::CVRCompositor::ReleaseSharedGLTexture(uint glTextureId, System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::ReleaseSharedGLTexture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReleaseSharedGLTexture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glTextureId, glSharedTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, glTextureId, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.LockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::LockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::LockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glSharedTextureHandle)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.UnlockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UnlockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(glSharedTextureHandle)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanInstanceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired(System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVulkanInstanceExtensionsRequired", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchValue, unBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanDeviceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVulkanDeviceExtensionsRequired", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pPhysicalDevice, pchValue, unBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize);
}
// Autogenerated method: Valve.VR.CVRCompositor.SetExplicitTimingMode
void Valve::VR::CVRCompositor::SetExplicitTimingMode(Valve::VR::EVRCompositorTimingMode eTimingMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SetExplicitTimingMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetExplicitTimingMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTimingMode)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTimingMode);
}
// Autogenerated method: Valve.VR.CVRCompositor.SubmitExplicitTimingData
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SubmitExplicitTimingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::SubmitExplicitTimingData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SubmitExplicitTimingData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVROverlay/_PollNextOverlayEventPacked
#include "Valve/VR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: Valve.VR.CVROverlay/PollNextOverlayEventUnion
#include "Valve/VR/CVROverlay_PollNextOverlayEventUnion.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: Valve.VR.VROverlayIntersectionParams_t
#include "Valve/VR/VROverlayIntersectionParams_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionResults_t
#include "Valve/VR/VROverlayIntersectionResults_t.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.HmdRect2_t
#include "Valve/VR/HmdRect2_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionMaskPrimitive_t
#include "Valve/VR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVROverlay.FindOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::FindOverlay(::Il2CppString* pchOverlayKey, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::FindOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FindOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.CreateOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayName, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::CreateOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayName, pOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, pOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.DestroyOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::DestroyOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::DestroyOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DestroyOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetHighQualityOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetHighQualityOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetHighQualityOverlay
uint64_t Valve::VR::CVROverlay::GetHighQualityOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayKey
uint Valve::VR::CVROverlay::GetOverlayKey(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayKey");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayKey", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayName
uint Valve::VR::CVROverlay::GetOverlayName(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayName
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayName(uint64_t ulOverlayHandle, ::Il2CppString* pchName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchName)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchName);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayImageData
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayImageData(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unBufferSize, uint& punWidth, uint& punHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayImageData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayImageData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayErrorNameFromEnum
::Il2CppString* Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum(Valve::VR::EVROverlayError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderingPid
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderingPid(uint64_t ulOverlayHandle, uint unPID) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unPID)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unPID);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderingPid
uint Valve::VR::CVROverlay::GetOverlayRenderingPid(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFlag
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFlag(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayFlag", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eOverlayFlag, bEnabled)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlag
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlag(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool& pbEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayFlag", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eOverlayFlag, pbEnabled)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, pbEnabled);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayColor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayColor(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fRed, fGreen, fBlue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayColor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayColor(uint64_t ulOverlayHandle, float& pfRed, float& pfGreen, float& pfBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfRed, pfGreen, pfBlue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfRed, pfGreen, pfBlue);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAlpha
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAlpha(uint64_t ulOverlayHandle, float fAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayAlpha", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fAlpha)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fAlpha);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAlpha
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAlpha(uint64_t ulOverlayHandle, float& pfAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayAlpha", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfAlpha)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfAlpha);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexelAspect
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexelAspect(uint64_t ulOverlayHandle, float fTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fTexelAspect)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexelAspect
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexelAspect(uint64_t ulOverlayHandle, float& pfTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfTexelAspect)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfTexelAspect);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlaySortOrder
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlaySortOrder(uint64_t ulOverlayHandle, uint unSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unSortOrder)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unSortOrder);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlaySortOrder
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlaySortOrder(uint64_t ulOverlayHandle, uint& punSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punSortOrder)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punSortOrder);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayWidthInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayWidthInMeters(uint64_t ulOverlayHandle, float fWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fWidthInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayWidthInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayWidthInMeters(uint64_t ulOverlayHandle, float& pfWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfWidthInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfWidthInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAutoCurveDistanceRangeInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAutoCurveDistanceRangeInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float& pfMinDistanceInMeters, float& pfMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureColorSpace
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureColorSpace(uint64_t ulOverlayHandle, Valve::VR::EColorSpace eTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTextureColorSpace)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureColorSpace
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureColorSpace(uint64_t ulOverlayHandle, Valve::VR::EColorSpace& peTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTextureColorSpace)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTextureColorSpace);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureBounds
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureBounds(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pOverlayTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureBounds
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureBounds(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pOverlayTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderModel
uint Valve::VR::CVROverlay::GetOverlayRenderModel(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::HmdColor_t& pColor, Valve::VR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchValue, unBufferSize, pColor, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pColor, pError);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderModel
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderModel(uint64_t ulOverlayHandle, ::Il2CppString* pchRenderModel, Valve::VR::HmdColor_t& pColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchRenderModel, pColor)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, pColor);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformType
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformType(uint64_t ulOverlayHandle, Valve::VR::VROverlayTransformType& peTransformType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTransformType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTransformType)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTransformType);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformAbsolute
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformAbsolute(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformAbsolute
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformAbsolute(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin& peTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint unTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceComponent
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unDeviceIndex, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceComponent
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformOverlayRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformOverlayRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.HideOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::HideOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::HideOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HideOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.IsOverlayVisible
bool Valve::VR::CVROverlay::IsOverlayVisible(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsOverlayVisible");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsOverlayVisible", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetTransformForOverlayCoordinates
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetTransformForOverlayCoordinates(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdVector2_t coordinatesInOverlay, Valve::VR::HmdMatrix34_t& pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetTransformForOverlayCoordinates");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTransformForOverlayCoordinates", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.PollNextOverlayEvent
bool Valve::VR::CVROverlay::PollNextOverlayEvent(uint64_t ulOverlayHandle, Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::PollNextOverlayEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PollNextOverlayEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayInputMethod
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayInputMethod(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod& peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, peInputMethod)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peInputMethod);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayInputMethod
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayInputMethod(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMethod)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayMouseScale
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayMouseScale(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayMouseScale
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayMouseScale(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvecMouseScale)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: Valve.VR.CVROverlay.ComputeOverlayIntersection
bool Valve::VR::CVROverlay::ComputeOverlayIntersection(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ComputeOverlayIntersection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeOverlayIntersection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pParams, pResults)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pParams, pResults);
}
// Autogenerated method: Valve.VR.CVROverlay.IsHoverTargetOverlay
bool Valve::VR::CVROverlay::IsHoverTargetOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsHoverTargetOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsHoverTargetOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetGamepadFocusOverlay
uint64_t Valve::VR::CVROverlay::GetGamepadFocusOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.SetGamepadFocusOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetGamepadFocusOverlay(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulNewFocusOverlay)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayNeighbor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayNeighbor(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayNeighbor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayNeighbor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom, ulTo)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: Valve.VR.CVROverlay.MoveGamepadFocusToNeighbor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveGamepadFocusToNeighbor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eDirection, ulFrom)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayDualAnalogTransform
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayDualAnalogTransform(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, vCenter, fRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayDualAnalogTransform
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayDualAnalogTransform(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlay, eWhich, pvCenter, pfRadius)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexture(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayTexture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pTexture);
}
// Autogenerated method: Valve.VR.CVROverlay.ClearOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ClearOverlayTexture(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ClearOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearOverlayTexture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRaw
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRaw(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayRaw");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayRaw", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFromFile
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFromFile(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayFromFile");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayFromFile", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pchFilePath)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexture(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTexture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds);
}
// Autogenerated method: Valve.VR.CVROverlay.ReleaseNativeOverlayHandle
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ReleaseNativeOverlayHandle(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ReleaseNativeOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReleaseNativeOverlayHandle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pNativeTextureHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureSize
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureSize(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayTextureSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayTextureSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pWidth, pHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight);
}
// Autogenerated method: Valve.VR.CVROverlay.CreateDashboardOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateDashboardOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::CreateDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateDashboardOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.IsDashboardVisible
bool Valve::VR::CVROverlay::IsDashboardVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsDashboardVisible");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsDashboardVisible", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.IsActiveDashboardOverlay
bool Valve::VR::CVROverlay::IsActiveDashboardOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::IsActiveDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsActiveDashboardOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: Valve.VR.CVROverlay.SetDashboardOverlaySceneProcess
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, unProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: Valve.VR.CVROverlay.GetDashboardOverlaySceneProcess
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint& punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, punProcessId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punProcessId);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowDashboard
void Valve::VR::CVROverlay::ShowDashboard(::Il2CppString* pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowDashboard");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowDashboard", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchOverlayToShow)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: Valve.VR.CVROverlay.GetPrimaryDashboardDevice
uint Valve::VR::CVROverlay::GetPrimaryDashboardDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetPrimaryDashboardDevice");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPrimaryDashboardDevice", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboard
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboard(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowKeyboard");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowKeyboard", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboardForOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboardForOverlay(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowKeyboardForOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowKeyboardForOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: Valve.VR.CVROverlay.GetKeyboardText
uint Valve::VR::CVROverlay::GetKeyboardText(System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetKeyboardText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetKeyboardText", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, cchText)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: Valve.VR.CVROverlay.HideKeyboard
void Valve::VR::CVROverlay::HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::HideKeyboard");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HideKeyboard", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardTransformAbsolute
void Valve::VR::CVROverlay::SetKeyboardTransformAbsolute(Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetKeyboardTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetKeyboardTransformAbsolute", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackingOrigin, pmatTrackingOriginToKeyboardTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTrackingOrigin, pmatTrackingOriginToKeyboardTransform);
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardPositionForOverlay
void Valve::VR::CVROverlay::SetKeyboardPositionForOverlay(uint64_t ulOverlayHandle, Valve::VR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetKeyboardPositionForOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetKeyboardPositionForOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, avoidRect)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayIntersectionMask
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayIntersectionMask(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::SetOverlayIntersectionMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetOverlayIntersectionMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlags
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlags(uint64_t ulOverlayHandle, uint& pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::GetOverlayFlags");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayFlags", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pFlags)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pFlags);
}
// Autogenerated method: Valve.VR.CVROverlay.ShowMessageOverlay
Valve::VR::VRMessageOverlayResponse Valve::VR::CVROverlay::ShowMessageOverlay(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::ShowMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowMessageOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: Valve.VR.CVROverlay.CloseMessageOverlay
void Valve::VR::CVROverlay::CloseMessageOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::CloseMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CloseMessageOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVROverlay/_PollNextOverlayEventPacked
#include "Valve/VR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: Valve.VR.VREvent_t_Packed
#include "Valve/VR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVROverlay/_PollNextOverlayEventPacked.Invoke
bool Valve::VR::CVROverlay::_PollNextOverlayEventPacked::Invoke(uint64_t ulOverlayHandle, Valve::VR::VREvent_t_Packed& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_PollNextOverlayEventPacked::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.CVROverlay/_PollNextOverlayEventPacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke(uint64_t ulOverlayHandle, Valve::VR::VREvent_t_Packed& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, pEvent, uncbVREvent, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.CVROverlay/_PollNextOverlayEventPacked.EndInvoke
bool Valve::VR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke(Valve::VR::VREvent_t_Packed& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRRenderModels/_GetComponentStatePacked
#include "Valve/VR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: Valve.VR.CVRRenderModels/GetComponentStateUnion
#include "Valve/VR/CVRRenderModels_GetComponentStateUnion.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRRenderModels.LoadRenderModel_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadRenderModel_Async(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadRenderModel_Async");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadRenderModel_Async", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, ppRenderModel)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, ppRenderModel);
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeRenderModel
void Valve::VR::CVRRenderModels::FreeRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTexture_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTexture_Async(int textureId, System::IntPtr& ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadTexture_Async");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadTexture_Async", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, ppTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, ppTexture);
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTexture
void Valve::VR::CVRRenderModels::FreeTexture(System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::FreeTexture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FreeTexture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTextureD3D11_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTextureD3D11_Async(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pD3D11Device, ppD3D11Texture2D)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, ppD3D11Texture2D);
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadIntoTextureD3D11_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadIntoTextureD3D11_Async(int textureId, System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::LoadIntoTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadIntoTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(textureId, pDstTexture)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTextureD3D11
void Valve::VR::CVRRenderModels::FreeTextureD3D11(System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::FreeTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FreeTextureD3D11", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pD3D11Texture2D)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelName
uint Valve::VR::CVRRenderModels::GetRenderModelName(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRenderModelName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unRenderModelIndex, pchRenderModelName, unRenderModelNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelCount
uint Valve::VR::CVRRenderModels::GetRenderModelCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRenderModelCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentCount
uint Valve::VR::CVRRenderModels::GetComponentCount(::Il2CppString* pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetComponentCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentName
uint Valve::VR::CVRRenderModels::GetComponentName(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetComponentName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentButtonMask
uint64_t Valve::VR::CVRRenderModels::GetComponentButtonMask(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentButtonMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetComponentButtonMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentRenderModelName
uint Valve::VR::CVRRenderModels::GetComponentRenderModelName(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentRenderModelName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetComponentRenderModelName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentState
bool Valve::VR::CVRRenderModels::GetComponentState(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetComponentState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetComponentState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: Valve.VR.CVRRenderModels.RenderModelHasComponent
bool Valve::VR::CVRRenderModels::RenderModelHasComponent(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::RenderModelHasComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RenderModelHasComponent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelThumbnailURL
uint Valve::VR::CVRRenderModels::GetRenderModelThumbnailURL(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, Valve::VR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelThumbnailURL");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRenderModelThumbnailURL", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelOriginalPath
uint Valve::VR::CVRRenderModels::GetRenderModelOriginalPath(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, Valve::VR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelOriginalPath");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRenderModelOriginalPath", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError);
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelErrorNameFromEnum
::Il2CppString* Valve::VR::CVRRenderModels::GetRenderModelErrorNameFromEnum(Valve::VR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::GetRenderModelErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRenderModelErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRRenderModels/_GetComponentStatePacked
#include "Valve/VR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: Valve.VR.VRControllerState_t_Packed
#include "Valve/VR/VRControllerState_t_Packed.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRRenderModels/_GetComponentStatePacked.Invoke
bool Valve::VR::CVRRenderModels::_GetComponentStatePacked::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t_Packed& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_GetComponentStatePacked::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: Valve.VR.CVRRenderModels/_GetComponentStatePacked.BeginInvoke
System::IAsyncResult* Valve::VR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t_Packed& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object);
}
// Autogenerated method: Valve.VR.CVRRenderModels/_GetComponentStatePacked.EndInvoke
bool Valve::VR::CVRRenderModels::_GetComponentStatePacked::EndInvoke(Valve::VR::VRControllerState_t_Packed& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRRenderModels::_GetComponentStatePacked::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, pState, pComponentState, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pState, pComponentState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRNotifications
#include "Valve/VR/CVRNotifications.hpp"
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
// Including type: Valve.VR.NotificationBitmap_t
#include "Valve/VR/NotificationBitmap_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRNotifications.CreateNotification
Valve::VR::EVRNotificationError Valve::VR::CVRNotifications::CreateNotification(uint64_t ulOverlayHandle, uint64_t ulUserValue, Valve::VR::EVRNotificationType type, ::Il2CppString* pchText, Valve::VR::EVRNotificationStyle style, Valve::VR::NotificationBitmap_t& pImage, uint& pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRNotifications::CreateNotification");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateNotification", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId);
}
// Autogenerated method: Valve.VR.CVRNotifications.RemoveNotification
Valve::VR::EVRNotificationError Valve::VR::CVRNotifications::RemoveNotification(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRNotifications::RemoveNotification");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RemoveNotification", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(notificationId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSettings.GetSettingsErrorNameFromEnum
::Il2CppString* Valve::VR::CVRSettings::GetSettingsErrorNameFromEnum(Valve::VR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetSettingsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSettingsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eError)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eError);
}
// Autogenerated method: Valve.VR.CVRSettings.Sync
bool Valve::VR::CVRSettings::Sync(bool bForce, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::Sync");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Sync", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.SetBool
void Valve::VR::CVRSettings::SetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetBool");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetBool", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, bValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.SetInt32
void Valve::VR::CVRSettings::SetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetInt32");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetInt32", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, nValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.SetFloat
void Valve::VR::CVRSettings::SetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetFloat");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetFloat", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, flValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.SetString
void Valve::VR::CVRSettings::SetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::SetString");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.GetBool
bool Valve::VR::CVRSettings::GetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetBool");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetBool", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.GetInt32
int Valve::VR::CVRSettings::GetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetInt32");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetInt32", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.GetFloat
float Valve::VR::CVRSettings::GetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetFloat");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.GetString
void Valve::VR::CVRSettings::GetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::GetString");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, pchValue, unValueLen, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.RemoveSection
void Valve::VR::CVRSettings::RemoveSection(::Il2CppString* pchSection, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::RemoveSection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RemoveSection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, peError);
}
// Autogenerated method: Valve.VR.CVRSettings.RemoveKeyInSection
void Valve::VR::CVRSettings::RemoveKeyInSection(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, Valve::VR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRSettings::RemoveKeyInSection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RemoveKeyInSection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchSection, pchSettingsKey, peError)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
