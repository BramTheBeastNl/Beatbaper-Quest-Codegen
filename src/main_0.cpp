// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Easy
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Easy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Easy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Easy"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Easy
void GlobalNamespace::BeatmapDifficulty::_set_Easy(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Easy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Easy", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Normal
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Normal
void GlobalNamespace::BeatmapDifficulty::_set_Normal(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Hard
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Hard() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Hard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Hard"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Hard
void GlobalNamespace::BeatmapDifficulty::_set_Hard(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Hard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Hard", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Expert
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Expert() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Expert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Expert"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Expert
void GlobalNamespace::BeatmapDifficulty::_set_Expert(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Expert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Expert", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty ExpertPlus
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_ExpertPlus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_ExpertPlus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "ExpertPlus"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty ExpertPlus
void GlobalNamespace::BeatmapDifficulty::_set_ExpertPlus(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_ExpertPlus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "ExpertPlus", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapDifficultySerializedMethods
#include "GlobalNamespace/BeatmapDifficultySerializedMethods.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyEasySerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyEasySerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyEasySerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyEasySerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyEasySerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyEasySerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyEasySerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyEasySerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyNormalSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyNormalSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyNormalSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyNormalSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyNormalSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyNormalSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyNormalSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyNormalSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyHardSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyHardSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyHardSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyHardSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyHardSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyHardSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyHardSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyHardSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyExpertSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyExpertSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyExpertPlusNameSerializedLegacy
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusNameSerializedLegacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusNameSerializedLegacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusNameSerializedLegacy"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyExpertPlusNameSerializedLegacy
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusNameSerializedLegacy(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusNameSerializedLegacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusNameSerializedLegacy", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyExpertPlusSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyExpertPlusSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyUnknownSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyUnknownSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyUnknownSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyUnknownSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyUnknownSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyUnknownSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyUnknownSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyUnknownSerializedName", value));
}
// Autogenerated method: BeatmapDifficultySerializedMethods.SerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::SerializedName(GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::SerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultySerializedMethods", "SerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated method: BeatmapDifficultySerializedMethods.BeatmapDifficultyFromSerializedName
bool GlobalNamespace::BeatmapDifficultySerializedMethods::BeatmapDifficultyFromSerializedName(::Il2CppString* name, GlobalNamespace::BeatmapDifficulty& difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::BeatmapDifficultyFromSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultySerializedMethods", "BeatmapDifficultyFromSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, difficulty);
}
// Writing MetadataGetter for method: BeatmapDifficultySerializedMethods::SerializedName
// Il2CppName: SerializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::BeatmapDifficulty)>(&BeatmapDifficultySerializedMethods::SerializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultySerializedMethods*), "SerializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultySerializedMethods::BeatmapDifficultyFromSerializedName
// Il2CppName: BeatmapDifficultyFromSerializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, GlobalNamespace::BeatmapDifficulty&)>(&BeatmapDifficultySerializedMethods::BeatmapDifficultyFromSerializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultySerializedMethods*), "BeatmapDifficultyFromSerializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Easy
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Easy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Easy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Easy"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Easy
void GlobalNamespace::BeatmapDifficultyMask::_set_Easy(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Easy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Easy", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Normal
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Normal
void GlobalNamespace::BeatmapDifficultyMask::_set_Normal(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Hard
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Hard() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Hard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Hard"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Hard
void GlobalNamespace::BeatmapDifficultyMask::_set_Hard(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Hard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Hard", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Expert
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Expert() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Expert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Expert"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Expert
void GlobalNamespace::BeatmapDifficultyMask::_set_Expert(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Expert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Expert", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask ExpertPlus
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_ExpertPlus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_ExpertPlus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "ExpertPlus"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask ExpertPlus
void GlobalNamespace::BeatmapDifficultyMask::_set_ExpertPlus(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_ExpertPlus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "ExpertPlus", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask All
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "All"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask All
void GlobalNamespace::BeatmapDifficultyMask::_set_All(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapDifficultyMaskExtensions
#include "GlobalNamespace/BeatmapDifficultyMaskExtensions.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapDifficultyMaskExtensions.ToMask
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMaskExtensions::ToMask(GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::ToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "ToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.FromMask
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficultyMaskExtensions::FromMask(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::FromMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "FromMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.LocalizedKey
::Il2CppString* GlobalNamespace::BeatmapDifficultyMaskExtensions::LocalizedKey(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::LocalizedKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "LocalizedKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.ShortLocalizedKey
::Il2CppString* GlobalNamespace::BeatmapDifficultyMaskExtensions::ShortLocalizedKey(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::ShortLocalizedKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "ShortLocalizedKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.Contains
bool GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains(GlobalNamespace::BeatmapDifficultyMask mask, GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, difficulty);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.Contains
bool GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains(GlobalNamespace::BeatmapDifficultyMask mask, GlobalNamespace::BeatmapDifficultyMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.DifferenceFrom
int GlobalNamespace::BeatmapDifficultyMaskExtensions::DifferenceFrom(GlobalNamespace::BeatmapDifficultyMask mask, GlobalNamespace::BeatmapDifficultyMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::DifferenceFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "DifferenceFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.ToHexString
::Il2CppString* GlobalNamespace::BeatmapDifficultyMaskExtensions::ToHexString(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::ToHexString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "ToHexString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::ToMask
// Il2CppName: ToMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (*)(GlobalNamespace::BeatmapDifficulty)>(&BeatmapDifficultyMaskExtensions::ToMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "ToMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::FromMask
// Il2CppName: FromMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (*)(GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyMaskExtensions::FromMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "FromMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::LocalizedKey
// Il2CppName: LocalizedKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyMaskExtensions::LocalizedKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "LocalizedKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::ShortLocalizedKey
// Il2CppName: ShortLocalizedKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyMaskExtensions::ShortLocalizedKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "ShortLocalizedKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapDifficultyMask, GlobalNamespace::BeatmapDifficulty)>(&BeatmapDifficultyMaskExtensions::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapDifficultyMask, GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyMaskExtensions::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::DifferenceFrom
// Il2CppName: DifferenceFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(GlobalNamespace::BeatmapDifficultyMask, GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyMaskExtensions::DifferenceFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "DifferenceFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyMaskExtensions::ToHexString
// Il2CppName: ToHexString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyMaskExtensions::ToHexString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyMaskExtensions*), "ToHexString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatmapEventData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventData::*)(float, GlobalNamespace::BeatmapEventType, int)>(&BeatmapEventData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventData::*)(float, GlobalNamespace::BeatmapEventType, int)>(&BeatmapEventData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventType
#include "GlobalNamespace/BeatmapEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event0
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event0"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event0
void GlobalNamespace::BeatmapEventType::_set_Event0(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event0", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event1
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event1"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event1
void GlobalNamespace::BeatmapEventType::_set_Event1(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event1", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event2
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event2"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event2
void GlobalNamespace::BeatmapEventType::_set_Event2(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event2", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event3
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event3"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event3
void GlobalNamespace::BeatmapEventType::_set_Event3(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event3", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event4
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event4"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event4
void GlobalNamespace::BeatmapEventType::_set_Event4(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event4", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event5
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event5"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event5
void GlobalNamespace::BeatmapEventType::_set_Event5(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event5", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event6
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event6"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event6
void GlobalNamespace::BeatmapEventType::_set_Event6(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event6", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event7
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event7"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event7
void GlobalNamespace::BeatmapEventType::_set_Event7(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event7", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event8
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event8"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event8
void GlobalNamespace::BeatmapEventType::_set_Event8(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event8", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event9
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event9"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event9
void GlobalNamespace::BeatmapEventType::_set_Event9(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event9", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event10
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event10() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event10");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event10"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event10
void GlobalNamespace::BeatmapEventType::_set_Event10(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event10");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event10", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event11
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event11() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event11"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event11
void GlobalNamespace::BeatmapEventType::_set_Event11(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event11", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event12
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event12() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event12"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event12
void GlobalNamespace::BeatmapEventType::_set_Event12(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event12", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event13
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event13"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event13
void GlobalNamespace::BeatmapEventType::_set_Event13(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event13", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event14
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event14() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event14");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event14"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event14
void GlobalNamespace::BeatmapEventType::_set_Event14(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event14");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event14", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event15
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event15"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event15
void GlobalNamespace::BeatmapEventType::_set_Event15(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event15", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event16
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event16() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event16"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event16
void GlobalNamespace::BeatmapEventType::_set_Event16(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event16", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event17
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event17() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event17");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event17"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event17
void GlobalNamespace::BeatmapEventType::_set_Event17(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event17");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event17", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType VoidEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_VoidEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_VoidEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "VoidEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType VoidEvent
void GlobalNamespace::BeatmapEventType::_set_VoidEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_VoidEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "VoidEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special0
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special0"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special0
void GlobalNamespace::BeatmapEventType::_set_Special0(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special0", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special1
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special1"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special1
void GlobalNamespace::BeatmapEventType::_set_Special1(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special1", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special2
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special2"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special2
void GlobalNamespace::BeatmapEventType::_set_Special2(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special2", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special3
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special3"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special3
void GlobalNamespace::BeatmapEventType::_set_Special3(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special3", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventTypeExtensions
#include "GlobalNamespace/BeatmapEventTypeExtensions.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kEarlyRotationEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kEarlyRotationEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kEarlyRotationEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kEarlyRotationEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kEarlyRotationEvent
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kEarlyRotationEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kEarlyRotationEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kEarlyRotationEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLateRotationEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLateRotationEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLateRotationEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLateRotationEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLateRotationEvent
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLateRotationEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLateRotationEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLateRotationEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kBPMChangeEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kBPMChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kBPMChangeEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kBPMChangeEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kBPMChangeEvent
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kBPMChangeEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kBPMChangeEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kBPMChangeEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights1
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights1"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights1
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights1(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights1", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights2
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights2"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights2
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights2(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights2", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights3
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights3"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights3
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights3(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights3", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights4
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights4"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights4
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights4(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights4", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights5
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights5"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights5
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights5(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights5", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kRotateRings
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kRotateRings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kRotateRings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kRotateRings"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kRotateRings
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kRotateRings(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kRotateRings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kRotateRings", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kCompressExpand
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kCompressExpand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kCompressExpand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kCompressExpand"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kCompressExpand
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kCompressExpand(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kCompressExpand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kCompressExpand", value));
}
// Autogenerated method: BeatmapEventTypeExtensions.GetEventsValidForAllBeatmaps
System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>* GlobalNamespace::BeatmapEventTypeExtensions::GetEventsValidForAllBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::GetEventsValidForAllBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "GetEventsValidForAllBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsBPMChangeEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsBPMChangeEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsBPMChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsBPMChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsRotationEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsRotationEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsRotationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsRotationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsSpecialEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsSpecialEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsSpecialEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsSpecialEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsLightIntensityChangeEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsLightIntensityChangeEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsLightIntensityChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsLightIntensityChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsEarlyRotationEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyRotationEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyRotationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsEarlyRotationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsLateRotationEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsLateRotationEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsLateRotationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsLateRotationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsEarlyEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsEarlyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsSpawnAffectingEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsSpawnAffectingEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsSpawnAffectingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsSpawnAffectingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::GetEventsValidForAllBeatmaps
// Il2CppName: GetEventsValidForAllBeatmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>* (*)()>(&BeatmapEventTypeExtensions::GetEventsValidForAllBeatmaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "GetEventsValidForAllBeatmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsBPMChangeEvent
// Il2CppName: IsBPMChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsBPMChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsBPMChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsRotationEvent
// Il2CppName: IsRotationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsRotationEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsRotationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsSpecialEvent
// Il2CppName: IsSpecialEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsSpecialEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsSpecialEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsLightIntensityChangeEvent
// Il2CppName: IsLightIntensityChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsLightIntensityChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsLightIntensityChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsEarlyRotationEvent
// Il2CppName: IsEarlyRotationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsEarlyRotationEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsEarlyRotationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsLateRotationEvent
// Il2CppName: IsLateRotationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsLateRotationEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsLateRotationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsEarlyEvent
// Il2CppName: IsEarlyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsEarlyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsEarlyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventTypeExtensions::IsSpawnAffectingEvent
// Il2CppName: IsSpawnAffectingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::BeatmapEventType)>(&BeatmapEventTypeExtensions::IsSpawnAffectingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventTypeExtensions*), "IsSpawnAffectingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IReadonlyBeatmapLineData
#include "GlobalNamespace/IReadonlyBeatmapLineData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IReadonlyBeatmapLineData.get_beatmapObjectsData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>* GlobalNamespace::IReadonlyBeatmapLineData::get_beatmapObjectsData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IReadonlyBeatmapLineData::get_beatmapObjectsData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectsData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IReadonlyBeatmapLineData::get_beatmapObjectsData
// Il2CppName: get_beatmapObjectsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>* (IReadonlyBeatmapLineData::*)()>(&IReadonlyBeatmapLineData::get_beatmapObjectsData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IReadonlyBeatmapLineData*), "get_beatmapObjectsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLineData
#include "GlobalNamespace/BeatmapLineData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapLineData.get_beatmapObjectsData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>* GlobalNamespace::BeatmapLineData::get_beatmapObjectsData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLineData::get_beatmapObjectsData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectsData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLineData.AddBeatmapObjectData
void GlobalNamespace::BeatmapLineData::AddBeatmapObjectData(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLineData::AddBeatmapObjectData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Writing MetadataGetter for method: BeatmapLineData::get_beatmapObjectsData
// Il2CppName: get_beatmapObjectsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>* (BeatmapLineData::*)()>(&BeatmapLineData::get_beatmapObjectsData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLineData*), "get_beatmapObjectsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapLineData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapLineData::*)(int)>(&BeatmapLineData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLineData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapLineData::*)(int)>(&BeatmapLineData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLineData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapLineData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapLineData::*)(System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>*)>(&BeatmapLineData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLineData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapLineData::*)(System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>*)>(&BeatmapLineData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLineData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapLineData::AddBeatmapObjectData
// Il2CppName: AddBeatmapObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapLineData::*)(GlobalNamespace::BeatmapObjectData*)>(&BeatmapLineData::AddBeatmapObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapLineData*), "AddBeatmapObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectData.get_time
float GlobalNamespace::BeatmapObjectData::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectData.set_time
void GlobalNamespace::BeatmapObjectData::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectData.get_lineIndex
int GlobalNamespace::BeatmapObjectData::get_lineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::get_lineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectData.set_lineIndex
void GlobalNamespace::BeatmapObjectData::set_lineIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::set_lineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectData.MirrorLineIndex
void GlobalNamespace::BeatmapObjectData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Autogenerated method: BeatmapObjectData.MoveTime
void GlobalNamespace::BeatmapObjectData::MoveTime(float newTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::MoveTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newTime);
}
// Autogenerated method: BeatmapObjectData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::BeatmapObjectData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BeatmapObjectData::get_beatmapObjectType
// Il2CppName: get_beatmapObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectType (BeatmapObjectData::*)()>(&BeatmapObjectData::get_beatmapObjectType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "get_beatmapObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectData::*)()>(&BeatmapObjectData::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectData::*)(float)>(&BeatmapObjectData::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::get_lineIndex
// Il2CppName: get_lineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BeatmapObjectData::*)()>(&BeatmapObjectData::get_lineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "get_lineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::set_lineIndex
// Il2CppName: set_lineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectData::*)(int)>(&BeatmapObjectData::set_lineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "set_lineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectData::*)(float, int)>(&BeatmapObjectData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectData::*)(float, int)>(&BeatmapObjectData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::MirrorLineIndex
// Il2CppName: MirrorLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectData::*)(int)>(&BeatmapObjectData::MirrorLineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "MirrorLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::MoveTime
// Il2CppName: MoveTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectData::*)(float)>(&BeatmapObjectData::MoveTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "MoveTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectData* (BeatmapObjectData::*)()>(&BeatmapObjectData::GetCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType Note
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_Note() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_Note");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "Note"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType Note
void GlobalNamespace::BeatmapObjectType::_set_Note(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_Note");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "Note", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType Obstacle
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_Obstacle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_Obstacle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "Obstacle"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType Obstacle
void GlobalNamespace::BeatmapObjectType::_set_Obstacle(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_Obstacle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "Obstacle", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType Waypoint
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_Waypoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_Waypoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "Waypoint"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType Waypoint
void GlobalNamespace::BeatmapObjectType::_set_Waypoint(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_Waypoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "Waypoint", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType None
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "None"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType None
void GlobalNamespace::BeatmapObjectType::_set_None(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "None", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BitMaskUtil
#include "GlobalNamespace/BitMaskUtil.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BitMaskUtil.NumberOfSetBits
uint GlobalNamespace::BitMaskUtil::NumberOfSetBits(uint64_t i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::NumberOfSetBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "NumberOfSetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, i);
}
// Autogenerated method: BitMaskUtil.NumberOfSetBits
uint GlobalNamespace::BitMaskUtil::NumberOfSetBits(uint i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::NumberOfSetBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "NumberOfSetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, i);
}
// Autogenerated method: BitMaskUtil.ShiftLeft
uint64_t GlobalNamespace::BitMaskUtil::ShiftLeft(uint64_t& value, int& shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::ShiftLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "ShiftLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(shift)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, shift);
}
// Autogenerated method: BitMaskUtil.ShiftRight
uint64_t GlobalNamespace::BitMaskUtil::ShiftRight(uint64_t& value, int& shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::ShiftRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "ShiftRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(shift)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, shift);
}
// Writing MetadataGetter for method: BitMaskUtil::NumberOfSetBits
// Il2CppName: NumberOfSetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&BitMaskUtil::NumberOfSetBits)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitMaskUtil*), "NumberOfSetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: BitMaskUtil::NumberOfSetBits
// Il2CppName: NumberOfSetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&BitMaskUtil::NumberOfSetBits)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitMaskUtil*), "NumberOfSetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: BitMaskUtil::ShiftLeft
// Il2CppName: ShiftLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t&, int&)>(&BitMaskUtil::ShiftLeft)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitMaskUtil*), "ShiftLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: BitMaskUtil::ShiftRight
// Il2CppName: ShiftRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t&, int&)>(&BitMaskUtil::ShiftRight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitMaskUtil*), "ShiftRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ColorType ColorA
GlobalNamespace::ColorType GlobalNamespace::ColorType::_get_ColorA() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_get_ColorA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ColorType>("", "ColorType", "ColorA"));
}
// Autogenerated static field setter
// Set static field: static public ColorType ColorA
void GlobalNamespace::ColorType::_set_ColorA(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_set_ColorA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorType", "ColorA", value));
}
// Autogenerated static field getter
// Get static field: static public ColorType ColorB
GlobalNamespace::ColorType GlobalNamespace::ColorType::_get_ColorB() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_get_ColorB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ColorType>("", "ColorType", "ColorB"));
}
// Autogenerated static field setter
// Set static field: static public ColorType ColorB
void GlobalNamespace::ColorType::_set_ColorB(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_set_ColorB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorType", "ColorB", value));
}
// Autogenerated static field getter
// Get static field: static public ColorType None
GlobalNamespace::ColorType GlobalNamespace::ColorType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ColorType>("", "ColorType", "None"));
}
// Autogenerated static field setter
// Set static field: static public ColorType None
void GlobalNamespace::ColorType::_set_None(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorType", "None", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Up
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Up
void GlobalNamespace::NoteCutDirection::_set_Up(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Down
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Down
void GlobalNamespace::NoteCutDirection::_set_Down(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Left
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Left
void GlobalNamespace::NoteCutDirection::_set_Left(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Right
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Right
void GlobalNamespace::NoteCutDirection::_set_Right(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection UpLeft
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_UpLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_UpLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "UpLeft"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection UpLeft
void GlobalNamespace::NoteCutDirection::_set_UpLeft(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_UpLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "UpLeft", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection UpRight
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_UpRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_UpRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "UpRight"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection UpRight
void GlobalNamespace::NoteCutDirection::_set_UpRight(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_UpRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "UpRight", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection DownLeft
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_DownLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_DownLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "DownLeft"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection DownLeft
void GlobalNamespace::NoteCutDirection::_set_DownLeft(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_DownLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "DownLeft", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection DownRight
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_DownRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_DownRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "DownRight"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection DownRight
void GlobalNamespace::NoteCutDirection::_set_DownRight(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_DownRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "DownRight", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Any
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Any"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Any
void GlobalNamespace::NoteCutDirection::_set_Any(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Any", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection None
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection None
void GlobalNamespace::NoteCutDirection::_set_None(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "None", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutDirectionExtensions
#include "GlobalNamespace/NoteCutDirectionExtensions.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutDirectionExtensions.Direction
UnityEngine::Vector2 GlobalNamespace::NoteCutDirectionExtensions::Direction(GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::Direction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "Direction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection);
}
// Autogenerated method: NoteCutDirectionExtensions.RotationAngle
float GlobalNamespace::NoteCutDirectionExtensions::RotationAngle(GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::RotationAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "RotationAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection);
}
// Autogenerated method: NoteCutDirectionExtensions.Rotation
UnityEngine::Quaternion GlobalNamespace::NoteCutDirectionExtensions::Rotation(GlobalNamespace::NoteCutDirection cutDirection, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::Rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "Rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection, offset);
}
// Autogenerated method: NoteCutDirectionExtensions.IsMainDirection
bool GlobalNamespace::NoteCutDirectionExtensions::IsMainDirection(GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::IsMainDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "IsMainDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection);
}
// Autogenerated method: NoteCutDirectionExtensions.MainNoteCutDirectionFromCutDirAngle
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirectionExtensions::MainNoteCutDirectionFromCutDirAngle(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::MainNoteCutDirectionFromCutDirAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "MainNoteCutDirectionFromCutDirAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteCutDirection, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle);
}
// Writing MetadataGetter for method: NoteCutDirectionExtensions::Direction
// Il2CppName: Direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(GlobalNamespace::NoteCutDirection)>(&NoteCutDirectionExtensions::Direction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutDirectionExtensions*), "Direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>()});
  }
};
// Writing MetadataGetter for method: NoteCutDirectionExtensions::RotationAngle
// Il2CppName: RotationAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(GlobalNamespace::NoteCutDirection)>(&NoteCutDirectionExtensions::RotationAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutDirectionExtensions*), "RotationAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>()});
  }
};
// Writing MetadataGetter for method: NoteCutDirectionExtensions::Rotation
// Il2CppName: Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(GlobalNamespace::NoteCutDirection, float)>(&NoteCutDirectionExtensions::Rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutDirectionExtensions*), "Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteCutDirectionExtensions::IsMainDirection
// Il2CppName: IsMainDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::NoteCutDirection)>(&NoteCutDirectionExtensions::IsMainDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutDirectionExtensions*), "IsMainDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>()});
  }
};
// Writing MetadataGetter for method: NoteCutDirectionExtensions::MainNoteCutDirectionFromCutDirAngle
// Il2CppName: MainNoteCutDirectionFromCutDirAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteCutDirection (*)(float)>(&NoteCutDirectionExtensions::MainNoteCutDirectionFromCutDirAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutDirectionExtensions*), "MainNoteCutDirectionFromCutDirAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteData.get_colorType
GlobalNamespace::ColorType GlobalNamespace::NoteData::get_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ColorType, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_colorType
void GlobalNamespace::NoteData::set_colorType(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_cutDirection
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteData::get_cutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_cutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteCutDirection, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_cutDirection
void GlobalNamespace::NoteData::set_cutDirection(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_cutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_timeToNextColorNote
float GlobalNamespace::NoteData::get_timeToNextColorNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_timeToNextColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeToNextColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_timeToNextColorNote
void GlobalNamespace::NoteData::set_timeToNextColorNote(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_timeToNextColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeToNextColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_timeToPrevColorNote
float GlobalNamespace::NoteData::get_timeToPrevColorNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_timeToPrevColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeToPrevColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_timeToPrevColorNote
void GlobalNamespace::NoteData::set_timeToPrevColorNote(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_timeToPrevColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeToPrevColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_noteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::get_noteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteLineLayer, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_noteLineLayer
void GlobalNamespace::NoteData::set_noteLineLayer(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_startNoteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::get_startNoteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_startNoteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startNoteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteLineLayer, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_startNoteLineLayer
void GlobalNamespace::NoteData::set_startNoteLineLayer(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_startNoteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startNoteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_flipLineIndex
int GlobalNamespace::NoteData::get_flipLineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_flipLineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_flipLineIndex
void GlobalNamespace::NoteData::set_flipLineIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_flipLineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_flipYSide
float GlobalNamespace::NoteData::get_flipYSide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_flipYSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipYSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_flipYSide
void GlobalNamespace::NoteData::set_flipYSide(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_flipYSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipYSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_duration
float GlobalNamespace::NoteData::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_duration
void GlobalNamespace::NoteData::set_duration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.CreateBombNoteData
GlobalNamespace::NoteData* GlobalNamespace::NoteData::CreateBombNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::CreateBombNoteData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteData", "CreateBombNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time, lineIndex, noteLineLayer);
}
// Autogenerated method: NoteData.CreateBasicNoteData
GlobalNamespace::NoteData* GlobalNamespace::NoteData::CreateBasicNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::CreateBasicNoteData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteData", "CreateBasicNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer), ::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time, lineIndex, noteLineLayer, colorType, cutDirection);
}
// Autogenerated method: NoteData.SetNoteStartLineLayer
void GlobalNamespace::NoteData::SetNoteStartLineLayer(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SetNoteStartLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteStartLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: NoteData.SetNoteFlipToNote
void GlobalNamespace::NoteData::SetNoteFlipToNote(GlobalNamespace::NoteData* targetNote) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SetNoteFlipToNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteFlipToNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetNote)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetNote);
}
// Autogenerated method: NoteData.SwitchNoteColorType
void GlobalNamespace::NoteData::SwitchNoteColorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SwitchNoteColorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchNoteColorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.MirrorTransformCutDirection
void GlobalNamespace::NoteData::MirrorTransformCutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::MirrorTransformCutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorTransformCutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.SetNoteToAnyCutDirection
void GlobalNamespace::NoteData::SetNoteToAnyCutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SetNoteToAnyCutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteToAnyCutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.ChangeNoteCutDirection
void GlobalNamespace::NoteData::ChangeNoteCutDirection(GlobalNamespace::NoteCutDirection newCutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::ChangeNoteCutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeNoteCutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newCutDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newCutDirection);
}
// Autogenerated method: NoteData.TransformNoteAOrBToRandomType
void GlobalNamespace::NoteData::TransformNoteAOrBToRandomType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::TransformNoteAOrBToRandomType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransformNoteAOrBToRandomType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::NoteData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::NoteData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.MirrorLineIndex
void GlobalNamespace::NoteData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Writing MetadataGetter for method: NoteData::get_colorType
// Il2CppName: get_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ColorType (NoteData::*)()>(&NoteData::get_colorType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_colorType
// Il2CppName: set_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(GlobalNamespace::ColorType)>(&NoteData::set_colorType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorType>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_cutDirection
// Il2CppName: get_cutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteCutDirection (NoteData::*)()>(&NoteData::get_cutDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_cutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_cutDirection
// Il2CppName: set_cutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(GlobalNamespace::NoteCutDirection)>(&NoteData::set_cutDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_cutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_timeToNextColorNote
// Il2CppName: get_timeToNextColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteData::*)()>(&NoteData::get_timeToNextColorNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_timeToNextColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_timeToNextColorNote
// Il2CppName: set_timeToNextColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(float)>(&NoteData::set_timeToNextColorNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_timeToNextColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_timeToPrevColorNote
// Il2CppName: get_timeToPrevColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteData::*)()>(&NoteData::get_timeToPrevColorNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_timeToPrevColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_timeToPrevColorNote
// Il2CppName: set_timeToPrevColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(float)>(&NoteData::set_timeToPrevColorNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_timeToPrevColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_noteLineLayer
// Il2CppName: get_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteLineLayer (NoteData::*)()>(&NoteData::get_noteLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_noteLineLayer
// Il2CppName: set_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(GlobalNamespace::NoteLineLayer)>(&NoteData::set_noteLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_startNoteLineLayer
// Il2CppName: get_startNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteLineLayer (NoteData::*)()>(&NoteData::get_startNoteLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_startNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_startNoteLineLayer
// Il2CppName: set_startNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(GlobalNamespace::NoteLineLayer)>(&NoteData::set_startNoteLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_startNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_flipLineIndex
// Il2CppName: get_flipLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NoteData::*)()>(&NoteData::get_flipLineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_flipLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_flipLineIndex
// Il2CppName: set_flipLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(int)>(&NoteData::set_flipLineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_flipLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_flipYSide
// Il2CppName: get_flipYSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteData::*)()>(&NoteData::get_flipYSide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_flipYSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_flipYSide
// Il2CppName: set_flipYSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(float)>(&NoteData::set_flipYSide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_flipYSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteData::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteData::*)()>(&NoteData::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::set_duration
// Il2CppName: set_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(float)>(&NoteData::set_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "set_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(float, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::NoteLineLayer, GlobalNamespace::ColorType, GlobalNamespace::NoteCutDirection, float, float, int, float, float)>(&NoteData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(float, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::NoteLineLayer, GlobalNamespace::ColorType, GlobalNamespace::NoteCutDirection, float, float, int, float, float)>(&NoteData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteData::CreateBombNoteData
// Il2CppName: CreateBombNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteData* (*)(float, int, GlobalNamespace::NoteLineLayer)>(&NoteData::CreateBombNoteData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "CreateBombNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: NoteData::CreateBasicNoteData
// Il2CppName: CreateBasicNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteData* (*)(float, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::ColorType, GlobalNamespace::NoteCutDirection)>(&NoteData::CreateBasicNoteData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "CreateBasicNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>()});
  }
};
// Writing MetadataGetter for method: NoteData::SetNoteStartLineLayer
// Il2CppName: SetNoteStartLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(GlobalNamespace::NoteLineLayer)>(&NoteData::SetNoteStartLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "SetNoteStartLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: NoteData::SetNoteFlipToNote
// Il2CppName: SetNoteFlipToNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(GlobalNamespace::NoteData*)>(&NoteData::SetNoteFlipToNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "SetNoteFlipToNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: NoteData::SwitchNoteColorType
// Il2CppName: SwitchNoteColorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)()>(&NoteData::SwitchNoteColorType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "SwitchNoteColorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::MirrorTransformCutDirection
// Il2CppName: MirrorTransformCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)()>(&NoteData::MirrorTransformCutDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "MirrorTransformCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::SetNoteToAnyCutDirection
// Il2CppName: SetNoteToAnyCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)()>(&NoteData::SetNoteToAnyCutDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "SetNoteToAnyCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::ChangeNoteCutDirection
// Il2CppName: ChangeNoteCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(GlobalNamespace::NoteCutDirection)>(&NoteData::ChangeNoteCutDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "ChangeNoteCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutDirection>()});
  }
};
// Writing MetadataGetter for method: NoteData::TransformNoteAOrBToRandomType
// Il2CppName: TransformNoteAOrBToRandomType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)()>(&NoteData::TransformNoteAOrBToRandomType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "TransformNoteAOrBToRandomType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::get_beatmapObjectType
// Il2CppName: get_beatmapObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectType (NoteData::*)()>(&NoteData::get_beatmapObjectType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "get_beatmapObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectData* (NoteData::*)()>(&NoteData::GetCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteData::MirrorLineIndex
// Il2CppName: MirrorLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteData::*)(int)>(&NoteData::MirrorLineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteData*), "MirrorLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteLineLayer Base
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteLineLayer::_get_Base() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_get_Base");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteLineLayer>("", "NoteLineLayer", "Base"));
}
// Autogenerated static field setter
// Set static field: static public NoteLineLayer Base
void GlobalNamespace::NoteLineLayer::_set_Base(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_set_Base");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteLineLayer", "Base", value));
}
// Autogenerated static field getter
// Get static field: static public NoteLineLayer Upper
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteLineLayer::_get_Upper() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_get_Upper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteLineLayer>("", "NoteLineLayer", "Upper"));
}
// Autogenerated static field setter
// Set static field: static public NoteLineLayer Upper
void GlobalNamespace::NoteLineLayer::_set_Upper(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_set_Upper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteLineLayer", "Upper", value));
}
// Autogenerated static field getter
// Get static field: static public NoteLineLayer Top
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteLineLayer::_get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_get_Top");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteLineLayer>("", "NoteLineLayer", "Top"));
}
// Autogenerated static field setter
// Set static field: static public NoteLineLayer Top
void GlobalNamespace::NoteLineLayer::_set_Top(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_set_Top");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteLineLayer", "Top", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NotesInTimeRowProcessor
#include "GlobalNamespace/NotesInTimeRowProcessor.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NotesInTimeRowProcessor.ProcessNote
void GlobalNamespace::NotesInTimeRowProcessor::ProcessNote(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: NotesInTimeRowProcessor.ProcessAllRemainingData
void GlobalNamespace::NotesInTimeRowProcessor::ProcessAllRemainingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessAllRemainingData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAllRemainingData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NotesInTimeRowProcessor.ProcessColorNotesInTimeRow
void GlobalNamespace::NotesInTimeRowProcessor::ProcessColorNotesInTimeRow(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* colorNotesData, float nextBasicNoteTimeRowTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessColorNotesInTimeRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessColorNotesInTimeRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorNotesData), ::il2cpp_utils::ExtractType(nextBasicNoteTimeRowTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorNotesData, nextBasicNoteTimeRowTime);
}
// Autogenerated method: NotesInTimeRowProcessor.ProcessAllNotesInTimeRow
void GlobalNamespace::NotesInTimeRowProcessor::ProcessAllNotesInTimeRow(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* notes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessAllNotesInTimeRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAllNotesInTimeRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, notes);
}
// Writing MetadataGetter for method: NotesInTimeRowProcessor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotesInTimeRowProcessor::*)(int)>(&NotesInTimeRowProcessor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotesInTimeRowProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotesInTimeRowProcessor::*)(int)>(&NotesInTimeRowProcessor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotesInTimeRowProcessor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NotesInTimeRowProcessor::ProcessNote
// Il2CppName: ProcessNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotesInTimeRowProcessor::*)(GlobalNamespace::NoteData*)>(&NotesInTimeRowProcessor::ProcessNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotesInTimeRowProcessor*), "ProcessNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: NotesInTimeRowProcessor::ProcessAllRemainingData
// Il2CppName: ProcessAllRemainingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotesInTimeRowProcessor::*)()>(&NotesInTimeRowProcessor::ProcessAllRemainingData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotesInTimeRowProcessor*), "ProcessAllRemainingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NotesInTimeRowProcessor::ProcessColorNotesInTimeRow
// Il2CppName: ProcessColorNotesInTimeRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotesInTimeRowProcessor::*)(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*, float)>(&NotesInTimeRowProcessor::ProcessColorNotesInTimeRow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotesInTimeRowProcessor*), "ProcessColorNotesInTimeRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NotesInTimeRowProcessor::ProcessAllNotesInTimeRow
// Il2CppName: ProcessAllNotesInTimeRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotesInTimeRowProcessor::*)(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*)>(&NotesInTimeRowProcessor::ProcessAllNotesInTimeRow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotesInTimeRowProcessor*), "ProcessAllNotesInTimeRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleData.get_obstacleType
GlobalNamespace::ObstacleType GlobalNamespace::ObstacleData::get_obstacleType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_obstacleType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_obstacleType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleType, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.set_obstacleType
void GlobalNamespace::ObstacleData::set_obstacleType(GlobalNamespace::ObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::set_obstacleType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_obstacleType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleData.get_duration
float GlobalNamespace::ObstacleData::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.set_duration
void GlobalNamespace::ObstacleData::set_duration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::set_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleData.get_width
int GlobalNamespace::ObstacleData::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.set_width
void GlobalNamespace::ObstacleData::set_width(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::set_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleData.UpdateDuration
void GlobalNamespace::ObstacleData::UpdateDuration(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::UpdateDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: ObstacleData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::ObstacleData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::ObstacleData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.MirrorLineIndex
void GlobalNamespace::ObstacleData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Writing MetadataGetter for method: ObstacleData::get_obstacleType
// Il2CppName: get_obstacleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleType (ObstacleData::*)()>(&ObstacleData::get_obstacleType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "get_obstacleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleData::set_obstacleType
// Il2CppName: set_obstacleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleData::*)(GlobalNamespace::ObstacleType)>(&ObstacleData::set_obstacleType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "set_obstacleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleType>()});
  }
};
// Writing MetadataGetter for method: ObstacleData::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ObstacleData::*)()>(&ObstacleData::get_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleData::set_duration
// Il2CppName: set_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleData::*)(float)>(&ObstacleData::set_duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "set_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ObstacleData::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ObstacleData::*)()>(&ObstacleData::get_width)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleData::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleData::*)(int)>(&ObstacleData::set_width)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ObstacleData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleData::*)(float, int, GlobalNamespace::ObstacleType, float, int)>(&ObstacleData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleType>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleData::*)(float, int, GlobalNamespace::ObstacleType, float, int)>(&ObstacleData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleType>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ObstacleData::UpdateDuration
// Il2CppName: UpdateDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleData::*)(float)>(&ObstacleData::UpdateDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "UpdateDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ObstacleData::get_beatmapObjectType
// Il2CppName: get_beatmapObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectType (ObstacleData::*)()>(&ObstacleData::get_beatmapObjectType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "get_beatmapObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectData* (ObstacleData::*)()>(&ObstacleData::GetCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleData::MirrorLineIndex
// Il2CppName: MirrorLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleData::*)(int)>(&ObstacleData::MirrorLineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleData*), "MirrorLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleType
#include "GlobalNamespace/ObstacleType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ObstacleType FullHeight
GlobalNamespace::ObstacleType GlobalNamespace::ObstacleType::_get_FullHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_get_FullHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ObstacleType>("", "ObstacleType", "FullHeight"));
}
// Autogenerated static field setter
// Set static field: static public ObstacleType FullHeight
void GlobalNamespace::ObstacleType::_set_FullHeight(GlobalNamespace::ObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_set_FullHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleType", "FullHeight", value));
}
// Autogenerated static field getter
// Get static field: static public ObstacleType Top
GlobalNamespace::ObstacleType GlobalNamespace::ObstacleType::_get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_get_Top");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ObstacleType>("", "ObstacleType", "Top"));
}
// Autogenerated static field setter
// Set static field: static public ObstacleType Top
void GlobalNamespace::ObstacleType::_set_Top(GlobalNamespace::ObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_set_Top");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleType", "Top", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OffsetDirection
#include "GlobalNamespace/OffsetDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OffsetDirection Up
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Up
void GlobalNamespace::OffsetDirection::_set_Up(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection Down
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Down
void GlobalNamespace::OffsetDirection::_set_Down(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection Left
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Left
void GlobalNamespace::OffsetDirection::_set_Left(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection Right
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Right
void GlobalNamespace::OffsetDirection::_set_Right(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection UpLeft
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_UpLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_UpLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "UpLeft"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection UpLeft
void GlobalNamespace::OffsetDirection::_set_UpLeft(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_UpLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "UpLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection UpRight
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_UpRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_UpRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "UpRight"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection UpRight
void GlobalNamespace::OffsetDirection::_set_UpRight(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_UpRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "UpRight", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection DownLeft
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_DownLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_DownLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "DownLeft"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection DownLeft
void GlobalNamespace::OffsetDirection::_set_DownLeft(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_DownLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "DownLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection DownRight
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_DownRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_DownRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "DownRight"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection DownRight
void GlobalNamespace::OffsetDirection::_set_DownRight(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_DownRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "DownRight", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection None
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection None
void GlobalNamespace::OffsetDirection::_set_None(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "None", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: WaypointData
#include "GlobalNamespace/WaypointData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: WaypointData.get_offsetDirection
GlobalNamespace::OffsetDirection GlobalNamespace::WaypointData::get_offsetDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::get_offsetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OffsetDirection, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.set_offsetDirection
void GlobalNamespace::WaypointData::set_offsetDirection(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::set_offsetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_offsetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WaypointData.get_noteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::WaypointData::get_noteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::get_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteLineLayer, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.set_noteLineLayer
void GlobalNamespace::WaypointData::set_noteLineLayer(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::set_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WaypointData.MirrorTransformOffsetDirection
void GlobalNamespace::WaypointData::MirrorTransformOffsetDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::MirrorTransformOffsetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorTransformOffsetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::WaypointData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::WaypointData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.MirrorLineIndex
void GlobalNamespace::WaypointData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Writing MetadataGetter for method: WaypointData::get_offsetDirection
// Il2CppName: get_offsetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OffsetDirection (WaypointData::*)()>(&WaypointData::get_offsetDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "get_offsetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointData::set_offsetDirection
// Il2CppName: set_offsetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointData::*)(GlobalNamespace::OffsetDirection)>(&WaypointData::set_offsetDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "set_offsetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OffsetDirection>()});
  }
};
// Writing MetadataGetter for method: WaypointData::get_noteLineLayer
// Il2CppName: get_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteLineLayer (WaypointData::*)()>(&WaypointData::get_noteLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "get_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointData::set_noteLineLayer
// Il2CppName: set_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointData::*)(GlobalNamespace::NoteLineLayer)>(&WaypointData::set_noteLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "set_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: WaypointData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointData::*)(float, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::OffsetDirection)>(&WaypointData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OffsetDirection>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointData::*)(float, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::OffsetDirection)>(&WaypointData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OffsetDirection>()});
  }
};
// Writing MetadataGetter for method: WaypointData::MirrorTransformOffsetDirection
// Il2CppName: MirrorTransformOffsetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointData::*)()>(&WaypointData::MirrorTransformOffsetDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "MirrorTransformOffsetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointData::get_beatmapObjectType
// Il2CppName: get_beatmapObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectType (WaypointData::*)()>(&WaypointData::get_beatmapObjectType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "get_beatmapObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectData* (WaypointData::*)()>(&WaypointData::GetCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointData::MirrorLineIndex
// Il2CppName: MirrorLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointData::*)(int)>(&WaypointData::MirrorLineIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointData*), "MirrorLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AuthenticationToken
#include "GlobalNamespace/AuthenticationToken.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AuthenticationToken.Serialize
void GlobalNamespace::AuthenticationToken::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: AuthenticationToken.CreateFromSerializedData
GlobalNamespace::AuthenticationToken GlobalNamespace::AuthenticationToken::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AuthenticationToken, false>(*this, ___internal__method, reader);
}
// Autogenerated method: AuthenticationToken.Deserialize
GlobalNamespace::AuthenticationToken GlobalNamespace::AuthenticationToken::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AuthenticationToken", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AuthenticationToken, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Writing MetadataGetter for method: AuthenticationToken::AuthenticationToken
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationToken::*)(GlobalNamespace::AuthenticationToken::Platform, ::Il2CppString*, ::Il2CppString*, ::Array<uint8_t>*)>(&AuthenticationToken::AuthenticationToken<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationToken), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AuthenticationToken::Platform>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationToken::*)(GlobalNamespace::AuthenticationToken::Platform, ::Il2CppString*, ::Il2CppString*, ::Array<uint8_t>*)>(&AuthenticationToken::AuthenticationToken<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationToken), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AuthenticationToken::Platform>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: AuthenticationToken::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AuthenticationToken::*)(LiteNetLib::Utils::NetDataWriter*)>(&AuthenticationToken::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationToken), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: AuthenticationToken::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AuthenticationToken (AuthenticationToken::*)(LiteNetLib::Utils::NetDataReader*)>(&AuthenticationToken::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationToken), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: AuthenticationToken::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AuthenticationToken (*)(LiteNetLib::Utils::NetDataReader*)>(&AuthenticationToken::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationToken), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AuthenticationToken/Platform
#include "GlobalNamespace/AuthenticationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform Test
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_Test() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_Test");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "Test"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform Test
void GlobalNamespace::AuthenticationToken::Platform::_set_Test(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_Test");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "Test", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform OculusRift
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_OculusRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_OculusRift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "OculusRift"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform OculusRift
void GlobalNamespace::AuthenticationToken::Platform::_set_OculusRift(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_OculusRift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "OculusRift", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform OculusQuest
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_OculusQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_OculusQuest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "OculusQuest"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform OculusQuest
void GlobalNamespace::AuthenticationToken::Platform::_set_OculusQuest(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_OculusQuest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "OculusQuest", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform Steam
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_Steam() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_Steam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "Steam"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform Steam
void GlobalNamespace::AuthenticationToken::Platform::_set_Steam(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_Steam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "Steam", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform PS4
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_PS4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_PS4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "PS4"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform PS4
void GlobalNamespace::AuthenticationToken::Platform::_set_PS4(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_PS4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "PS4", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform PS4Dev
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_PS4Dev() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_PS4Dev");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "PS4Dev"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform PS4Dev
void GlobalNamespace::AuthenticationToken::Platform::_set_PS4Dev(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_PS4Dev");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "PS4Dev", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform PS4Cert
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_PS4Cert() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_PS4Cert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "PS4Cert"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform PS4Cert
void GlobalNamespace::AuthenticationToken::Platform::_set_PS4Cert(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_PS4Cert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "PS4Cert", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform Oculus
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform Oculus
void GlobalNamespace::AuthenticationToken::Platform::_set_Oculus(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "Oculus", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetDebug
#include "GlobalNamespace/BGNetDebug.hpp"
// Including type: BGNetDebug/ILogger
#include "GlobalNamespace/BGNetDebug_ILogger.hpp"
// Including type: BGNetDebug/NetLogger
#include "GlobalNamespace/BGNetDebug_NetLogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF0900
// Autogenerated static field getter
// Get static field: static private BGNetDebug/ILogger _logger
GlobalNamespace::BGNetDebug::ILogger* GlobalNamespace::BGNetDebug::_get__logger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::_get__logger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BGNetDebug::ILogger*>("", "BGNetDebug", "_logger"));
}
// Autogenerated static field setter
// Set static field: static private BGNetDebug/ILogger _logger
void GlobalNamespace::BGNetDebug::_set__logger(GlobalNamespace::BGNetDebug::ILogger* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::_set__logger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BGNetDebug", "_logger", value));
}
// Autogenerated method: BGNetDebug..cctor
void GlobalNamespace::BGNetDebug::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BGNetDebug.SetLogger
void GlobalNamespace::BGNetDebug::SetLogger(GlobalNamespace::BGNetDebug::ILogger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::SetLogger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "SetLogger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logger)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, logger);
}
// Autogenerated method: BGNetDebug.Log
void GlobalNamespace::BGNetDebug::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: BGNetDebug.LogError
void GlobalNamespace::BGNetDebug::LogError(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::LogError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: BGNetDebug.LogWarning
void GlobalNamespace::BGNetDebug::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Writing MetadataGetter for method: BGNetDebug::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BGNetDebug::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNetDebug::SetLogger
// Il2CppName: SetLogger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::BGNetDebug::ILogger*)>(&BGNetDebug::SetLogger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "SetLogger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BGNetDebug::ILogger*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&BGNetDebug::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&BGNetDebug::LogError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&BGNetDebug::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetDebug/ILogger
#include "GlobalNamespace/BGNetDebug_ILogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BGNetDebug/ILogger.LogInfo
void GlobalNamespace::BGNetDebug::ILogger::LogInfo(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::ILogger::LogInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetDebug/ILogger.LogError
void GlobalNamespace::BGNetDebug::ILogger::LogError(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::ILogger::LogError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetDebug/ILogger.LogWarning
void GlobalNamespace::BGNetDebug::ILogger::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::ILogger::LogWarning");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Writing MetadataGetter for method: BGNetDebug::ILogger::LogInfo
// Il2CppName: LogInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetDebug::ILogger::*)(::Il2CppString*)>(&BGNetDebug::ILogger::LogInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug::ILogger*), "LogInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::ILogger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetDebug::ILogger::*)(::Il2CppString*)>(&BGNetDebug::ILogger::LogError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug::ILogger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::ILogger::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetDebug::ILogger::*)(::Il2CppString*)>(&BGNetDebug::ILogger::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug::ILogger*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetDebug/NetLogger
#include "GlobalNamespace/BGNetDebug_NetLogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BGNetDebug/NetLogger.WriteNet
void GlobalNamespace::BGNetDebug::NetLogger::WriteNet(LiteNetLib::NetLogLevel level, ::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::NetLogger::WriteNet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level, str, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteNet(LiteNetLib.NetLogLevel level, System.String str, params System.Object[] args)
void GlobalNamespace::BGNetDebug::NetLogger::WriteNet(LiteNetLib::NetLogLevel level, ::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  GlobalNamespace::BGNetDebug::NetLogger::WriteNet(level, str, ::Array<::Il2CppObject*>::New(args));
}
// Writing MetadataGetter for method: BGNetDebug::NetLogger::WriteNet
// Il2CppName: WriteNet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetDebug::NetLogger::*)(LiteNetLib::NetLogLevel, ::Il2CppString*, ::Array<::Il2CppObject*>*)>(&BGNetDebug::NetLogger::WriteNet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug::NetLogger*), "WriteNet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetLogLevel>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::NetLogger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetDebug::NetLogger::*)()>(&BGNetDebug::NetLogger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug::NetLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetDebug::NetLogger::*)()>(&BGNetDebug::NetLogger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug::NetLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetLogger
#include "GlobalNamespace/BGNetLogger.hpp"
// Including type: Microsoft.Extensions.Logging.ILogger
#include "Microsoft/Extensions/Logging/ILogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BGNetLogger.LogError
void GlobalNamespace::BGNetLogger::LogError(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::LogError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetLogger.LogInfo
void GlobalNamespace::BGNetLogger::LogInfo(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::LogInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetLogger.LogWarning
void GlobalNamespace::BGNetLogger::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::LogWarning");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Writing MetadataGetter for method: BGNetLogger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetLogger::*)(::Array<Microsoft::Extensions::Logging::ILogger*>*)>(&BGNetLogger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Microsoft::Extensions::Logging::ILogger*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetLogger::*)(::Array<Microsoft::Extensions::Logging::ILogger*>*)>(&BGNetLogger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Microsoft::Extensions::Logging::ILogger*>*>()});
  }
};
// Writing MetadataGetter for method: BGNetLogger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetLogger::*)(::Il2CppString*)>(&BGNetLogger::LogError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetLogger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetLogger::LogInfo
// Il2CppName: LogInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetLogger::*)(::Il2CppString*)>(&BGNetLogger::LogInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetLogger*), "LogInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetLogger::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNetLogger::*)(::Il2CppString*)>(&BGNetLogger::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetLogger*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BatchExtensions
#include "GlobalNamespace/BatchExtensions.hpp"
// Including type: BatchExtensions/<Batch>d__0`1
#include "GlobalNamespace/BatchExtensions_-Batch-d__0_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BatchExtensions::Batch
// Il2CppName: Batch
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ByteArrayNetSerializable.get_data
::Array<uint8_t>* GlobalNamespace::ByteArrayNetSerializable::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::get_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: ByteArrayNetSerializable.set_data
void GlobalNamespace::ByteArrayNetSerializable::set_data(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::set_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ByteArrayNetSerializable.Serialize
void GlobalNamespace::ByteArrayNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ByteArrayNetSerializable.Deserialize
void GlobalNamespace::ByteArrayNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ByteArrayNetSerializable.Clear
void GlobalNamespace::ByteArrayNetSerializable::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ByteArrayNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)(::Il2CppString*, int, int, bool)>(&ByteArrayNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)(::Il2CppString*, int, int, bool)>(&ByteArrayNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ByteArrayNetSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)(::Il2CppString*, int, bool)>(&ByteArrayNetSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)(::Il2CppString*, int, bool)>(&ByteArrayNetSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ByteArrayNetSerializable::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ByteArrayNetSerializable::*)()>(&ByteArrayNetSerializable::get_data)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ByteArrayNetSerializable::set_data
// Il2CppName: set_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)(::Array<uint8_t>*)>(&ByteArrayNetSerializable::set_data)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), "set_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: ByteArrayNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&ByteArrayNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ByteArrayNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&ByteArrayNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ByteArrayNetSerializable::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteArrayNetSerializable::*)()>(&ByteArrayNetSerializable::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteArrayNetSerializable*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CPUMonitor
#include "GlobalNamespace/CPUMonitor.hpp"
// Including type: RollingAverage
#include "GlobalNamespace/RollingAverage.hpp"
// Including type: System.Diagnostics.Process
#include "System/Diagnostics/Process.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CPUMonitor.PollUpdate
void GlobalNamespace::CPUMonitor::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CPUMonitor.get_utilization
float GlobalNamespace::CPUMonitor::get_utilization() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::get_utilization");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_utilization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CPUMonitor::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CPUMonitor::*)()>(&CPUMonitor::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CPUMonitor*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CPUMonitor::get_utilization
// Il2CppName: get_utilization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CPUMonitor::*)()>(&CPUMonitor::get_utilization)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CPUMonitor*), "get_utilization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CPUMonitor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CPUMonitor::*)()>(&CPUMonitor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CPUMonitor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CPUMonitor::*)()>(&CPUMonitor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CPUMonitor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSchemeNetSerializable
#include "GlobalNamespace/ColorSchemeNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeNetSerializable.Serialize
void GlobalNamespace::ColorSchemeNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: ColorSchemeNetSerializable.Deserialize
void GlobalNamespace::ColorSchemeNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Writing MetadataGetter for method: ColorSchemeNetSerializable::ColorSchemeNetSerializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeNetSerializable::*)(UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&ColorSchemeNetSerializable::ColorSchemeNetSerializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeNetSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeNetSerializable::*)(UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&ColorSchemeNetSerializable::ColorSchemeNetSerializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeNetSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeNetSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeNetSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&ColorSchemeNetSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeNetSerializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeNetSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeNetSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&ColorSchemeNetSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeNetSerializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: ConnectedPlayerManager/ConnectedPlayer
#include "GlobalNamespace/ConnectedPlayerManager_ConnectedPlayer.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: ConnectedPlayerManager/MessageType
#include "GlobalNamespace/ConnectedPlayerManager_MessageType.hpp"
// Including type: ConnectedPlayerManager/PlayerConnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerConnectedPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerIdentityPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerIdentityPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerAvatarPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerAvatarPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerStatePacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerStatePacket.hpp"
// Including type: ConnectedPlayerManager/PlayerSortOrderPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerSortOrderPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerDisconnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerDisconnectedPacket.hpp"
// Including type: ConnectedPlayerManager/KickPlayerPacket
#include "GlobalNamespace/ConnectedPlayerManager_KickPlayerPacket.hpp"
// Including type: ConnectedPlayerManager/SyncTimePacket
#include "GlobalNamespace/ConnectedPlayerManager_SyncTimePacket.hpp"
// Including type: ConnectedPlayerManager/PlayerLatencyPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerLatencyPacket.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: RollingAverage
#include "GlobalNamespace/RollingAverage.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: NetworkPacketSerializer`2
#include "GlobalNamespace/NetworkPacketSerializer_2.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
// Including type: INetworkPacketSubSerializer`1
#include "GlobalNamespace/INetworkPacketSubSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 invalidSortIndex
int GlobalNamespace::ConnectedPlayerManager::_get_invalidSortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_invalidSortIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ConnectedPlayerManager", "invalidSortIndex"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 invalidSortIndex
void GlobalNamespace::ConnectedPlayerManager::_set_invalidSortIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_invalidSortIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "invalidSortIndex", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte kAllConnectionsId
uint8_t GlobalNamespace::ConnectedPlayerManager::_get_kAllConnectionsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kAllConnectionsId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "ConnectedPlayerManager", "kAllConnectionsId"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kAllConnectionsId
void GlobalNamespace::ConnectedPlayerManager::_set_kAllConnectionsId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kAllConnectionsId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kAllConnectionsId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte kLocalConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::_get_kLocalConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kLocalConnectionId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "ConnectedPlayerManager", "kLocalConnectionId"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kLocalConnectionId
void GlobalNamespace::ConnectedPlayerManager::_set_kLocalConnectionId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kLocalConnectionId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kLocalConnectionId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSyncTimeUpdateFrequency
float GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeUpdateFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeUpdateFrequency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ConnectedPlayerManager", "kSyncTimeUpdateFrequency"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSyncTimeUpdateFrequency
void GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeUpdateFrequency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeUpdateFrequency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kSyncTimeUpdateFrequency", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSyncTimeAllowedReceiveWindow
float GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeAllowedReceiveWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeAllowedReceiveWindow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ConnectedPlayerManager", "kSyncTimeAllowedReceiveWindow"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSyncTimeAllowedReceiveWindow
void GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeAllowedReceiveWindow(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeAllowedReceiveWindow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kSyncTimeAllowedReceiveWindow", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxUnreliableMessageLength
int GlobalNamespace::ConnectedPlayerManager::_get_kMaxUnreliableMessageLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kMaxUnreliableMessageLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ConnectedPlayerManager", "kMaxUnreliableMessageLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxUnreliableMessageLength
void GlobalNamespace::ConnectedPlayerManager::_set_kMaxUnreliableMessageLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kMaxUnreliableMessageLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kMaxUnreliableMessageLength", value));
}
// Autogenerated method: ConnectedPlayerManager.GetNextConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::GetNextConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetNextConnectionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextConnectionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.RemoveAllPlayers
void GlobalNamespace::ConnectedPlayerManager::RemoveAllPlayers(GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::RemoveAllPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAllPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: ConnectedPlayerManager.RemovePlayer
void GlobalNamespace::ConnectedPlayerManager::RemovePlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player, GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::RemovePlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, reason);
}
// Autogenerated method: ConnectedPlayerManager.AddPlayer
void GlobalNamespace::ConnectedPlayerManager::AddPlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::AddPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: ConnectedPlayerManager.GetPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetPlayer(uint8_t connectionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(this, ___internal__method, connectionId);
}
// Autogenerated method: ConnectedPlayerManager.GetPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetPlayer(GlobalNamespace::IConnection* connection, uint8_t remoteConnectionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(remoteConnectionId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(this, ___internal__method, connection, remoteConnectionId);
}
// Autogenerated method: ConnectedPlayerManager.GetPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: ConnectedPlayerManager.GetConnectedPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetConnectedPlayer(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetConnectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, index);
}
// Autogenerated method: ConnectedPlayerManager.add_connectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_connectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_connectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_connectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_reinitializedEvent
void GlobalNamespace::ConnectedPlayerManager::add_reinitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_reinitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_reinitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_reinitializedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_reinitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_reinitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_reinitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_disconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_disconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_disconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_disconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_connectionFailedEvent
void GlobalNamespace::ConnectedPlayerManager::add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_connectionFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_connectionFailedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_connectionFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerConnectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerConnectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerDisconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerDisconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerStateChangedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerStateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerStateChangedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerStateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerAvatarChangedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerAvatarChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerAvatarChangedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerAvatarChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerOrderChangedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerOrderChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerOrderChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerOrderChangedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerOrderChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerOrderChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_syncTimeInitializedEvent
void GlobalNamespace::ConnectedPlayerManager::add_syncTimeInitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_syncTimeInitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncTimeInitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_syncTimeInitializedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_syncTimeInitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_syncTimeInitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncTimeInitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.get_isConnectionOwner
bool GlobalNamespace::ConnectedPlayerManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isConnectedOrConnecting
bool GlobalNamespace::ConnectedPlayerManager::get_isConnectedOrConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnectedOrConnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectedOrConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isConnected
bool GlobalNamespace::ConnectedPlayerManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isConnecting
bool GlobalNamespace::ConnectedPlayerManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isDisconnecting
bool GlobalNamespace::ConnectedPlayerManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isDisconnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_localPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_connectedPlayerCount
int GlobalNamespace::ConnectedPlayerManager::get_connectedPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_connectedPlayerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_syncTime
float GlobalNamespace::ConnectedPlayerManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_syncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_syncTimeDelay
float GlobalNamespace::ConnectedPlayerManager::get_syncTimeDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_syncTimeDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.set_syncTimeDelay
void GlobalNamespace::ConnectedPlayerManager::set_syncTimeDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::set_syncTimeDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.get_syncTimeInitialized
bool GlobalNamespace::ConnectedPlayerManager::get_syncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_syncTimeInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_runTime
float GlobalNamespace::ConnectedPlayerManager::get_runTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_runTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_runTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.ResetLocalState
void GlobalNamespace::ConnectedPlayerManager::ResetLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ResetLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.PollUpdate
void GlobalNamespace::ConnectedPlayerManager::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PollUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.RegisterSerializer
void GlobalNamespace::ConnectedPlayerManager::RegisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::RegisterSerializer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: ConnectedPlayerManager.UnregisterSerializer
void GlobalNamespace::ConnectedPlayerManager::UnregisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::UnregisterSerializer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: ConnectedPlayerManager.Dispose
void GlobalNamespace::ConnectedPlayerManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.Disconnect
void GlobalNamespace::ConnectedPlayerManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.KickPlayer
void GlobalNamespace::ConnectedPlayerManager::KickPlayer(::Il2CppString* userId, GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KickPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.SetLocalPlayerState
void GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerState(::Il2CppString* state, bool setState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(setState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, setState);
}
// Autogenerated method: ConnectedPlayerManager.SetLocalPlayerAvatar
void GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerAvatar(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerAvatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerAvatarData);
}
// Autogenerated method: ConnectedPlayerManager.SetLocalPlayerSortIndex
void GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerSortIndex(int sortIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerSortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerSortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sortIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sortIndex);
}
// Autogenerated method: ConnectedPlayerManager.SetPlayerSortIndex
void GlobalNamespace::ConnectedPlayerManager::SetPlayerSortIndex(GlobalNamespace::IConnectedPlayer* player, int sortIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetPlayerSortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerSortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(sortIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, sortIndex);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnected
void GlobalNamespace::ConnectedPlayerManager::HandleConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.HandleDisconnected
void GlobalNamespace::ConnectedPlayerManager::HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnectionFailed
void GlobalNamespace::ConnectedPlayerManager::HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnectionFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnectionConnected
void GlobalNamespace::ConnectedPlayerManager::HandleConnectionConnected(GlobalNamespace::IConnection* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnectionConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection);
}
// Autogenerated method: ConnectedPlayerManager.OnNetworkLatencyUpdate
void GlobalNamespace::ConnectedPlayerManager::OnNetworkLatencyUpdate(GlobalNamespace::IConnection* connection, float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::OnNetworkLatencyUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, latency);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnectionDisconnected
void GlobalNamespace::ConnectedPlayerManager::HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnectionDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.OnNetworkReceive
void GlobalNamespace::ConnectedPlayerManager::OnNetworkReceive(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::OnNetworkReceive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, reader, deliveryMethod);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediately
void GlobalNamespace::ConnectedPlayerManager::SendImmediately(LiteNetLib::Utils::INetSerializable* message, bool onlyFirstDegree) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(onlyFirstDegree)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, onlyFirstDegree);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyExcludingPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyExcludingPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* excludingPlayer, bool onlyFirstDegree) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyExcludingPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyExcludingPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(excludingPlayer), ::il2cpp_utils::ExtractType(onlyFirstDegree)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, excludingPlayer, onlyFirstDegree);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyToPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(toPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, toPlayer);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyFromPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, bool onlyFirstDegree) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyFromPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(fromPlayer), ::il2cpp_utils::ExtractType(onlyFirstDegree)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, fromPlayer, onlyFirstDegree);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyFromPlayerToPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyFromPlayerToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(fromPlayer), ::il2cpp_utils::ExtractType(toPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, fromPlayer, toPlayer);
}
// Autogenerated method: ConnectedPlayerManager.FlushReliableQueue
void GlobalNamespace::ConnectedPlayerManager::FlushReliableQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::FlushReliableQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushReliableQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.FlushUnreliableQueue
void GlobalNamespace::ConnectedPlayerManager::FlushUnreliableQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::FlushUnreliableQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushUnreliableQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.WriteOne
LiteNetLib::Utils::NetDataWriter* GlobalNamespace::ConnectedPlayerManager::WriteOne(uint8_t senderId, uint8_t receiverId, LiteNetLib::Utils::INetSerializable* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::WriteOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(senderId), ::il2cpp_utils::ExtractType(receiverId), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(this, ___internal__method, senderId, receiverId, message);
}
// Autogenerated method: ConnectedPlayerManager.Write
void GlobalNamespace::ConnectedPlayerManager::Write(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::Utils::INetSerializable* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, packet);
}
// Autogenerated method: ConnectedPlayerManager.HandleServerPlayerConnected
void GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerConnected(GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerIdentityUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerIdentityUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerIdentityUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerIdentityUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerStateUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerAvatarUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerAvatarUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerAvatarUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerAvatarUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerLatencyUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerLatencyUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandleServerPlayerDisconnected
void GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandleKickPlayerPacket
void GlobalNamespace::ConnectedPlayerManager::HandleKickPlayerPacket(GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleKickPlayerPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleKickPlayerPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerSortOrderUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerSortOrderUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerSortOrderUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandleSyncTimePacket
void GlobalNamespace::ConnectedPlayerManager::HandleSyncTimePacket(GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* packet, GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleSyncTimePacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSyncTimePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, player);
}
// Autogenerated method: ConnectedPlayerManager.Log
void GlobalNamespace::ConnectedPlayerManager::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::GetNextConnectionId
// Il2CppName: GetNextConnectionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::GetNextConnectionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "GetNextConnectionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::RemoveAllPlayers
// Il2CppName: RemoveAllPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::RemoveAllPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "RemoveAllPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::RemovePlayer
// Il2CppName: RemovePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::RemovePlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "RemovePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::AddPlayer
// Il2CppName: AddPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*)>(&ConnectedPlayerManager::AddPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "AddPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (ConnectedPlayerManager::*)(uint8_t)>(&ConnectedPlayerManager::GetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, uint8_t)>(&ConnectedPlayerManager::GetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (ConnectedPlayerManager::*)(::Il2CppString*)>(&ConnectedPlayerManager::GetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::GetConnectedPlayer
// Il2CppName: GetConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (ConnectedPlayerManager::*)(int)>(&ConnectedPlayerManager::GetConnectedPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "GetConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_connectedEvent
// Il2CppName: add_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action*)>(&ConnectedPlayerManager::add_connectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_connectedEvent
// Il2CppName: remove_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action*)>(&ConnectedPlayerManager::remove_connectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_reinitializedEvent
// Il2CppName: add_reinitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action*)>(&ConnectedPlayerManager::add_reinitializedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_reinitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_reinitializedEvent
// Il2CppName: remove_reinitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action*)>(&ConnectedPlayerManager::remove_reinitializedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_reinitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_disconnectedEvent
// Il2CppName: add_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&ConnectedPlayerManager::add_disconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_disconnectedEvent
// Il2CppName: remove_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&ConnectedPlayerManager::remove_disconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_connectionFailedEvent
// Il2CppName: add_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&ConnectedPlayerManager::add_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_connectionFailedEvent
// Il2CppName: remove_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&ConnectedPlayerManager::remove_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_playerConnectedEvent
// Il2CppName: add_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::add_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_playerConnectedEvent
// Il2CppName: remove_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::remove_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_playerDisconnectedEvent
// Il2CppName: add_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::add_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_playerDisconnectedEvent
// Il2CppName: remove_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::remove_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_playerStateChangedEvent
// Il2CppName: add_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::add_playerStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_playerStateChangedEvent
// Il2CppName: remove_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::remove_playerStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_playerAvatarChangedEvent
// Il2CppName: add_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::add_playerAvatarChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_playerAvatarChangedEvent
// Il2CppName: remove_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::remove_playerAvatarChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_playerOrderChangedEvent
// Il2CppName: add_playerOrderChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::add_playerOrderChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_playerOrderChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_playerOrderChangedEvent
// Il2CppName: remove_playerOrderChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::remove_playerOrderChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_playerOrderChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::add_syncTimeInitializedEvent
// Il2CppName: add_syncTimeInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action*)>(&ConnectedPlayerManager::add_syncTimeInitializedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "add_syncTimeInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::remove_syncTimeInitializedEvent
// Il2CppName: remove_syncTimeInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(System::Action*)>(&ConnectedPlayerManager::remove_syncTimeInitializedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "remove_syncTimeInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_isConnectedOrConnecting
// Il2CppName: get_isConnectedOrConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_isConnectedOrConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_isConnectedOrConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_connectedPlayerCount
// Il2CppName: get_connectedPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_connectedPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_connectedPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_syncTimeDelay
// Il2CppName: get_syncTimeDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_syncTimeDelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_syncTimeDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::set_syncTimeDelay
// Il2CppName: set_syncTimeDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(float)>(&ConnectedPlayerManager::set_syncTimeDelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "set_syncTimeDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_syncTimeInitialized
// Il2CppName: get_syncTimeInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_syncTimeInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_syncTimeInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::get_runTime
// Il2CppName: get_runTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::get_runTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "get_runTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::TryCreate
// Il2CppName: TryCreate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConnectedPlayerManager::TryCreate
// Il2CppName: TryCreate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConnectedPlayerManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::IConnectionManager*)>(&ConnectedPlayerManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectionManager*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::IConnectionManager*)>(&ConnectedPlayerManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectionManager*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ResetLocalState
// Il2CppName: ResetLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::ResetLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "ResetLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::TryReinitialize
// Il2CppName: TryReinitialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConnectedPlayerManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::RegisterSerializer
// Il2CppName: RegisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::RegisterSerializer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "RegisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::MessageType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::UnregisterSerializer
// Il2CppName: UnregisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&ConnectedPlayerManager::UnregisterSerializer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "UnregisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::MessageType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::GetConnectionManager
// Il2CppName: GetConnectionManager
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConnectedPlayerManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::KickPlayer
// Il2CppName: KickPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(::Il2CppString*, GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::KickPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "KickPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SetLocalPlayerState
// Il2CppName: SetLocalPlayerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(::Il2CppString*, bool)>(&ConnectedPlayerManager::SetLocalPlayerState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SetLocalPlayerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SetLocalPlayerAvatar
// Il2CppName: SetLocalPlayerAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::MultiplayerAvatarData)>(&ConnectedPlayerManager::SetLocalPlayerAvatar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SetLocalPlayerAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerAvatarData>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SetLocalPlayerSortIndex
// Il2CppName: SetLocalPlayerSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(int)>(&ConnectedPlayerManager::SetLocalPlayerSortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SetLocalPlayerSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SetPlayerSortIndex
// Il2CppName: SetPlayerSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::IConnectedPlayer*, int)>(&ConnectedPlayerManager::SetPlayerSortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SetPlayerSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleConnected
// Il2CppName: HandleConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::HandleConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleDisconnected
// Il2CppName: HandleDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::HandleDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleConnectionFailed
// Il2CppName: HandleConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectionFailedReason)>(&ConnectedPlayerManager::HandleConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleConnectionConnected
// Il2CppName: HandleConnectionConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::IConnection*)>(&ConnectedPlayerManager::HandleConnectionConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleConnectionConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::OnNetworkLatencyUpdate
// Il2CppName: OnNetworkLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, float)>(&ConnectedPlayerManager::OnNetworkLatencyUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "OnNetworkLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleConnectionDisconnected
// Il2CppName: HandleConnectionDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::HandleConnectionDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleConnectionDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::OnNetworkReceive
// Il2CppName: OnNetworkReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod)>(&ConnectedPlayerManager::OnNetworkReceive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "OnNetworkReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::Send
// Il2CppName: Send
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConnectedPlayerManager::SendUnreliable
// Il2CppName: SendUnreliable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConnectedPlayerManager::SendImmediately
// Il2CppName: SendImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, bool)>(&ConnectedPlayerManager::SendImmediately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SendImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SendImmediatelyExcludingPlayer
// Il2CppName: SendImmediatelyExcludingPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, bool)>(&ConnectedPlayerManager::SendImmediatelyExcludingPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SendImmediatelyExcludingPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SendImmediatelyToPlayer
// Il2CppName: SendImmediatelyToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*)>(&ConnectedPlayerManager::SendImmediatelyToPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SendImmediatelyToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SendImmediatelyFromPlayer
// Il2CppName: SendImmediatelyFromPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, bool)>(&ConnectedPlayerManager::SendImmediatelyFromPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SendImmediatelyFromPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer
// Il2CppName: SendImmediatelyFromPlayerToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*)>(&ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "SendImmediatelyFromPlayerToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::FlushReliableQueue
// Il2CppName: FlushReliableQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::FlushReliableQueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "FlushReliableQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::FlushUnreliableQueue
// Il2CppName: FlushUnreliableQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)()>(&ConnectedPlayerManager::FlushUnreliableQueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "FlushUnreliableQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::WriteOne
// Il2CppName: WriteOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::Utils::NetDataWriter* (ConnectedPlayerManager::*)(uint8_t, uint8_t, LiteNetLib::Utils::INetSerializable*)>(&ConnectedPlayerManager::WriteOne)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "WriteOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::Utils::INetSerializable*)>(&ConnectedPlayerManager::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::INetSerializable*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleServerPlayerConnected
// Il2CppName: HandleServerPlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandleServerPlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleServerPlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandlePlayerIdentityUpdate
// Il2CppName: HandlePlayerIdentityUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandlePlayerIdentityUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandlePlayerIdentityUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandlePlayerStateUpdate
// Il2CppName: HandlePlayerStateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandlePlayerStateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandlePlayerStateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandlePlayerAvatarUpdate
// Il2CppName: HandlePlayerAvatarUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandlePlayerAvatarUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandlePlayerAvatarUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandlePlayerLatencyUpdate
// Il2CppName: HandlePlayerLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandlePlayerLatencyUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandlePlayerLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleServerPlayerDisconnected
// Il2CppName: HandleServerPlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandleServerPlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleServerPlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleKickPlayerPacket
// Il2CppName: HandleKickPlayerPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandleKickPlayerPacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleKickPlayerPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandlePlayerSortOrderUpdate
// Il2CppName: HandlePlayerSortOrderUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandlePlayerSortOrderUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandlePlayerSortOrderUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::HandleSyncTimePacket
// Il2CppName: HandleSyncTimePacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*, GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerManager::HandleSyncTimePacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "HandleSyncTimePacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::*)(::Il2CppString*)>(&ConnectedPlayerManager::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager/ConnectedPlayer
#include "GlobalNamespace/ConnectedPlayerManager_ConnectedPlayer.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: RollingAverage
#include "GlobalNamespace/RollingAverage.hpp"
// Including type: ConnectedPlayerManager/PlayerConnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerConnectedPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerIdentityPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerIdentityPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerStatePacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerStatePacket.hpp"
// Including type: ConnectedPlayerManager/PlayerAvatarPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerAvatarPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerSortOrderPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerSortOrderPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kFixedOffset
float GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get_kFixedOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get_kFixedOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ConnectedPlayerManager/ConnectedPlayer", "kFixedOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kFixedOffset
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set_kFixedOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set_kFixedOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/ConnectedPlayer", "kFixedOffset", value));
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_connection
GlobalNamespace::IConnection* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnection*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_connectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connectionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_remoteConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_remoteConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_remoteConnectionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_remoteConnectionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isConnected
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isConnectionOwner
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isKicked
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isKicked");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_sortIndex
int GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_sortIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_userId
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_userName
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isMe
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_currentLatency
float GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_currentLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_currentLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_offsetSyncTime
float GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_multiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_multiplayerAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_multiplayerAvatarData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isDirectConnection
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isDirectConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isDirectConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDirectConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.CreateLocalPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateLocalPlayer(GlobalNamespace::ConnectedPlayerManager* manager, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateLocalPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/ConnectedPlayer", "CreateLocalPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(isConnectionOwner)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, manager, userId, userName, isConnectionOwner);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.CreateDirectlyConnectedPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateDirectlyConnectedPlayer(GlobalNamespace::ConnectedPlayerManager* manager, uint8_t connectionId, GlobalNamespace::IConnection* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateDirectlyConnectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/ConnectedPlayer", "CreateDirectlyConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager), ::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(connection)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, manager, connectionId, connection);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.CreateRemoteConnectedPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateRemoteConnectedPlayer(GlobalNamespace::ConnectedPlayerManager* manager, uint8_t connectionId, GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateRemoteConnectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/ConnectedPlayer", "CreateRemoteConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager), ::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(parent)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, manager, connectionId, packet, parent);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerConnectedPacket
GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerConnectedPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerConnectedPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerConnectedPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerIdentityPacket
GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerIdentityPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerIdentityPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIdentityPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerStatePacket
GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerStatePacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerStatePacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerStatePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerAvatarPacket
GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerAvatarPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerAvatarPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerAvatarPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerSortOrderPacket
GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerSortOrderPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerSortOrderPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerSortOrderPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.Disconnect
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateLatency
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateLatency(float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateLatency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, latency);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateSortIndex
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateSortIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateSortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.SetKicked
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetKicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateIdentity
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateIdentity(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateIdentity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIdentity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateState
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateState(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateAvatar
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateAvatar(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.HasState
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::HasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::HasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.SetPlayerState
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerState(GlobalNamespace::PlayerStateHash playerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerState);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.SetPlayerAvatar
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerAvatar(GlobalNamespace::MultiplayerAvatarData avatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, avatarData);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.ToString
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_connection
// Il2CppName: get_connection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnection* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_connection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_connection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_connectionId
// Il2CppName: get_connectionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_connectionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_connectionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_remoteConnectionId
// Il2CppName: get_remoteConnectionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_remoteConnectionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_remoteConnectionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_isKicked
// Il2CppName: get_isKicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_isKicked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_isKicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_disconnectedReason
// Il2CppName: get_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DisconnectedReason (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_disconnectedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_sortIndex
// Il2CppName: get_sortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_sortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_sortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_currentLatency
// Il2CppName: get_currentLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_currentLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_currentLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_offsetSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_offsetSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_multiplayerAvatarData
// Il2CppName: get_multiplayerAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerAvatarData (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_multiplayerAvatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_multiplayerAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::get_isDirectConnection
// Il2CppName: get_isDirectConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::get_isDirectConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "get_isDirectConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::ConnectedPlayerManager*, uint8_t, uint8_t, GlobalNamespace::IConnection*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, ::Il2CppString*, ::Il2CppString*, bool, bool)>(&ConnectedPlayerManager::ConnectedPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::ConnectedPlayerManager*, uint8_t, uint8_t, GlobalNamespace::IConnection*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, ::Il2CppString*, ::Il2CppString*, bool, bool)>(&ConnectedPlayerManager::ConnectedPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::CreateLocalPlayer
// Il2CppName: CreateLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (*)(GlobalNamespace::ConnectedPlayerManager*, ::Il2CppString*, ::Il2CppString*, bool)>(&ConnectedPlayerManager::ConnectedPlayer::CreateLocalPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "CreateLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::CreateDirectlyConnectedPlayer
// Il2CppName: CreateDirectlyConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (*)(GlobalNamespace::ConnectedPlayerManager*, uint8_t, GlobalNamespace::IConnection*)>(&ConnectedPlayerManager::ConnectedPlayer::CreateDirectlyConnectedPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "CreateDirectlyConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::CreateRemoteConnectedPlayer
// Il2CppName: CreateRemoteConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (*)(GlobalNamespace::ConnectedPlayerManager*, uint8_t, GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*)>(&ConnectedPlayerManager::ConnectedPlayer::CreateRemoteConnectedPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "CreateRemoteConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::GetPlayerConnectedPacket
// Il2CppName: GetPlayerConnectedPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::GetPlayerConnectedPacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "GetPlayerConnectedPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::GetPlayerIdentityPacket
// Il2CppName: GetPlayerIdentityPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::GetPlayerIdentityPacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "GetPlayerIdentityPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::GetPlayerStatePacket
// Il2CppName: GetPlayerStatePacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::GetPlayerStatePacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "GetPlayerStatePacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::GetPlayerAvatarPacket
// Il2CppName: GetPlayerAvatarPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::GetPlayerAvatarPacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "GetPlayerAvatarPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::GetPlayerSortOrderPacket
// Il2CppName: GetPlayerSortOrderPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::GetPlayerSortOrderPacket)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "GetPlayerSortOrderPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::ConnectedPlayer::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::UpdateLatency
// Il2CppName: UpdateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(float)>(&ConnectedPlayerManager::ConnectedPlayer::UpdateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "UpdateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::UpdateSortIndex
// Il2CppName: UpdateSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::ConnectedPlayer::*)(int)>(&ConnectedPlayerManager::ConnectedPlayer::UpdateSortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "UpdateSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::SetKicked
// Il2CppName: SetKicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::SetKicked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "SetKicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::UpdateIdentity
// Il2CppName: UpdateIdentity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*)>(&ConnectedPlayerManager::ConnectedPlayer::UpdateIdentity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "UpdateIdentity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*)>(&ConnectedPlayerManager::ConnectedPlayer::UpdateState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::UpdateAvatar
// Il2CppName: UpdateAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*)>(&ConnectedPlayerManager::ConnectedPlayer::UpdateAvatar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "UpdateAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::HasState
// Il2CppName: HasState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConnectedPlayerManager::ConnectedPlayer::*)(::Il2CppString*)>(&ConnectedPlayerManager::ConnectedPlayer::HasState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "HasState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::SetPlayerState
// Il2CppName: SetPlayerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::PlayerStateHash)>(&ConnectedPlayerManager::ConnectedPlayer::SetPlayerState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "SetPlayerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerStateHash>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::SetPlayerAvatar
// Il2CppName: SetPlayerAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::ConnectedPlayer::*)(GlobalNamespace::MultiplayerAvatarData)>(&ConnectedPlayerManager::ConnectedPlayer::SetPlayerAvatar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "SetPlayerAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerAvatarData>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::ConnectedPlayer::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ConnectedPlayerManager::ConnectedPlayer::*)()>(&ConnectedPlayerManager::ConnectedPlayer::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::ConnectedPlayer*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/InternalMessageType
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_SyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_SyncTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "SyncTime"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_SyncTime(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_SyncTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "SyncTime", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerConnected"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerConnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerConnected", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerIdentity
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerIdentity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerIdentity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerIdentity"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerIdentity
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerIdentity(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerIdentity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerIdentity", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerLatencyUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerLatencyUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerLatencyUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerLatencyUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerLatencyUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerDisconnected"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerDisconnected", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerSortOrderUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerSortOrderUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerSortOrderUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerSortOrderUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerSortOrderUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType Party
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_Party() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_Party");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "Party"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType Party
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_Party(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_Party");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "Party", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_MultiplayerSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_MultiplayerSession");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "MultiplayerSession"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_MultiplayerSession(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_MultiplayerSession");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "MultiplayerSession", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_KickPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_KickPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "KickPlayer"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_KickPlayer(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_KickPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "KickPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerStateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerStateUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerStateUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerStateUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerStateUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerAvatarUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerAvatarUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerAvatarUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerAvatarUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerAvatarUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerAvatarUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerAvatarUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerAvatarUpdate", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/MessageType
#include "GlobalNamespace/ConnectedPlayerManager_MessageType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/MessageType Party
GlobalNamespace::ConnectedPlayerManager::MessageType GlobalNamespace::ConnectedPlayerManager::MessageType::_get_Party() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_get_Party");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::MessageType>("", "ConnectedPlayerManager/MessageType", "Party"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/MessageType Party
void GlobalNamespace::ConnectedPlayerManager::MessageType::_set_Party(GlobalNamespace::ConnectedPlayerManager::MessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_set_Party");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/MessageType", "Party", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/MessageType MultiplayerSession
GlobalNamespace::ConnectedPlayerManager::MessageType GlobalNamespace::ConnectedPlayerManager::MessageType::_get_MultiplayerSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_get_MultiplayerSession");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::MessageType>("", "ConnectedPlayerManager/MessageType", "MultiplayerSession"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/MessageType MultiplayerSession
void GlobalNamespace::ConnectedPlayerManager::MessageType::_set_MultiplayerSession(GlobalNamespace::ConnectedPlayerManager::MessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_set_MultiplayerSession");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/MessageType", "MultiplayerSession", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager/PlayerConnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerConnectedPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerConnectedPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Init(uint8_t connectionId, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(isConnectionOwner)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*, false>(this, ___internal__method, connectionId, userId, userName, isConnectionOwner);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerConnectedPacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*>* (*)()>(&ConnectedPlayerManager::PlayerConnectedPacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerConnectedPacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerConnectedPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerConnectedPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::PlayerConnectedPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerConnectedPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerConnectedPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerConnectedPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::PlayerConnectedPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerConnectedPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerConnectedPacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerConnectedPacket::*)()>(&ConnectedPlayerManager::PlayerConnectedPacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerConnectedPacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerConnectedPacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* (ConnectedPlayerManager::PlayerConnectedPacket::*)(uint8_t, ::Il2CppString*, ::Il2CppString*, bool)>(&ConnectedPlayerManager::PlayerConnectedPacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerConnectedPacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerConnectedPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerConnectedPacket::*)()>(&ConnectedPlayerManager::PlayerConnectedPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerConnectedPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerConnectedPacket::*)()>(&ConnectedPlayerManager::PlayerConnectedPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerConnectedPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerIdentityPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerIdentityPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerIdentityPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Init(GlobalNamespace::PlayerStateHash states, GlobalNamespace::MultiplayerAvatarData avatar) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(states), ::il2cpp_utils::ExtractType(avatar)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*, false>(this, ___internal__method, states, avatar);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerIdentityPacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*>* (*)()>(&ConnectedPlayerManager::PlayerIdentityPacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerIdentityPacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerIdentityPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerIdentityPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::PlayerIdentityPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerIdentityPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerIdentityPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerIdentityPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::PlayerIdentityPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerIdentityPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerIdentityPacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerIdentityPacket::*)()>(&ConnectedPlayerManager::PlayerIdentityPacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerIdentityPacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerIdentityPacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* (ConnectedPlayerManager::PlayerIdentityPacket::*)(GlobalNamespace::PlayerStateHash, GlobalNamespace::MultiplayerAvatarData)>(&ConnectedPlayerManager::PlayerIdentityPacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerIdentityPacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerStateHash>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerAvatarData>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerIdentityPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerIdentityPacket::*)()>(&ConnectedPlayerManager::PlayerIdentityPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerIdentityPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerIdentityPacket::*)()>(&ConnectedPlayerManager::PlayerIdentityPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerIdentityPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerAvatarPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerAvatarPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerAvatarPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Init(GlobalNamespace::MultiplayerAvatarData avatar) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatar)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*, false>(this, ___internal__method, avatar);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerAvatarPacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*>* (*)()>(&ConnectedPlayerManager::PlayerAvatarPacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerAvatarPacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerAvatarPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerAvatarPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::PlayerAvatarPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerAvatarPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerAvatarPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerAvatarPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::PlayerAvatarPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerAvatarPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerAvatarPacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerAvatarPacket::*)()>(&ConnectedPlayerManager::PlayerAvatarPacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerAvatarPacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerAvatarPacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* (ConnectedPlayerManager::PlayerAvatarPacket::*)(GlobalNamespace::MultiplayerAvatarData)>(&ConnectedPlayerManager::PlayerAvatarPacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerAvatarPacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerAvatarData>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerAvatarPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerAvatarPacket::*)()>(&ConnectedPlayerManager::PlayerAvatarPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerAvatarPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerAvatarPacket::*)()>(&ConnectedPlayerManager::PlayerAvatarPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerAvatarPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerStatePacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerStatePacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerStatePacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Init(GlobalNamespace::PlayerStateHash states) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(states)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*, false>(this, ___internal__method, states);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerStatePacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*>* (*)()>(&ConnectedPlayerManager::PlayerStatePacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerStatePacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerStatePacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerStatePacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::PlayerStatePacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerStatePacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerStatePacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerStatePacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::PlayerStatePacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerStatePacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerStatePacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerStatePacket::*)()>(&ConnectedPlayerManager::PlayerStatePacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerStatePacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerStatePacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* (ConnectedPlayerManager::PlayerStatePacket::*)(GlobalNamespace::PlayerStateHash)>(&ConnectedPlayerManager::PlayerStatePacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerStatePacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerStateHash>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerStatePacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerStatePacket::*)()>(&ConnectedPlayerManager::PlayerStatePacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerStatePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerStatePacket::*)()>(&ConnectedPlayerManager::PlayerStatePacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerStatePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager/PlayerSortOrderPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerSortOrderPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerSortOrderPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Init(::Il2CppString* userId, int sortIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(sortIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*, false>(this, ___internal__method, userId, sortIndex);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerSortOrderPacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*>* (*)()>(&ConnectedPlayerManager::PlayerSortOrderPacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerSortOrderPacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerSortOrderPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerSortOrderPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::PlayerSortOrderPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerSortOrderPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerSortOrderPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerSortOrderPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::PlayerSortOrderPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerSortOrderPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerSortOrderPacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerSortOrderPacket::*)()>(&ConnectedPlayerManager::PlayerSortOrderPacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerSortOrderPacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerSortOrderPacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* (ConnectedPlayerManager::PlayerSortOrderPacket::*)(::Il2CppString*, int)>(&ConnectedPlayerManager::PlayerSortOrderPacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerSortOrderPacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerSortOrderPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerSortOrderPacket::*)()>(&ConnectedPlayerManager::PlayerSortOrderPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerSortOrderPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerSortOrderPacket::*)()>(&ConnectedPlayerManager::PlayerSortOrderPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerSortOrderPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerDisconnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerDisconnectedPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerDisconnectedPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Init(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerDisconnectedPacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*>* (*)()>(&ConnectedPlayerManager::PlayerDisconnectedPacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerDisconnectedPacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerDisconnectedPacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* (ConnectedPlayerManager::PlayerDisconnectedPacket::*)(GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::PlayerDisconnectedPacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerDisconnectedPacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerDisconnectedPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerDisconnectedPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::PlayerDisconnectedPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerDisconnectedPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerDisconnectedPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerDisconnectedPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::PlayerDisconnectedPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerDisconnectedPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerDisconnectedPacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerDisconnectedPacket::*)()>(&ConnectedPlayerManager::PlayerDisconnectedPacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerDisconnectedPacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerDisconnectedPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerDisconnectedPacket::*)()>(&ConnectedPlayerManager::PlayerDisconnectedPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerDisconnectedPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerDisconnectedPacket::*)()>(&ConnectedPlayerManager::PlayerDisconnectedPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerDisconnectedPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/KickPlayerPacket
#include "GlobalNamespace/ConnectedPlayerManager_KickPlayerPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*>* GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/KickPlayerPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Init
GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Init(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Release
void GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::KickPlayerPacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*>* (*)()>(&ConnectedPlayerManager::KickPlayerPacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::KickPlayerPacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::KickPlayerPacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* (ConnectedPlayerManager::KickPlayerPacket::*)(GlobalNamespace::DisconnectedReason)>(&ConnectedPlayerManager::KickPlayerPacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::KickPlayerPacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::KickPlayerPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::KickPlayerPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::KickPlayerPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::KickPlayerPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::KickPlayerPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::KickPlayerPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::KickPlayerPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::KickPlayerPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::KickPlayerPacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::KickPlayerPacket::*)()>(&ConnectedPlayerManager::KickPlayerPacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::KickPlayerPacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::KickPlayerPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::KickPlayerPacket::*)()>(&ConnectedPlayerManager::KickPlayerPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::KickPlayerPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::KickPlayerPacket::*)()>(&ConnectedPlayerManager::KickPlayerPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::KickPlayerPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/SyncTimePacket
#include "GlobalNamespace/ConnectedPlayerManager_SyncTimePacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*>* GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/SyncTimePacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Init
GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Init(float syncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*, false>(this, ___internal__method, syncTime);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Release
void GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::SyncTimePacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*>* (*)()>(&ConnectedPlayerManager::SyncTimePacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::SyncTimePacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SyncTimePacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::SyncTimePacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::SyncTimePacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::SyncTimePacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SyncTimePacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::SyncTimePacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::SyncTimePacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::SyncTimePacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SyncTimePacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* (ConnectedPlayerManager::SyncTimePacket::*)(float)>(&ConnectedPlayerManager::SyncTimePacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::SyncTimePacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SyncTimePacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::SyncTimePacket::*)()>(&ConnectedPlayerManager::SyncTimePacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::SyncTimePacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::SyncTimePacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::SyncTimePacket::*)()>(&ConnectedPlayerManager::SyncTimePacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::SyncTimePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::SyncTimePacket::*)()>(&ConnectedPlayerManager::SyncTimePacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::SyncTimePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerLatencyPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerLatencyPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerLatencyPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Init(float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(latency)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*, false>(this, ___internal__method, latency);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerLatencyPacket::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*>* (*)()>(&ConnectedPlayerManager::PlayerLatencyPacket::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerLatencyPacket*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerLatencyPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerLatencyPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&ConnectedPlayerManager::PlayerLatencyPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerLatencyPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerLatencyPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerLatencyPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&ConnectedPlayerManager::PlayerLatencyPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerLatencyPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerLatencyPacket::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* (ConnectedPlayerManager::PlayerLatencyPacket::*)(float)>(&ConnectedPlayerManager::PlayerLatencyPacket::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerLatencyPacket*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerLatencyPacket::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerLatencyPacket::*)()>(&ConnectedPlayerManager::PlayerLatencyPacket::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerLatencyPacket*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerManager::PlayerLatencyPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerLatencyPacket::*)()>(&ConnectedPlayerManager::PlayerLatencyPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerLatencyPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerManager::PlayerLatencyPacket::*)()>(&ConnectedPlayerManager::PlayerLatencyPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerManager::PlayerLatencyPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerHelpers
#include "GlobalNamespace/ConnectedPlayerHelpers.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerHelpers.WantsToPlayNextLevel
bool GlobalNamespace::ConnectedPlayerHelpers::WantsToPlayNextLevel(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::WantsToPlayNextLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "WantsToPlayNextLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.WasActiveAtLevelStart
bool GlobalNamespace::ConnectedPlayerHelpers::WasActiveAtLevelStart(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::WasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "WasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.IsActive
bool GlobalNamespace::ConnectedPlayerHelpers::IsActive(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::IsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "IsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.HasFinishedLevel
bool GlobalNamespace::ConnectedPlayerHelpers::HasFinishedLevel(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::HasFinishedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "HasFinishedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.IsActiveOrFinished
bool GlobalNamespace::ConnectedPlayerHelpers::IsActiveOrFinished(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::IsActiveOrFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "IsActiveOrFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.IsFailed
bool GlobalNamespace::ConnectedPlayerHelpers::IsFailed(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::IsFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "IsFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Writing MetadataGetter for method: ConnectedPlayerHelpers::WantsToPlayNextLevel
// Il2CppName: WantsToPlayNextLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerHelpers::WantsToPlayNextLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerHelpers*), "WantsToPlayNextLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerHelpers::WasActiveAtLevelStart
// Il2CppName: WasActiveAtLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerHelpers::WasActiveAtLevelStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerHelpers*), "WasActiveAtLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerHelpers::IsActive
// Il2CppName: IsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerHelpers::IsActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerHelpers*), "IsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerHelpers::HasFinishedLevel
// Il2CppName: HasFinishedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerHelpers::HasFinishedLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerHelpers*), "HasFinishedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerHelpers::IsActiveOrFinished
// Il2CppName: IsActiveOrFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerHelpers::IsActiveOrFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerHelpers*), "IsActiveOrFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerHelpers::IsFailed
// Il2CppName: IsFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::IConnectedPlayer*)>(&ConnectedPlayerHelpers::IsFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerHelpers*), "IsFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason Unknown
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason Unknown
void GlobalNamespace::ConnectionFailedReason::_set_Unknown(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ConnectionCanceled
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ConnectionCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ConnectionCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ConnectionCanceled"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ConnectionCanceled
void GlobalNamespace::ConnectionFailedReason::_set_ConnectionCanceled(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ConnectionCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ConnectionCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerUnreachable
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerUnreachable
void GlobalNamespace::ConnectionFailedReason::_set_ServerUnreachable(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerAlreadyExists
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerAlreadyExists
void GlobalNamespace::ConnectionFailedReason::_set_ServerAlreadyExists(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerAlreadyExists", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerDoesNotExist
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerDoesNotExist() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerDoesNotExist");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerDoesNotExist"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerDoesNotExist
void GlobalNamespace::ConnectionFailedReason::_set_ServerDoesNotExist(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerDoesNotExist");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerDoesNotExist", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerAtCapacity
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerAtCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerAtCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerAtCapacity"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerAtCapacity
void GlobalNamespace::ConnectionFailedReason::_set_ServerAtCapacity(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerAtCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerAtCapacity", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason VersionMismatch
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_VersionMismatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_VersionMismatch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "VersionMismatch"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason VersionMismatch
void GlobalNamespace::ConnectionFailedReason::_set_VersionMismatch(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_VersionMismatch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "VersionMismatch", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason InvalidPassword
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_InvalidPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_InvalidPassword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "InvalidPassword"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason InvalidPassword
void GlobalNamespace::ConnectionFailedReason::_set_InvalidPassword(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_InvalidPassword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "InvalidPassword", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason MasterServerUnreachable
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_MasterServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_MasterServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "MasterServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason MasterServerUnreachable
void GlobalNamespace::ConnectionFailedReason::_set_MasterServerUnreachable(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_MasterServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "MasterServerUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason MasterServerNotAuthenticated
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_MasterServerNotAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_MasterServerNotAuthenticated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "MasterServerNotAuthenticated"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason MasterServerNotAuthenticated
void GlobalNamespace::ConnectionFailedReason::_set_MasterServerNotAuthenticated(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_MasterServerNotAuthenticated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "MasterServerNotAuthenticated", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason NetworkNotConnected
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_NetworkNotConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_NetworkNotConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "NetworkNotConnected"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason NetworkNotConnected
void GlobalNamespace::ConnectionFailedReason::_set_NetworkNotConnected(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_NetworkNotConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "NetworkNotConnected", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason MasterServerCertificateValidationFailed
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_MasterServerCertificateValidationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_MasterServerCertificateValidationFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "MasterServerCertificateValidationFailed"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason MasterServerCertificateValidationFailed
void GlobalNamespace::ConnectionFailedReason::_set_MasterServerCertificateValidationFailed(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_MasterServerCertificateValidationFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "MasterServerCertificateValidationFailed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CustomNetworkConfig
#include "GlobalNamespace/CustomNetworkConfig.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CustomNetworkConfig.get_maxPartySize
int GlobalNamespace::CustomNetworkConfig::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_maxPartySize
void GlobalNamespace::CustomNetworkConfig::set_maxPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_maxPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_discoveryPort
int GlobalNamespace::CustomNetworkConfig::get_discoveryPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_discoveryPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_discoveryPort
void GlobalNamespace::CustomNetworkConfig::set_discoveryPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_discoveryPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_discoveryPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_partyPort
int GlobalNamespace::CustomNetworkConfig::get_partyPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_partyPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_partyPort
void GlobalNamespace::CustomNetworkConfig::set_partyPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_partyPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_partyPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_multiplayerPort
int GlobalNamespace::CustomNetworkConfig::get_multiplayerPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_multiplayerPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_multiplayerPort
void GlobalNamespace::CustomNetworkConfig::set_multiplayerPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_multiplayerPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_masterServerEndPoint
GlobalNamespace::MasterServerEndPoint* GlobalNamespace::CustomNetworkConfig::get_masterServerEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_masterServerEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_masterServerEndPoint
void GlobalNamespace::CustomNetworkConfig::set_masterServerEndPoint(GlobalNamespace::MasterServerEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_masterServerEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_masterServerStatusUrl
::Il2CppString* GlobalNamespace::CustomNetworkConfig::get_masterServerStatusUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_masterServerStatusUrl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerStatusUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_masterServerStatusUrl
void GlobalNamespace::CustomNetworkConfig::set_masterServerStatusUrl(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_masterServerStatusUrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerStatusUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: CustomNetworkConfig::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CustomNetworkConfig::*)()>(&CustomNetworkConfig::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::set_maxPartySize
// Il2CppName: set_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(int)>(&CustomNetworkConfig::set_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "set_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::get_discoveryPort
// Il2CppName: get_discoveryPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CustomNetworkConfig::*)()>(&CustomNetworkConfig::get_discoveryPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "get_discoveryPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::set_discoveryPort
// Il2CppName: set_discoveryPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(int)>(&CustomNetworkConfig::set_discoveryPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "set_discoveryPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::get_partyPort
// Il2CppName: get_partyPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CustomNetworkConfig::*)()>(&CustomNetworkConfig::get_partyPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "get_partyPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::set_partyPort
// Il2CppName: set_partyPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(int)>(&CustomNetworkConfig::set_partyPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "set_partyPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::get_multiplayerPort
// Il2CppName: get_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CustomNetworkConfig::*)()>(&CustomNetworkConfig::get_multiplayerPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "get_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::set_multiplayerPort
// Il2CppName: set_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(int)>(&CustomNetworkConfig::set_multiplayerPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "set_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::get_masterServerEndPoint
// Il2CppName: get_masterServerEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MasterServerEndPoint* (CustomNetworkConfig::*)()>(&CustomNetworkConfig::get_masterServerEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "get_masterServerEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::set_masterServerEndPoint
// Il2CppName: set_masterServerEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(GlobalNamespace::MasterServerEndPoint*)>(&CustomNetworkConfig::set_masterServerEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "set_masterServerEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>()});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::get_masterServerStatusUrl
// Il2CppName: get_masterServerStatusUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CustomNetworkConfig::*)()>(&CustomNetworkConfig::get_masterServerStatusUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "get_masterServerStatusUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::set_masterServerStatusUrl
// Il2CppName: set_masterServerStatusUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(::Il2CppString*)>(&CustomNetworkConfig::set_masterServerStatusUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), "set_masterServerStatusUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CustomNetworkConfig::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(GlobalNamespace::INetworkConfig*, ::Il2CppString*, int)>(&CustomNetworkConfig::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkConfig*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomNetworkConfig::*)(GlobalNamespace::INetworkConfig*, ::Il2CppString*, int)>(&CustomNetworkConfig::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomNetworkConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkConfig*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDiffieHellmanKeyPair.get_publicKey
::Array<uint8_t>* GlobalNamespace::IDiffieHellmanKeyPair::get_publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDiffieHellmanKeyPair::get_publicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: IDiffieHellmanKeyPair.GetPreMasterSecretAsync
System::Threading::Tasks::Task_1<::Array<uint8_t>*>* GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecretAsync(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecretAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecretAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<uint8_t>*>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated method: IDiffieHellmanKeyPair.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecret(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, clientPublicKey);
}
// Writing MetadataGetter for method: IDiffieHellmanKeyPair::get_publicKey
// Il2CppName: get_publicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (IDiffieHellmanKeyPair::*)()>(&IDiffieHellmanKeyPair::get_publicKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDiffieHellmanKeyPair*), "get_publicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IDiffieHellmanKeyPair::GetPreMasterSecretAsync
// Il2CppName: GetPreMasterSecretAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<::Array<uint8_t>*>* (IDiffieHellmanKeyPair::*)(::Array<uint8_t>*)>(&IDiffieHellmanKeyPair::GetPreMasterSecretAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDiffieHellmanKeyPair*), "GetPreMasterSecretAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: IDiffieHellmanKeyPair::GetPreMasterSecret
// Il2CppName: GetPreMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (IDiffieHellmanKeyPair::*)(::Array<uint8_t>*)>(&IDiffieHellmanKeyPair::GetPreMasterSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IDiffieHellmanKeyPair*), "GetPreMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility
#include "GlobalNamespace/DiffieHellmanUtility.hpp"
// Including type: DiffieHellmanUtility/KeyType
#include "GlobalNamespace/DiffieHellmanUtility_KeyType.hpp"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair.hpp"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair.hpp"
// Including type: DiffieHellmanUtility/OperationTimer
#include "GlobalNamespace/DiffieHellmanUtility_OperationTimer.hpp"
// Including type: Org.BouncyCastle.Security.SecureRandom
#include "Org/BouncyCastle/Security/SecureRandom.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.DHParameters
#include "Org/BouncyCastle/Crypto/Parameters/DHParameters.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.ECDomainParameters
#include "Org/BouncyCastle/Crypto/Parameters/ECDomainParameters.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/DHBasicAgreement.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/ECDHBasicAgreement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxDiffieHellmanPublicKeyLength
int GlobalNamespace::DiffieHellmanUtility::_get_kMaxDiffieHellmanPublicKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get_kMaxDiffieHellmanPublicKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DiffieHellmanUtility", "kMaxDiffieHellmanPublicKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxDiffieHellmanPublicKeyLength
void GlobalNamespace::DiffieHellmanUtility::_set_kMaxDiffieHellmanPublicKeyLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set_kMaxDiffieHellmanPublicKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "kMaxDiffieHellmanPublicKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxElipticalCurvePublicKeyLength
int GlobalNamespace::DiffieHellmanUtility::_get_kMaxElipticalCurvePublicKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get_kMaxElipticalCurvePublicKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DiffieHellmanUtility", "kMaxElipticalCurvePublicKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxElipticalCurvePublicKeyLength
void GlobalNamespace::DiffieHellmanUtility::_set_kMaxElipticalCurvePublicKeyLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set_kMaxElipticalCurvePublicKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "kMaxElipticalCurvePublicKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
Org::BouncyCastle::Security::SecureRandom* GlobalNamespace::DiffieHellmanUtility::_get__secureRandom() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__secureRandom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::Security::SecureRandom*>("", "DiffieHellmanUtility", "_secureRandom"));
}
// Autogenerated static field setter
// Set static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
void GlobalNamespace::DiffieHellmanUtility::_set__secureRandom(Org::BouncyCastle::Security::SecureRandom* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__secureRandom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_secureRandom", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF0A10
// Autogenerated static field getter
// Get static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
Org::BouncyCastle::Crypto::Parameters::DHParameters* GlobalNamespace::DiffieHellmanUtility::_get__dhParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__dhParameters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::Crypto::Parameters::DHParameters*>("", "DiffieHellmanUtility", "_dhParameters"));
}
// Autogenerated static field setter
// Set static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
void GlobalNamespace::DiffieHellmanUtility::_set__dhParameters(Org::BouncyCastle::Crypto::Parameters::DHParameters* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__dhParameters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_dhParameters", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF0A20
// Autogenerated static field getter
// Get static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* GlobalNamespace::DiffieHellmanUtility::_get__ecParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__ecParameters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::Crypto::Parameters::ECDomainParameters*>("", "DiffieHellmanUtility", "_ecParameters"));
}
// Autogenerated static field setter
// Set static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
void GlobalNamespace::DiffieHellmanUtility::_set__ecParameters(Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__ecParameters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_ecParameters", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _ecPointFormats
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::_get__ecPointFormats() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__ecPointFormats");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "DiffieHellmanUtility", "_ecPointFormats"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _ecPointFormats
void GlobalNamespace::DiffieHellmanUtility::_set__ecPointFormats(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__ecPointFormats");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_ecPointFormats", value));
}
// Autogenerated method: DiffieHellmanUtility.GenerateKeysAsync
System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* GlobalNamespace::DiffieHellmanUtility::GenerateKeysAsync(GlobalNamespace::DiffieHellmanUtility::KeyType keyType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateKeysAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateKeysAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, keyType);
}
// Autogenerated method: DiffieHellmanUtility.GenerateKeys
GlobalNamespace::IDiffieHellmanKeyPair* GlobalNamespace::DiffieHellmanUtility::GenerateKeys(GlobalNamespace::DiffieHellmanUtility::KeyType keyType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDiffieHellmanKeyPair*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, keyType);
}
// Autogenerated method: DiffieHellmanUtility.GenerateDiffieHellmanKeys
GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* GlobalNamespace::DiffieHellmanUtility::GenerateDiffieHellmanKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateDiffieHellmanKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateDiffieHellmanKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility.GenerateElipticalCurveKeys
GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* GlobalNamespace::DiffieHellmanUtility::GenerateElipticalCurveKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateElipticalCurveKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateElipticalCurveKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret(Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement* dhBasicAgreement, ::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dhBasicAgreement), ::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dhBasicAgreement, clientPublicKey);
}
// Autogenerated method: DiffieHellmanUtility.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret(Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement* ecdhBasicAgreement, ::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ecdhBasicAgreement), ::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ecdhBasicAgreement, clientPublicKey);
}
// Autogenerated method: DiffieHellmanUtility..cctor
void GlobalNamespace::DiffieHellmanUtility::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: DiffieHellmanUtility::GenerateKeysAsync
// Il2CppName: GenerateKeysAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* (*)(GlobalNamespace::DiffieHellmanUtility::KeyType)>(&DiffieHellmanUtility::GenerateKeysAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility*), "GenerateKeysAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiffieHellmanUtility::KeyType>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::GenerateKeys
// Il2CppName: GenerateKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDiffieHellmanKeyPair* (*)(GlobalNamespace::DiffieHellmanUtility::KeyType)>(&DiffieHellmanUtility::GenerateKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility*), "GenerateKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiffieHellmanUtility::KeyType>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::GenerateDiffieHellmanKeys
// Il2CppName: GenerateDiffieHellmanKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* (*)()>(&DiffieHellmanUtility::GenerateDiffieHellmanKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility*), "GenerateDiffieHellmanKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::GenerateElipticalCurveKeys
// Il2CppName: GenerateElipticalCurveKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* (*)()>(&DiffieHellmanUtility::GenerateElipticalCurveKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility*), "GenerateElipticalCurveKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::GetPreMasterSecret
// Il2CppName: GetPreMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement*, ::Array<uint8_t>*)>(&DiffieHellmanUtility::GetPreMasterSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility*), "GetPreMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::GetPreMasterSecret
// Il2CppName: GetPreMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement*, ::Array<uint8_t>*)>(&DiffieHellmanUtility::GetPreMasterSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility*), "GetPreMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&DiffieHellmanUtility::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DiffieHellmanUtility/KeyType
#include "GlobalNamespace/DiffieHellmanUtility_KeyType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DiffieHellmanUtility/KeyType DiffieHellman
GlobalNamespace::DiffieHellmanUtility::KeyType GlobalNamespace::DiffieHellmanUtility::KeyType::_get_DiffieHellman() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_get_DiffieHellman");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DiffieHellmanUtility::KeyType>("", "DiffieHellmanUtility/KeyType", "DiffieHellman"));
}
// Autogenerated static field setter
// Set static field: static public DiffieHellmanUtility/KeyType DiffieHellman
void GlobalNamespace::DiffieHellmanUtility::KeyType::_set_DiffieHellman(GlobalNamespace::DiffieHellmanUtility::KeyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_set_DiffieHellman");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility/KeyType", "DiffieHellman", value));
}
// Autogenerated static field getter
// Get static field: static public DiffieHellmanUtility/KeyType ElipticalCurve
GlobalNamespace::DiffieHellmanUtility::KeyType GlobalNamespace::DiffieHellmanUtility::KeyType::_get_ElipticalCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_get_ElipticalCurve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DiffieHellmanUtility::KeyType>("", "DiffieHellmanUtility/KeyType", "ElipticalCurve"));
}
// Autogenerated static field setter
// Set static field: static public DiffieHellmanUtility/KeyType ElipticalCurve
void GlobalNamespace::DiffieHellmanUtility::KeyType::_set_ElipticalCurve(GlobalNamespace::DiffieHellmanUtility::KeyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_set_ElipticalCurve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility/KeyType", "ElipticalCurve", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair.hpp"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair_--c__DisplayClass5_0.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/DHBasicAgreement.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/DHPrivateKeyParameters.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair.get_publicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::get_publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::get_publicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair.GetPreMasterSecretAsync
System::Threading::Tasks::Task_1<::Array<uint8_t>*>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecretAsync(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecretAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecretAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<uint8_t>*>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecret(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, clientPublicKey);
}
// Writing MetadataGetter for method: DiffieHellmanUtility::DiffieHellmanKeyPair::get_publicKey
// Il2CppName: get_publicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DiffieHellmanUtility::DiffieHellmanKeyPair::*)()>(&DiffieHellmanUtility::DiffieHellmanKeyPair::get_publicKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair*), "get_publicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::DiffieHellmanKeyPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::DiffieHellmanKeyPair::*)(Org::BouncyCastle::Crypto::Parameters::DHPrivateKeyParameters*, ::Array<uint8_t>*)>(&DiffieHellmanUtility::DiffieHellmanKeyPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Parameters::DHPrivateKeyParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::DiffieHellmanKeyPair::*)(Org::BouncyCastle::Crypto::Parameters::DHPrivateKeyParameters*, ::Array<uint8_t>*)>(&DiffieHellmanUtility::DiffieHellmanKeyPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Parameters::DHPrivateKeyParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecretAsync
// Il2CppName: GetPreMasterSecretAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<::Array<uint8_t>*>* (DiffieHellmanUtility::DiffieHellmanKeyPair::*)(::Array<uint8_t>*)>(&DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecretAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair*), "GetPreMasterSecretAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecret
// Il2CppName: GetPreMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DiffieHellmanUtility::DiffieHellmanKeyPair::*)(::Array<uint8_t>*)>(&DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair*), "GetPreMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair/<>c__DisplayClass5_0.<GetPreMasterSecretAsync>b__0
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::<GetPreMasterSecretAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPreMasterSecretAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0
// Il2CppName: <GetPreMasterSecretAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::*)()>(&DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0*), "<GetPreMasterSecretAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::*)()>(&DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::*)()>(&DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair.hpp"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair_--c__DisplayClass5_0.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/ECDHBasicAgreement.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/ECPrivateKeyParameters.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair.get_publicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::get_publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::get_publicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair.GetPreMasterSecretAsync
System::Threading::Tasks::Task_1<::Array<uint8_t>*>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecretAsync(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecretAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecretAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<uint8_t>*>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecret(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, clientPublicKey);
}
// Writing MetadataGetter for method: DiffieHellmanUtility::ElipticalCurveKeyPair::get_publicKey
// Il2CppName: get_publicKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DiffieHellmanUtility::ElipticalCurveKeyPair::*)()>(&DiffieHellmanUtility::ElipticalCurveKeyPair::get_publicKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair*), "get_publicKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::ElipticalCurveKeyPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::ElipticalCurveKeyPair::*)(Org::BouncyCastle::Crypto::Parameters::ECPrivateKeyParameters*, ::Array<uint8_t>*)>(&DiffieHellmanUtility::ElipticalCurveKeyPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Parameters::ECPrivateKeyParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::ElipticalCurveKeyPair::*)(Org::BouncyCastle::Crypto::Parameters::ECPrivateKeyParameters*, ::Array<uint8_t>*)>(&DiffieHellmanUtility::ElipticalCurveKeyPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Parameters::ECPrivateKeyParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecretAsync
// Il2CppName: GetPreMasterSecretAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<::Array<uint8_t>*>* (DiffieHellmanUtility::ElipticalCurveKeyPair::*)(::Array<uint8_t>*)>(&DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecretAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair*), "GetPreMasterSecretAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecret
// Il2CppName: GetPreMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DiffieHellmanUtility::ElipticalCurveKeyPair::*)(::Array<uint8_t>*)>(&DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair*), "GetPreMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair/<>c__DisplayClass5_0.<GetPreMasterSecretAsync>b__0
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::<GetPreMasterSecretAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPreMasterSecretAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0
// Il2CppName: <GetPreMasterSecretAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::*)()>(&DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0*), "<GetPreMasterSecretAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::*)()>(&DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::*)()>(&DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/OperationTimer
#include "GlobalNamespace/DiffieHellmanUtility_OperationTimer.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DiffieHellmanUtility/OperationTimer.Dispose
void GlobalNamespace::DiffieHellmanUtility::OperationTimer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility/OperationTimer.Time
GlobalNamespace::DiffieHellmanUtility::OperationTimer* GlobalNamespace::DiffieHellmanUtility::OperationTimer::Time(::Il2CppString* operation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::Time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility/OperationTimer", "Time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(operation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiffieHellmanUtility::OperationTimer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, operation);
}
// Writing MetadataGetter for method: DiffieHellmanUtility::OperationTimer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::OperationTimer::*)(::Il2CppString*)>(&DiffieHellmanUtility::OperationTimer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::OperationTimer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::OperationTimer::*)(::Il2CppString*)>(&DiffieHellmanUtility::OperationTimer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::OperationTimer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::OperationTimer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DiffieHellmanUtility::OperationTimer::*)()>(&DiffieHellmanUtility::OperationTimer::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::OperationTimer*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DiffieHellmanUtility::OperationTimer::Time
// Il2CppName: Time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DiffieHellmanUtility::OperationTimer* (*)(::Il2CppString*)>(&DiffieHellmanUtility::OperationTimer::Time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DiffieHellmanUtility::OperationTimer*), "Time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DisconnectedPlayer
#include "GlobalNamespace/DisconnectedPlayer.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisconnectedPlayer.get_offsetSyncTime
float GlobalNamespace::DisconnectedPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isFailed
bool GlobalNamespace::DisconnectedPlayer::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isMe
bool GlobalNamespace::DisconnectedPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_userId
::Il2CppString* GlobalNamespace::DisconnectedPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.set_userId
void GlobalNamespace::DisconnectedPlayer::set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::set_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DisconnectedPlayer.get_userName
::Il2CppString* GlobalNamespace::DisconnectedPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.set_userName
void GlobalNamespace::DisconnectedPlayer::set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::set_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DisconnectedPlayer.get_currentLatency
float GlobalNamespace::DisconnectedPlayer::get_currentLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_currentLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isConnected
bool GlobalNamespace::DisconnectedPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedPlayer::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isConnectionOwner
bool GlobalNamespace::DisconnectedPlayer::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_sortIndex
int GlobalNamespace::DisconnectedPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_sortIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_multiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::DisconnectedPlayer::get_multiplayerAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_multiplayerAvatarData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isKicked
bool GlobalNamespace::DisconnectedPlayer::get_isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isKicked");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.HasState
bool GlobalNamespace::DisconnectedPlayer::HasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::HasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: DisconnectedPlayer::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_offsetSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_offsetSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_isFailed
// Il2CppName: get_isFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_isFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_isFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::set_userId
// Il2CppName: set_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisconnectedPlayer::*)(::Il2CppString*)>(&DisconnectedPlayer::set_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "set_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::set_userName
// Il2CppName: set_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisconnectedPlayer::*)(::Il2CppString*)>(&DisconnectedPlayer::set_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "set_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_currentLatency
// Il2CppName: get_currentLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_currentLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_currentLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_disconnectedReason
// Il2CppName: get_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DisconnectedReason (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_disconnectedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_sortIndex
// Il2CppName: get_sortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_sortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_sortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_multiplayerAvatarData
// Il2CppName: get_multiplayerAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerAvatarData (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_multiplayerAvatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_multiplayerAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::get_isKicked
// Il2CppName: get_isKicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DisconnectedPlayer::*)()>(&DisconnectedPlayer::get_isKicked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "get_isKicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::HasState
// Il2CppName: HasState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DisconnectedPlayer::*)(::Il2CppString*)>(&DisconnectedPlayer::HasState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), "HasState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DisconnectedPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisconnectedPlayer::*)(::Il2CppString*, ::Il2CppString*, int)>(&DisconnectedPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisconnectedPlayer::*)(::Il2CppString*, ::Il2CppString*, int)>(&DisconnectedPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisconnectedPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DisconnectedReason Unknown
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason Unknown
void GlobalNamespace::DisconnectedReason::_set_Unknown(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason UserInitiated
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_UserInitiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_UserInitiated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "UserInitiated"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason UserInitiated
void GlobalNamespace::DisconnectedReason::_set_UserInitiated(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_UserInitiated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "UserInitiated", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason Timeout
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "Timeout"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason Timeout
void GlobalNamespace::DisconnectedReason::_set_Timeout(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason Kicked
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_Kicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_Kicked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "Kicked"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason Kicked
void GlobalNamespace::DisconnectedReason::_set_Kicked(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_Kicked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "Kicked", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason ServerAtCapacity
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_ServerAtCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_ServerAtCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "ServerAtCapacity"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason ServerAtCapacity
void GlobalNamespace::DisconnectedReason::_set_ServerAtCapacity(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_ServerAtCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "ServerAtCapacity", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason ServerShutDown
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_ServerShutDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_ServerShutDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "ServerShutDown"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason ServerShutDown
void GlobalNamespace::DisconnectedReason::_set_ServerShutDown(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_ServerShutDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "ServerShutDown", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason MasterServerUnreachable
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_MasterServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_MasterServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "MasterServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason MasterServerUnreachable
void GlobalNamespace::DisconnectedReason::_set_MasterServerUnreachable(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_MasterServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "MasterServerUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason ClientShutDown
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_ClientShutDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_ClientShutDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "ClientShutDown"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason ClientShutDown
void GlobalNamespace::DisconnectedReason::_set_ClientShutDown(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_ClientShutDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "ClientShutDown", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason NetworkDisconnected
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_NetworkDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_NetworkDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "NetworkDisconnected"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason NetworkDisconnected
void GlobalNamespace::DisconnectedReason::_set_NetworkDisconnected(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_NetworkDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "NetworkDisconnected", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility
#include "GlobalNamespace/EncryptionUtility.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
// Including type: EncryptionUtility/EncryptionState
#include "GlobalNamespace/EncryptionUtility_EncryptionState.hpp"
// Including type: EncryptionUtility/<>c__DisplayClass18_0
#include "GlobalNamespace/EncryptionUtility_--c__DisplayClass18_0.hpp"
// Including type: System.Security.Cryptography.AesCryptoServiceProvider
#include "System/Security/Cryptography/AesCryptoServiceProvider.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMacHashSize
int GlobalNamespace::EncryptionUtility::_get_kMacHashSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMacHashSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMacHashSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMacHashSize
void GlobalNamespace::EncryptionUtility::_set_kMacHashSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMacHashSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMacHashSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kSequenceNumberSize
int GlobalNamespace::EncryptionUtility::_get_kSequenceNumberSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kSequenceNumberSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kSequenceNumberSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kSequenceNumberSize
void GlobalNamespace::EncryptionUtility::_set_kSequenceNumberSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kSequenceNumberSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kSequenceNumberSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxPadding
int GlobalNamespace::EncryptionUtility::_get_kMaxPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMaxPadding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMaxPadding"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxPadding
void GlobalNamespace::EncryptionUtility::_set_kMaxPadding(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMaxPadding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMaxPadding", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMacKeySize
int GlobalNamespace::EncryptionUtility::_get_kMacKeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMacKeySize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMacKeySize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMacKeySize
void GlobalNamespace::EncryptionUtility::_set_kMacKeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMacKeySize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMacKeySize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kKeySize
int GlobalNamespace::EncryptionUtility::_get_kKeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kKeySize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kKeySize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kKeySize
void GlobalNamespace::EncryptionUtility::_set_kKeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kKeySize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kKeySize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kBlockSize
int GlobalNamespace::EncryptionUtility::_get_kBlockSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kBlockSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kBlockSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kBlockSize
void GlobalNamespace::EncryptionUtility::_set_kBlockSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kBlockSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kBlockSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kIvSize
int GlobalNamespace::EncryptionUtility::_get_kIvSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kIvSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kIvSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kIvSize
void GlobalNamespace::EncryptionUtility::_set_kIvSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kIvSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kIvSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMasterKeySize
int GlobalNamespace::EncryptionUtility::_get_kMasterKeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMasterKeySize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMasterKeySize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMasterKeySize
void GlobalNamespace::EncryptionUtility::_set_kMasterKeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMasterKeySize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMasterKeySize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kRandomBlockSize
int GlobalNamespace::EncryptionUtility::_get_kRandomBlockSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kRandomBlockSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kRandomBlockSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kRandomBlockSize
void GlobalNamespace::EncryptionUtility::_set_kRandomBlockSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kRandomBlockSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kRandomBlockSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kExtraSize
int GlobalNamespace::EncryptionUtility::_get_kExtraSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kExtraSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kExtraSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kExtraSize
void GlobalNamespace::EncryptionUtility::_set_kExtraSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kExtraSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kExtraSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _masterSecretSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__masterSecretSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__masterSecretSeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_masterSecretSeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _masterSecretSeed
void GlobalNamespace::EncryptionUtility::_set__masterSecretSeed(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__masterSecretSeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_masterSecretSeed", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _keyExpansionSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__keyExpansionSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__keyExpansionSeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_keyExpansionSeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _keyExpansionSeed
void GlobalNamespace::EncryptionUtility::_set__keyExpansionSeed(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__keyExpansionSeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_keyExpansionSeed", value));
}
// [ThreadStaticAttribute] Offset: 0xDF0A70
// Autogenerated static field getter
// Get static field: static private System.Byte[] _tempIV
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__tempIV() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__tempIV");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_tempIV"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _tempIV
void GlobalNamespace::EncryptionUtility::_set__tempIV(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__tempIV");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_tempIV", value));
}
// [ThreadStaticAttribute] Offset: 0xDF0A80
// Autogenerated static field getter
// Get static field: static private System.Byte[] _tempHash
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__tempHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__tempHash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_tempHash"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _tempHash
void GlobalNamespace::EncryptionUtility::_set__tempHash(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__tempHash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_tempHash", value));
}
// Autogenerated static field getter
// Get static field: static private System.Security.Cryptography.AesCryptoServiceProvider _aes
System::Security::Cryptography::AesCryptoServiceProvider* GlobalNamespace::EncryptionUtility::_get__aes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__aes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AesCryptoServiceProvider*>("", "EncryptionUtility", "_aes"));
}
// Autogenerated static field setter
// Set static field: static private System.Security.Cryptography.AesCryptoServiceProvider _aes
void GlobalNamespace::EncryptionUtility::_set__aes(System::Security::Cryptography::AesCryptoServiceProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__aes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_aes", value));
}
// Autogenerated method: EncryptionUtility.CreateEncryptionState
GlobalNamespace::EncryptionUtility::IEncryptionState* GlobalNamespace::EncryptionUtility::CreateEncryptionState(::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed, bool isClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::CreateEncryptionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "CreateEncryptionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(serverSeed), ::il2cpp_utils::ExtractType(clientSeed), ::il2cpp_utils::ExtractType(isClient)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EncryptionUtility::IEncryptionState*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, preMasterSecret, serverSeed, clientSeed, isClient);
}
// Autogenerated method: EncryptionUtility.CreateEncryptionStateAsync
System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>* GlobalNamespace::EncryptionUtility::CreateEncryptionStateAsync(::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed, bool isClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::CreateEncryptionStateAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "CreateEncryptionStateAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(serverSeed), ::il2cpp_utils::ExtractType(clientSeed), ::il2cpp_utils::ExtractType(isClient)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, preMasterSecret, serverSeed, clientSeed, isClient);
}
// Autogenerated method: EncryptionUtility.IsValidLength
bool GlobalNamespace::EncryptionUtility::IsValidLength(int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IsValidLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "IsValidLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, length);
}
// Autogenerated method: EncryptionUtility.EncryptData
void GlobalNamespace::EncryptionUtility::EncryptData(GlobalNamespace::EncryptionUtility::EncryptionState* state, ::Array<uint8_t>* data, int& offset, int& length, int extraPrefixedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "EncryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(extraPrefixedData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state, data, offset, length, extraPrefixedData);
}
// Autogenerated method: EncryptionUtility.TryDecryptData
bool GlobalNamespace::EncryptionUtility::TryDecryptData(GlobalNamespace::EncryptionUtility::EncryptionState* state, ::Array<uint8_t>* data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::TryDecryptData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "TryDecryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state, data, offset, length);
}
// Autogenerated method: EncryptionUtility.FastCopyBlock
void GlobalNamespace::EncryptionUtility::FastCopyBlock(::Array<uint8_t>* inArr, int inOff, ::Array<uint8_t>* outArr, int outOff) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::FastCopyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "FastCopyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inArr), ::il2cpp_utils::ExtractType(inOff), ::il2cpp_utils::ExtractType(outArr), ::il2cpp_utils::ExtractType(outOff)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inArr, inOff, outArr, outOff);
}
// Autogenerated method: EncryptionUtility.FastCopyMac
void GlobalNamespace::EncryptionUtility::FastCopyMac(::Array<uint8_t>* inArr, int inOff, ::Array<uint8_t>* outArr, int outOff) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::FastCopyMac");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "FastCopyMac", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inArr), ::il2cpp_utils::ExtractType(inOff), ::il2cpp_utils::ExtractType(outArr), ::il2cpp_utils::ExtractType(outOff)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inArr, inOff, outArr, outOff);
}
// Autogenerated method: EncryptionUtility.Log
void GlobalNamespace::EncryptionUtility::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: EncryptionUtility.LogV
void GlobalNamespace::EncryptionUtility::LogV(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::LogV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "LogV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: EncryptionUtility..cctor
void GlobalNamespace::EncryptionUtility::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: EncryptionUtility::CreateEncryptionState
// Il2CppName: CreateEncryptionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EncryptionUtility::IEncryptionState* (*)(::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&EncryptionUtility::CreateEncryptionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "CreateEncryptionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::CreateEncryptionStateAsync
// Il2CppName: CreateEncryptionStateAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>* (*)(::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&EncryptionUtility::CreateEncryptionStateAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "CreateEncryptionStateAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::IsValidLength
// Il2CppName: IsValidLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&EncryptionUtility::IsValidLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "IsValidLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptData
// Il2CppName: EncryptData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::EncryptionUtility::EncryptionState*, ::Array<uint8_t>*, int&, int&, int)>(&EncryptionUtility::EncryptData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "EncryptData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::EncryptionState*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::TryDecryptData
// Il2CppName: TryDecryptData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::EncryptionUtility::EncryptionState*, ::Array<uint8_t>*, int&, int&)>(&EncryptionUtility::TryDecryptData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "TryDecryptData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EncryptionUtility::EncryptionState*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::FastCopyBlock
// Il2CppName: FastCopyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, ::Array<uint8_t>*, int)>(&EncryptionUtility::FastCopyBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "FastCopyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::FastCopyMac
// Il2CppName: FastCopyMac
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, ::Array<uint8_t>*, int)>(&EncryptionUtility::FastCopyMac)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "FastCopyMac", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&EncryptionUtility::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::LogV
// Il2CppName: LogV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&EncryptionUtility::LogV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), "LogV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&EncryptionUtility::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EncryptionUtility/IEncryptionState.get_isValid
bool GlobalNamespace::EncryptionUtility::IEncryptionState::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IEncryptionState::get_isValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EncryptionUtility/IEncryptionState.EncryptData
void GlobalNamespace::EncryptionUtility::IEncryptionState::EncryptData(::Array<uint8_t>* data, int& offset, int& length, int extraPrefixBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IEncryptionState::EncryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(extraPrefixBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, offset, length, extraPrefixBytes);
}
// Autogenerated method: EncryptionUtility/IEncryptionState.TryDecryptData
bool GlobalNamespace::EncryptionUtility::IEncryptionState::TryDecryptData(::Array<uint8_t>* data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IEncryptionState::TryDecryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDecryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, offset, length);
}
// Writing MetadataGetter for method: EncryptionUtility::IEncryptionState::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EncryptionUtility::IEncryptionState::*)()>(&EncryptionUtility::IEncryptionState::get_isValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::IEncryptionState*), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::IEncryptionState::EncryptData
// Il2CppName: EncryptData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EncryptionUtility::IEncryptionState::*)(::Array<uint8_t>*, int&, int&, int)>(&EncryptionUtility::IEncryptionState::EncryptData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::IEncryptionState*), "EncryptData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::IEncryptionState::TryDecryptData
// Il2CppName: TryDecryptData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EncryptionUtility::IEncryptionState::*)(::Array<uint8_t>*, int&, int&)>(&EncryptionUtility::IEncryptionState::TryDecryptData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::IEncryptionState*), "TryDecryptData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility/EncryptionState
#include "GlobalNamespace/EncryptionUtility_EncryptionState.hpp"
// Including type: System.Collections.Concurrent.ConcurrentQueue`1
#include "System/Collections/Concurrent/ConcurrentQueue_1.hpp"
// Including type: Org.BouncyCastle.Crypto.Macs.HMac
#include "Org/BouncyCastle/Crypto/Macs/HMac.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kReceivedSequencNumBufferLength
int GlobalNamespace::EncryptionUtility::EncryptionState::_get_kReceivedSequencNumBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get_kReceivedSequencNumBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility/EncryptionState", "kReceivedSequencNumBufferLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kReceivedSequencNumBufferLength
void GlobalNamespace::EncryptionUtility::EncryptionState::_set_kReceivedSequencNumBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set_kReceivedSequencNumBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility/EncryptionState", "kReceivedSequencNumBufferLength", value));
}
// Autogenerated method: EncryptionUtility/EncryptionState.get_isValid
bool GlobalNamespace::EncryptionUtility::EncryptionState::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::get_isValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EncryptionUtility/EncryptionState.EncryptData
void GlobalNamespace::EncryptionUtility::EncryptionState::EncryptData(::Array<uint8_t>* data, int& offset, int& length, int extraPrefixBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::EncryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(extraPrefixBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, offset, length, extraPrefixBytes);
}
// Autogenerated method: EncryptionUtility/EncryptionState.TryDecryptData
bool GlobalNamespace::EncryptionUtility::EncryptionState::TryDecryptData(::Array<uint8_t>* data, int& offset, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::TryDecryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDecryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated method: EncryptionUtility/EncryptionState.ComputeSendMac
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::ComputeSendMac(::Array<uint8_t>* data, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::ComputeSendMac");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeSendMac", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, count);
}
// Autogenerated method: EncryptionUtility/EncryptionState.ComputeReceiveMac
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::ComputeReceiveMac(::Array<uint8_t>* data, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::ComputeReceiveMac");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeReceiveMac", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, count);
}
// Autogenerated method: EncryptionUtility/EncryptionState.IsValidSequenceNum
bool GlobalNamespace::EncryptionUtility::EncryptionState::IsValidSequenceNum(uint sequenceNum) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::IsValidSequenceNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidSequenceNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceNum)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceNum);
}
// Autogenerated method: EncryptionUtility/EncryptionState.PutSequenceNum
bool GlobalNamespace::EncryptionUtility::EncryptionState::PutSequenceNum(uint sequenceNum) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::PutSequenceNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutSequenceNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceNum)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceNum);
}
// Autogenerated method: EncryptionUtility/EncryptionState.GetNextSentSequenceNum
uint GlobalNamespace::EncryptionUtility::EncryptionState::GetNextSentSequenceNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::GetNextSentSequenceNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextSentSequenceNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: EncryptionUtility/EncryptionState.MakeSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::MakeSeed(::Array<uint8_t>* baseSeed, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::MakeSeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility/EncryptionState", "MakeSeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseSeed), ::il2cpp_utils::ExtractType(serverSeed), ::il2cpp_utils::ExtractType(clientSeed)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, baseSeed, serverSeed, clientSeed);
}
// Autogenerated method: EncryptionUtility/EncryptionState.PRF
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::PRF(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::PRF");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility/EncryptionState", "PRF", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(seed), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, seed, length);
}
// Autogenerated method: EncryptionUtility/EncryptionState.PRF_Hash
void GlobalNamespace::EncryptionUtility::EncryptionState::PRF_Hash(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int& length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::PRF_Hash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility/EncryptionState", "PRF_Hash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(seed), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, seed, length);
}
// Autogenerated method: EncryptionUtility/EncryptionState.Dispose
void GlobalNamespace::EncryptionUtility::EncryptionState::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EncryptionUtility::EncryptionState::*)()>(&EncryptionUtility::EncryptionState::get_isValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::EncryptData
// Il2CppName: EncryptData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EncryptionUtility::EncryptionState::*)(::Array<uint8_t>*, int&, int&, int)>(&EncryptionUtility::EncryptionState::EncryptData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "EncryptData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::TryDecryptData
// Il2CppName: TryDecryptData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EncryptionUtility::EncryptionState::*)(::Array<uint8_t>*, int&, int&)>(&EncryptionUtility::EncryptionState::TryDecryptData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "TryDecryptData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::ComputeSendMac
// Il2CppName: ComputeSendMac
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (EncryptionUtility::EncryptionState::*)(::Array<uint8_t>*, int, int)>(&EncryptionUtility::EncryptionState::ComputeSendMac)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "ComputeSendMac", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::ComputeReceiveMac
// Il2CppName: ComputeReceiveMac
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (EncryptionUtility::EncryptionState::*)(::Array<uint8_t>*, int, int)>(&EncryptionUtility::EncryptionState::ComputeReceiveMac)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "ComputeReceiveMac", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::IsValidSequenceNum
// Il2CppName: IsValidSequenceNum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EncryptionUtility::EncryptionState::*)(uint)>(&EncryptionUtility::EncryptionState::IsValidSequenceNum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "IsValidSequenceNum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::PutSequenceNum
// Il2CppName: PutSequenceNum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EncryptionUtility::EncryptionState::*)(uint)>(&EncryptionUtility::EncryptionState::PutSequenceNum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "PutSequenceNum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::GetNextSentSequenceNum
// Il2CppName: GetNextSentSequenceNum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (EncryptionUtility::EncryptionState::*)()>(&EncryptionUtility::EncryptionState::GetNextSentSequenceNum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "GetNextSentSequenceNum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EncryptionUtility::EncryptionState::*)(::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&EncryptionUtility::EncryptionState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EncryptionUtility::EncryptionState::*)(::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool)>(&EncryptionUtility::EncryptionState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::MakeSeed
// Il2CppName: MakeSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&EncryptionUtility::EncryptionState::MakeSeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "MakeSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::PRF
// Il2CppName: PRF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, ::Array<uint8_t>*, int)>(&EncryptionUtility::EncryptionState::PRF)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "PRF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::PRF_Hash
// Il2CppName: PRF_Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, ::Array<uint8_t>*, int&)>(&EncryptionUtility::EncryptionState::PRF_Hash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "PRF_Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::EncryptionState::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EncryptionUtility::EncryptionState::*)()>(&EncryptionUtility::EncryptionState::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::EncryptionState*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility/<>c__DisplayClass18_0
#include "GlobalNamespace/EncryptionUtility_--c__DisplayClass18_0.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EncryptionUtility/<>c__DisplayClass18_0.<CreateEncryptionStateAsync>b__0
GlobalNamespace::EncryptionUtility::IEncryptionState* GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::$CreateEncryptionStateAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::<CreateEncryptionStateAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateEncryptionStateAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EncryptionUtility::IEncryptionState*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EncryptionUtility::$$c__DisplayClass18_0::$CreateEncryptionStateAsync$b__0
// Il2CppName: <CreateEncryptionStateAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EncryptionUtility::IEncryptionState* (EncryptionUtility::$$c__DisplayClass18_0::*)()>(&EncryptionUtility::$$c__DisplayClass18_0::$CreateEncryptionStateAsync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::$$c__DisplayClass18_0*), "<CreateEncryptionStateAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EncryptionUtility::$$c__DisplayClass18_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EncryptionUtility::$$c__DisplayClass18_0::*)()>(&EncryptionUtility::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EncryptionUtility::$$c__DisplayClass18_0::*)()>(&EncryptionUtility::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EncryptionUtility::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EntitlementsStatus
#include "GlobalNamespace/EntitlementsStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus Unknown
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus Unknown
void GlobalNamespace::EntitlementsStatus::_set_Unknown(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus NotOwned
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_NotOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_NotOwned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "NotOwned"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus NotOwned
void GlobalNamespace::EntitlementsStatus::_set_NotOwned(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_NotOwned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "NotOwned", value));
}
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus NotDownloaded
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_NotDownloaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_NotDownloaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "NotDownloaded"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus NotDownloaded
void GlobalNamespace::EntitlementsStatus::_set_NotDownloaded(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_NotDownloaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "NotDownloaded", value));
}
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus Ok
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_Ok");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "Ok"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus Ok
void GlobalNamespace::EntitlementsStatus::_set_Ok(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_Ok");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "Ok", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayRpcManager
#include "GlobalNamespace/GameplayRpcManager.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: GameplayRpcManager/SetGameplaySceneSyncFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneSyncFinishedRpc.hpp"
// Including type: GameplayRpcManager/SetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneReadyRpc.hpp"
// Including type: GameplayRpcManager/GetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySceneReadyRpc.hpp"
// Including type: GameplayRpcManager/SetPlayerDidConnectLateRpc
#include "GlobalNamespace/GameplayRpcManager_SetPlayerDidConnectLateRpc.hpp"
// Including type: GameplayRpcManager/SetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySongReadyRpc.hpp"
// Including type: GameplayRpcManager/GetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySongReadyRpc.hpp"
// Including type: GameplayRpcManager/SetSongStartTimeRpc
#include "GlobalNamespace/GameplayRpcManager_SetSongStartTimeRpc.hpp"
// Including type: GameplayRpcManager/NoteCutRpc
#include "GlobalNamespace/GameplayRpcManager_NoteCutRpc.hpp"
// Including type: GameplayRpcManager/NoteMissedRpc
#include "GlobalNamespace/GameplayRpcManager_NoteMissedRpc.hpp"
// Including type: GameplayRpcManager/LevelFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_LevelFinishedRpc.hpp"
// Including type: GameplayRpcManager/ReturnToMenuRpc
#include "GlobalNamespace/GameplayRpcManager_ReturnToMenuRpc.hpp"
// Including type: GameplayRpcManager/EndLevelEarlyRpc
#include "GlobalNamespace/GameplayRpcManager_EndLevelEarlyRpc.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: RpcHandler`1
#include "GlobalNamespace/RpcHandler_1.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kGameplayState
::Il2CppString* GlobalNamespace::GameplayRpcManager::_get_kGameplayState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_kGameplayState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "GameplayRpcManager", "kGameplayState"));
}
// Autogenerated static field setter
// Set static field: static private System.String kGameplayState
void GlobalNamespace::GameplayRpcManager::_set_kGameplayState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_kGameplayState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager", "kGameplayState", value));
}
// Autogenerated method: GameplayRpcManager.get_enabled
bool GlobalNamespace::GameplayRpcManager::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::get_enabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.set_enabled
void GlobalNamespace::GameplayRpcManager::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::set_enabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.Dispose
void GlobalNamespace::GameplayRpcManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.add_setGameplaySceneSyncFinishedEvent
void GlobalNamespace::GameplayRpcManager::add_setGameplaySceneSyncFinishedEvent(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setGameplaySceneSyncFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setGameplaySceneSyncFinishedEvent
void GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.SetGameplaySceneSyncFinished
void GlobalNamespace::GameplayRpcManager::SetGameplaySceneSyncFinished(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetGameplaySceneSyncFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySceneSyncFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.InvokeSetGameplaySceneSyncFinishCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneSyncFinishCallback(::Il2CppString* userId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStart, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneSyncFinishCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetGameplaySceneSyncFinishCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(playersAtGameStart), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, playersAtGameStart, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.add_setGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::add_setGameplaySceneReadyEvent(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneReadyEvent(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.SetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::SetGameplaySceneReady(GlobalNamespace::PlayerSpecificSettingsNetSerializable* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetGameplaySceneReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerSpecificSettings);
}
// Autogenerated method: GameplayRpcManager.InvokeSetGameplaySceneReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneReadyCallback(::Il2CppString* userId, GlobalNamespace::PlayerSpecificSettingsNetSerializable* playerSpecificSettingsNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetGameplaySceneReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(playerSpecificSettingsNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, playerSpecificSettingsNetSerializable);
}
// Autogenerated method: GameplayRpcManager.add_getGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::add_getGameplaySceneReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_getGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_getGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_getGameplaySceneReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_getGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.GetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::GetGameplaySceneReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::GetGameplaySceneReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeGetGameplaySceneReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeGetGameplaySceneReadyCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeGetGameplaySceneReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetGameplaySceneReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.add_setPlayerDidConnectLateEvent
void GlobalNamespace::GameplayRpcManager::add_setPlayerDidConnectLateEvent(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setPlayerDidConnectLateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setPlayerDidConnectLateEvent
void GlobalNamespace::GameplayRpcManager::remove_setPlayerDidConnectLateEvent(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setPlayerDidConnectLateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.SetPlayerDidConnectLate
void GlobalNamespace::GameplayRpcManager::SetPlayerDidConnectLate(::Il2CppString* usedId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetPlayerDidConnectLate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerDidConnectLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(usedId), ::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, usedId, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.InvokeSetPlayerDidConnectLate
void GlobalNamespace::GameplayRpcManager::InvokeSetPlayerDidConnectLate(::Il2CppString* userId, ::Il2CppString* failedUserId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetPlayerDidConnectLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetPlayerDidConnectLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(failedUserId), ::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, failedUserId, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.add_setGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::add_setGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_setGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.SetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::SetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetGameplaySongReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeSetGameplaySongReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySongReadyCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySongReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetGameplaySongReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.add_getGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::add_getGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_getGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_getGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_getGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_getGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.GetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::GetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::GetGameplaySongReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeGetGameplayLevelReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeGetGameplayLevelReadyCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeGetGameplayLevelReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetGameplayLevelReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.add_setSongStartTimeEvent
void GlobalNamespace::GameplayRpcManager::add_setSongStartTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setSongStartTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setSongStartTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setSongStartTimeEvent
void GlobalNamespace::GameplayRpcManager::remove_setSongStartTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setSongStartTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setSongStartTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.SetSongStartTime
void GlobalNamespace::GameplayRpcManager::SetSongStartTime(float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetSongStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSongStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTime);
}
// Autogenerated method: GameplayRpcManager.InvokeSetSongStartTimeCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetSongStartTimeCallback(::Il2CppString* userId, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetSongStartTimeCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetSongStartTimeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, startTime);
}
// Autogenerated method: GameplayRpcManager.add_noteWasCutEvent
void GlobalNamespace::GameplayRpcManager::add_noteWasCutEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_noteWasCutEvent
void GlobalNamespace::GameplayRpcManager::remove_noteWasCutEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.NoteCut
void GlobalNamespace::GameplayRpcManager::NoteCut(float songTime, GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfoNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::NoteCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteCutInfoNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime, noteCutInfoNetSerializable);
}
// Autogenerated method: GameplayRpcManager.InvokeNoteWasCutCallback
void GlobalNamespace::GameplayRpcManager::InvokeNoteWasCutCallback(::Il2CppString* userId, float syncTime, float songTime, GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeNoteWasCutCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeNoteWasCutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, syncTime, songTime, noteCutInfo);
}
// Autogenerated method: GameplayRpcManager.add_noteWasMissedEvent
void GlobalNamespace::GameplayRpcManager::add_noteWasMissedEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_noteWasMissedEvent
void GlobalNamespace::GameplayRpcManager::remove_noteWasMissedEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.NoteMissed
void GlobalNamespace::GameplayRpcManager::NoteMissed(float songTime, GlobalNamespace::NoteMissInfoNetSerializable* noteMissInfoNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::NoteMissed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteMissInfoNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime, noteMissInfoNetSerializable);
}
// Autogenerated method: GameplayRpcManager.InvokeNoteWasMissedCallback
void GlobalNamespace::GameplayRpcManager::InvokeNoteWasMissedCallback(::Il2CppString* userId, float syncTime, float songTime, GlobalNamespace::NoteMissInfoNetSerializable* noteMissInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeNoteWasMissedCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeNoteWasMissedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteMissInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, syncTime, songTime, noteMissInfo);
}
// Autogenerated method: GameplayRpcManager.add_levelFinishedEvent
void GlobalNamespace::GameplayRpcManager::add_levelFinishedEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_levelFinishedEvent
void GlobalNamespace::GameplayRpcManager::remove_levelFinishedEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.LevelFinished
void GlobalNamespace::GameplayRpcManager::LevelFinished(GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::LevelFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, results);
}
// Autogenerated method: GameplayRpcManager.InvokeLevelFinishedCallback
void GlobalNamespace::GameplayRpcManager::InvokeLevelFinishedCallback(::Il2CppString* userId, GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeLevelFinishedCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeLevelFinishedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, results);
}
// Autogenerated method: GameplayRpcManager.add_returnToMenuEvent
void GlobalNamespace::GameplayRpcManager::add_returnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_returnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_returnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_returnToMenuEvent
void GlobalNamespace::GameplayRpcManager::remove_returnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_returnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_returnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.ReturnToMenu
void GlobalNamespace::GameplayRpcManager::ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::ReturnToMenu");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeReturnToMenuCallback
void GlobalNamespace::GameplayRpcManager::InvokeReturnToMenuCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeReturnToMenuCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeReturnToMenuCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.add_levelEndedEarlyEvent
void GlobalNamespace::GameplayRpcManager::add_levelEndedEarlyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_levelEndedEarlyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelEndedEarlyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_levelEndedEarlyEvent
void GlobalNamespace::GameplayRpcManager::remove_levelEndedEarlyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_levelEndedEarlyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelEndedEarlyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.EndLevelEarly
void GlobalNamespace::GameplayRpcManager::EndLevelEarly() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::EndLevelEarly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndLevelEarly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeEndLevelEarlyCallback
void GlobalNamespace::GameplayRpcManager::InvokeEndLevelEarlyCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeEndLevelEarlyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeEndLevelEarlyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Writing MetadataGetter for method: GameplayRpcManager::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayRpcManager::*)()>(&GameplayRpcManager::get_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(bool)>(&GameplayRpcManager::set_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(GlobalNamespace::IMultiplayerSessionManager*)>(&GameplayRpcManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(GlobalNamespace::IMultiplayerSessionManager*)>(&GameplayRpcManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)()>(&GameplayRpcManager::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_setGameplaySceneSyncFinishedEvent
// Il2CppName: add_setGameplaySceneSyncFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&GameplayRpcManager::add_setGameplaySceneSyncFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent
// Il2CppName: remove_setGameplaySceneSyncFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&GameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::SetGameplaySceneSyncFinished
// Il2CppName: SetGameplaySceneSyncFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&GameplayRpcManager::SetGameplaySceneSyncFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "SetGameplaySceneSyncFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeSetGameplaySceneSyncFinishCallback
// Il2CppName: InvokeSetGameplaySceneSyncFinishCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&GameplayRpcManager::InvokeSetGameplaySceneSyncFinishCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeSetGameplaySceneSyncFinishCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_setGameplaySceneReadyEvent
// Il2CppName: add_setGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*)>(&GameplayRpcManager::add_setGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_setGameplaySceneReadyEvent
// Il2CppName: remove_setGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*)>(&GameplayRpcManager::remove_setGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::SetGameplaySceneReady
// Il2CppName: SetGameplaySceneReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&GameplayRpcManager::SetGameplaySceneReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "SetGameplaySceneReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeSetGameplaySceneReadyCallback
// Il2CppName: InvokeSetGameplaySceneReadyCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&GameplayRpcManager::InvokeSetGameplaySceneReadyCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeSetGameplaySceneReadyCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_getGameplaySceneReadyEvent
// Il2CppName: add_getGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::add_getGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_getGameplaySceneReadyEvent
// Il2CppName: remove_getGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::remove_getGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::GetGameplaySceneReady
// Il2CppName: GetGameplaySceneReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)()>(&GameplayRpcManager::GetGameplaySceneReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "GetGameplaySceneReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeGetGameplaySceneReadyCallback
// Il2CppName: InvokeGetGameplaySceneReadyCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*)>(&GameplayRpcManager::InvokeGetGameplaySceneReadyCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeGetGameplaySceneReadyCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_setPlayerDidConnectLateEvent
// Il2CppName: add_setPlayerDidConnectLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&GameplayRpcManager::add_setPlayerDidConnectLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_setPlayerDidConnectLateEvent
// Il2CppName: remove_setPlayerDidConnectLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&GameplayRpcManager::remove_setPlayerDidConnectLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::SetPlayerDidConnectLate
// Il2CppName: SetPlayerDidConnectLate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&GameplayRpcManager::SetPlayerDidConnectLate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "SetPlayerDidConnectLate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeSetPlayerDidConnectLate
// Il2CppName: InvokeSetPlayerDidConnectLate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&GameplayRpcManager::InvokeSetPlayerDidConnectLate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeSetPlayerDidConnectLate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_setGameplaySongReadyEvent
// Il2CppName: add_setGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::add_setGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_setGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_setGameplaySongReadyEvent
// Il2CppName: remove_setGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::remove_setGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_setGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::SetGameplaySongReady
// Il2CppName: SetGameplaySongReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)()>(&GameplayRpcManager::SetGameplaySongReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "SetGameplaySongReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeSetGameplaySongReadyCallback
// Il2CppName: InvokeSetGameplaySongReadyCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*)>(&GameplayRpcManager::InvokeSetGameplaySongReadyCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeSetGameplaySongReadyCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_getGameplaySongReadyEvent
// Il2CppName: add_getGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::add_getGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_getGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_getGameplaySongReadyEvent
// Il2CppName: remove_getGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::remove_getGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_getGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::GetGameplaySongReady
// Il2CppName: GetGameplaySongReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)()>(&GameplayRpcManager::GetGameplaySongReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "GetGameplaySongReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeGetGameplayLevelReadyCallback
// Il2CppName: InvokeGetGameplayLevelReadyCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*)>(&GameplayRpcManager::InvokeGetGameplayLevelReadyCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeGetGameplayLevelReadyCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_setSongStartTimeEvent
// Il2CppName: add_setSongStartTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&GameplayRpcManager::add_setSongStartTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_setSongStartTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_setSongStartTimeEvent
// Il2CppName: remove_setSongStartTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&GameplayRpcManager::remove_setSongStartTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_setSongStartTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::SetSongStartTime
// Il2CppName: SetSongStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(float)>(&GameplayRpcManager::SetSongStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "SetSongStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeSetSongStartTimeCallback
// Il2CppName: InvokeSetSongStartTimeCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, float)>(&GameplayRpcManager::InvokeSetSongStartTimeCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeSetSongStartTimeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*)>(&GameplayRpcManager::add_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*)>(&GameplayRpcManager::remove_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::NoteCut
// Il2CppName: NoteCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(float, GlobalNamespace::NoteCutInfoNetSerializable*)>(&GameplayRpcManager::NoteCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "NoteCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfoNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeNoteWasCutCallback
// Il2CppName: InvokeNoteWasCutCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*)>(&GameplayRpcManager::InvokeNoteWasCutCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeNoteWasCutCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfoNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*)>(&GameplayRpcManager::add_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*)>(&GameplayRpcManager::remove_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::NoteMissed
// Il2CppName: NoteMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(float, GlobalNamespace::NoteMissInfoNetSerializable*)>(&GameplayRpcManager::NoteMissed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "NoteMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteMissInfoNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeNoteWasMissedCallback
// Il2CppName: InvokeNoteWasMissedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*)>(&GameplayRpcManager::InvokeNoteWasMissedCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeNoteWasMissedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteMissInfoNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GameplayRpcManager::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GameplayRpcManager::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::LevelFinished
// Il2CppName: LevelFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(GlobalNamespace::MultiplayerLevelCompletionResults*)>(&GameplayRpcManager::LevelFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "LevelFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeLevelFinishedCallback
// Il2CppName: InvokeLevelFinishedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*)>(&GameplayRpcManager::InvokeLevelFinishedCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeLevelFinishedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_returnToMenuEvent
// Il2CppName: add_returnToMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::add_returnToMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_returnToMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_returnToMenuEvent
// Il2CppName: remove_returnToMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::remove_returnToMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_returnToMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::ReturnToMenu
// Il2CppName: ReturnToMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)()>(&GameplayRpcManager::ReturnToMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "ReturnToMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeReturnToMenuCallback
// Il2CppName: InvokeReturnToMenuCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*)>(&GameplayRpcManager::InvokeReturnToMenuCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeReturnToMenuCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::add_levelEndedEarlyEvent
// Il2CppName: add_levelEndedEarlyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::add_levelEndedEarlyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "add_levelEndedEarlyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::remove_levelEndedEarlyEvent
// Il2CppName: remove_levelEndedEarlyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&GameplayRpcManager::remove_levelEndedEarlyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "remove_levelEndedEarlyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::EndLevelEarly
// Il2CppName: EndLevelEarly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)()>(&GameplayRpcManager::EndLevelEarly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "EndLevelEarly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayRpcManager::InvokeEndLevelEarlyCallback
// Il2CppName: InvokeEndLevelEarlyCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::*)(::Il2CppString*)>(&GameplayRpcManager::InvokeEndLevelEarlyCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager*), "InvokeEndLevelEarlyCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/RpcType
#include "GlobalNamespace/GameplayRpcManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetGameplaySceneSyncFinish
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneSyncFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneSyncFinish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetGameplaySceneSyncFinish"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetGameplaySceneSyncFinish
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneSyncFinish(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneSyncFinish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetGameplaySceneSyncFinish", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetGameplaySceneReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetGameplaySceneReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetGameplaySceneReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType GetGameplaySceneReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySceneReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySceneReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "GetGameplaySceneReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType GetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySceneReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySceneReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "GetGameplaySceneReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetActivePlayerFailedToConnect
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetActivePlayerFailedToConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetActivePlayerFailedToConnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetActivePlayerFailedToConnect"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetActivePlayerFailedToConnect
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetActivePlayerFailedToConnect(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetActivePlayerFailedToConnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetActivePlayerFailedToConnect", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetGameplaySongReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySongReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetGameplaySongReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySongReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySongReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetGameplaySongReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType GetGameplaySongReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySongReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "GetGameplaySongReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType GetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySongReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySongReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "GetGameplaySongReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetSongStartTime
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetSongStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetSongStartTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetSongStartTime"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetSongStartTime
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetSongStartTime(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetSongStartTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetSongStartTime", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType NoteCut
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteCut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "NoteCut"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType NoteCut
void GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteCut(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteCut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "NoteCut", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType NoteMissed
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteMissed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteMissed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "NoteMissed"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType NoteMissed
void GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteMissed(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteMissed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "NoteMissed", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType LevelFinished
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_LevelFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_LevelFinished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "LevelFinished"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType LevelFinished
void GlobalNamespace::GameplayRpcManager::RpcType::_set_LevelFinished(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_LevelFinished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "LevelFinished", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType ReturnToMenu
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_ReturnToMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "ReturnToMenu"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType ReturnToMenu
void GlobalNamespace::GameplayRpcManager::RpcType::_set_ReturnToMenu(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_ReturnToMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "ReturnToMenu", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType EndLevelEarly
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_EndLevelEarly() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_EndLevelEarly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "EndLevelEarly"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType EndLevelEarly
void GlobalNamespace::GameplayRpcManager::RpcType::_set_EndLevelEarly(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_EndLevelEarly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "EndLevelEarly", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayRpcManager/SetGameplaySceneSyncFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneSyncFinishedRpc.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::SetGameplaySceneSyncFinishedRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetGameplaySceneSyncFinishedRpc::*)()>(&GameplayRpcManager::SetGameplaySceneSyncFinishedRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetGameplaySceneSyncFinishedRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetGameplaySceneSyncFinishedRpc::*)()>(&GameplayRpcManager::SetGameplaySceneSyncFinishedRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetGameplaySceneSyncFinishedRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/SetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneReadyRpc.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::SetGameplaySceneReadyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetGameplaySceneReadyRpc::*)()>(&GameplayRpcManager::SetGameplaySceneReadyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetGameplaySceneReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetGameplaySceneReadyRpc::*)()>(&GameplayRpcManager::SetGameplaySceneReadyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetGameplaySceneReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/GetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySceneReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::GetGameplaySceneReadyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::GetGameplaySceneReadyRpc::*)()>(&GameplayRpcManager::GetGameplaySceneReadyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::GetGameplaySceneReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::GetGameplaySceneReadyRpc::*)()>(&GameplayRpcManager::GetGameplaySceneReadyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::GetGameplaySceneReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayRpcManager/SetPlayerDidConnectLateRpc
#include "GlobalNamespace/GameplayRpcManager_SetPlayerDidConnectLateRpc.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::SetPlayerDidConnectLateRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetPlayerDidConnectLateRpc::*)()>(&GameplayRpcManager::SetPlayerDidConnectLateRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetPlayerDidConnectLateRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetPlayerDidConnectLateRpc::*)()>(&GameplayRpcManager::SetPlayerDidConnectLateRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetPlayerDidConnectLateRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/SetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySongReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::SetGameplaySongReadyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetGameplaySongReadyRpc::*)()>(&GameplayRpcManager::SetGameplaySongReadyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetGameplaySongReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetGameplaySongReadyRpc::*)()>(&GameplayRpcManager::SetGameplaySongReadyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetGameplaySongReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/GetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySongReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::GetGameplaySongReadyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::GetGameplaySongReadyRpc::*)()>(&GameplayRpcManager::GetGameplaySongReadyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::GetGameplaySongReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::GetGameplaySongReadyRpc::*)()>(&GameplayRpcManager::GetGameplaySongReadyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::GetGameplaySongReadyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/SetSongStartTimeRpc
#include "GlobalNamespace/GameplayRpcManager_SetSongStartTimeRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::SetSongStartTimeRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetSongStartTimeRpc::*)()>(&GameplayRpcManager::SetSongStartTimeRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetSongStartTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::SetSongStartTimeRpc::*)()>(&GameplayRpcManager::SetSongStartTimeRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::SetSongStartTimeRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/NoteCutRpc
#include "GlobalNamespace/GameplayRpcManager_NoteCutRpc.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::NoteCutRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::NoteCutRpc::*)()>(&GameplayRpcManager::NoteCutRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::NoteCutRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::NoteCutRpc::*)()>(&GameplayRpcManager::NoteCutRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::NoteCutRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/NoteMissedRpc
#include "GlobalNamespace/GameplayRpcManager_NoteMissedRpc.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::NoteMissedRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::NoteMissedRpc::*)()>(&GameplayRpcManager::NoteMissedRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::NoteMissedRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::NoteMissedRpc::*)()>(&GameplayRpcManager::NoteMissedRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::NoteMissedRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/LevelFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_LevelFinishedRpc.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::LevelFinishedRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::LevelFinishedRpc::*)()>(&GameplayRpcManager::LevelFinishedRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::LevelFinishedRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::LevelFinishedRpc::*)()>(&GameplayRpcManager::LevelFinishedRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::LevelFinishedRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/ReturnToMenuRpc
#include "GlobalNamespace/GameplayRpcManager_ReturnToMenuRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::ReturnToMenuRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::ReturnToMenuRpc::*)()>(&GameplayRpcManager::ReturnToMenuRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::ReturnToMenuRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::ReturnToMenuRpc::*)()>(&GameplayRpcManager::ReturnToMenuRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::ReturnToMenuRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/EndLevelEarlyRpc
#include "GlobalNamespace/GameplayRpcManager_EndLevelEarlyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayRpcManager::EndLevelEarlyRpc::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::EndLevelEarlyRpc::*)()>(&GameplayRpcManager::EndLevelEarlyRpc::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::EndLevelEarlyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayRpcManager::EndLevelEarlyRpc::*)()>(&GameplayRpcManager::EndLevelEarlyRpc::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayRpcManager::EndLevelEarlyRpc*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayServerConfiguration.Equals
bool GlobalNamespace::GameplayServerConfiguration::Equals(GlobalNamespace::GameplayServerConfiguration other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: GameplayServerConfiguration.Serialize
void GlobalNamespace::GameplayServerConfiguration::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: GameplayServerConfiguration.CreateFromSerializedData
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::GameplayServerConfiguration::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(*this, ___internal__method, reader);
}
// Autogenerated method: GameplayServerConfiguration.Deserialize
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::GameplayServerConfiguration::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerConfiguration", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: GameplayServerConfiguration.Equals
bool GlobalNamespace::GameplayServerConfiguration::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: GameplayServerConfiguration.GetHashCode
int GlobalNamespace::GameplayServerConfiguration::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: GameplayServerConfiguration.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::GameplayServerConfiguration& l, const GlobalNamespace::GameplayServerConfiguration& r) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerConfiguration", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, r);
}
// Autogenerated method: GameplayServerConfiguration.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::GameplayServerConfiguration& l, const GlobalNamespace::GameplayServerConfiguration& r) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerConfiguration", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, r);
}
// Writing MetadataGetter for method: GameplayServerConfiguration::GameplayServerConfiguration
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerConfiguration::*)(GlobalNamespace::BeatmapDifficultyMask, GlobalNamespace::GameplayModifierMask, GlobalNamespace::SongPackMask)>(&GameplayServerConfiguration::GameplayServerConfiguration<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerConfiguration::*)(GlobalNamespace::BeatmapDifficultyMask, GlobalNamespace::GameplayModifierMask, GlobalNamespace::SongPackMask)>(&GameplayServerConfiguration::GameplayServerConfiguration<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerConfiguration::*)(GlobalNamespace::GameplayServerConfiguration)>(&GameplayServerConfiguration::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerConfiguration::*)(LiteNetLib::Utils::NetDataWriter*)>(&GameplayServerConfiguration::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (GameplayServerConfiguration::*)(LiteNetLib::Utils::NetDataReader*)>(&GameplayServerConfiguration::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (*)(LiteNetLib::Utils::NetDataReader*)>(&GameplayServerConfiguration::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerConfiguration::*)(::Il2CppObject*)>(&GameplayServerConfiguration::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GameplayServerConfiguration::*)()>(&GameplayServerConfiguration::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::GameplayServerConfiguration&, const GlobalNamespace::GameplayServerConfiguration&)>(&GameplayServerConfiguration::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::GameplayServerConfiguration&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::GameplayServerConfiguration&>()});
  }
};
// Writing MetadataGetter for method: GameplayServerConfiguration::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::GameplayServerConfiguration&, const GlobalNamespace::GameplayServerConfiguration&)>(&GameplayServerConfiguration::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerConfiguration), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::GameplayServerConfiguration&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::GameplayServerConfiguration&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayServerFilter
#include "GlobalNamespace/GameplayServerFilter.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayServerFilter.get_defaultFilter
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::get_defaultFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::get_defaultFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerFilter", "get_defaultFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: GameplayServerFilter.Equals
bool GlobalNamespace::GameplayServerFilter::Equals(GlobalNamespace::GameplayServerFilter& other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: GameplayServerFilter.Equals
bool GlobalNamespace::GameplayServerFilter::Equals_(GlobalNamespace::GameplayServerFilter other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: GameplayServerFilter.Serialize
void GlobalNamespace::GameplayServerFilter::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: GameplayServerFilter.Deserialize
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerFilter", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: GameplayServerFilter.CreateFromSerializedData
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, reader);
}
// Autogenerated method: GameplayServerFilter.IncludesServerName
bool GlobalNamespace::GameplayServerFilter::IncludesServerName(::Il2CppString* lowerInvariantName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::IncludesServerName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IncludesServerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowerInvariantName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, lowerInvariantName);
}
// Autogenerated method: GameplayServerFilter.IncludesPassword
bool GlobalNamespace::GameplayServerFilter::IncludesPassword(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::IncludesPassword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IncludesPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, password);
}
// Autogenerated method: GameplayServerFilter.IncludesPlayerCount
bool GlobalNamespace::GameplayServerFilter::IncludesPlayerCount(int currentPlayerCount, int maxPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::IncludesPlayerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IncludesPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPlayerCount), ::il2cpp_utils::ExtractType(maxPlayerCount)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, currentPlayerCount, maxPlayerCount);
}
// Autogenerated method: GameplayServerFilter.IncludesConfiguration
bool GlobalNamespace::GameplayServerFilter::IncludesConfiguration(GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::IncludesConfiguration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IncludesConfiguration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, configuration);
}
// Autogenerated method: GameplayServerFilter.WithIncludePasswordProtected
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::WithIncludePasswordProtected(bool includePasswordProtected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::WithIncludePasswordProtected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithIncludePasswordProtected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includePasswordProtected)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, includePasswordProtected);
}
// Autogenerated method: GameplayServerFilter.WithIncludeEmpty
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::WithIncludeEmpty(bool includeEmpty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::WithIncludeEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithIncludeEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeEmpty)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, includeEmpty);
}
// Autogenerated method: GameplayServerFilter.WithIncludeFull
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::WithIncludeFull(bool includeFull) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::WithIncludeFull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithIncludeFull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(includeFull)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, includeFull);
}
// Autogenerated method: GameplayServerFilter.WithFilterNames
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::WithFilterNames(bool filterNames, ::Il2CppString* nameFilter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::WithFilterNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithFilterNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filterNames), ::il2cpp_utils::ExtractType(nameFilter)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, filterNames, nameFilter);
}
// Autogenerated method: GameplayServerFilter.WithFilterDifficulties
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::WithFilterDifficulties(bool filterDifficulties, GlobalNamespace::BeatmapDifficultyMask difficultyFilter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::WithFilterDifficulties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithFilterDifficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filterDifficulties), ::il2cpp_utils::ExtractType(difficultyFilter)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, filterDifficulties, difficultyFilter);
}
// Autogenerated method: GameplayServerFilter.WithFilterModifiers
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::WithFilterModifiers(bool filterModifiers, GlobalNamespace::GameplayModifierMask modifierFilter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::WithFilterModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithFilterModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filterModifiers), ::il2cpp_utils::ExtractType(modifierFilter)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, filterModifiers, modifierFilter);
}
// Autogenerated method: GameplayServerFilter.WithFilterSongPacks
GlobalNamespace::GameplayServerFilter GlobalNamespace::GameplayServerFilter::WithFilterSongPacks(bool filterSongPacks, GlobalNamespace::SongPackMask songPackFilter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::WithFilterSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithFilterSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filterSongPacks), ::il2cpp_utils::ExtractType(songPackFilter)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(*this, ___internal__method, filterSongPacks, songPackFilter);
}
// Autogenerated method: GameplayServerFilter.IEquatableByReference<GameplayServerFilter>.Equals
bool GlobalNamespace::GameplayServerFilter::IEquatableByReference$GameplayServerFilter$_Equals(GlobalNamespace::GameplayServerFilter& other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::IEquatableByReference<GameplayServerFilter>.Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IEquatableByReference<GameplayServerFilter>.Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: GameplayServerFilter.Equals
bool GlobalNamespace::GameplayServerFilter::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: GameplayServerFilter.GetHashCode
int GlobalNamespace::GameplayServerFilter::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFilter::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: GameplayServerFilter::GameplayServerFilter
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFilter::*)(bool, bool, bool, bool, ::Il2CppString*, bool, GlobalNamespace::BeatmapDifficultyMask, bool, GlobalNamespace::GameplayModifierMask, bool, GlobalNamespace::SongPackMask)>(&GameplayServerFilter::GameplayServerFilter<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFilter::*)(bool, bool, bool, bool, ::Il2CppString*, bool, GlobalNamespace::BeatmapDifficultyMask, bool, GlobalNamespace::GameplayModifierMask, bool, GlobalNamespace::SongPackMask)>(&GameplayServerFilter::GameplayServerFilter<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::get_defaultFilter
// Il2CppName: get_defaultFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (*)()>(&GameplayServerFilter::get_defaultFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "get_defaultFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(GlobalNamespace::GameplayServerFilter&)>(&GameplayServerFilter::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter&>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::Equals_
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(GlobalNamespace::GameplayServerFilter)>(&GameplayServerFilter::Equals_)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFilter::*)(LiteNetLib::Utils::NetDataWriter*)>(&GameplayServerFilter::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (*)(LiteNetLib::Utils::NetDataReader*)>(&GameplayServerFilter::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(LiteNetLib::Utils::NetDataReader*)>(&GameplayServerFilter::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::IncludesServerName
// Il2CppName: IncludesServerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(::Il2CppString*)>(&GameplayServerFilter::IncludesServerName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "IncludesServerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::IncludesPassword
// Il2CppName: IncludesPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(::Il2CppString*)>(&GameplayServerFilter::IncludesPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "IncludesPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::IncludesPlayerCount
// Il2CppName: IncludesPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(int, int)>(&GameplayServerFilter::IncludesPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "IncludesPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::IncludesConfiguration
// Il2CppName: IncludesConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(GlobalNamespace::GameplayServerConfiguration)>(&GameplayServerFilter::IncludesConfiguration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "IncludesConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::WithIncludePasswordProtected
// Il2CppName: WithIncludePasswordProtected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(bool)>(&GameplayServerFilter::WithIncludePasswordProtected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "WithIncludePasswordProtected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::WithIncludeEmpty
// Il2CppName: WithIncludeEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(bool)>(&GameplayServerFilter::WithIncludeEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "WithIncludeEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::WithIncludeFull
// Il2CppName: WithIncludeFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(bool)>(&GameplayServerFilter::WithIncludeFull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "WithIncludeFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::WithFilterNames
// Il2CppName: WithFilterNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(bool, ::Il2CppString*)>(&GameplayServerFilter::WithFilterNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "WithFilterNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::WithFilterDifficulties
// Il2CppName: WithFilterDifficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(bool, GlobalNamespace::BeatmapDifficultyMask)>(&GameplayServerFilter::WithFilterDifficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "WithFilterDifficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::WithFilterModifiers
// Il2CppName: WithFilterModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(bool, GlobalNamespace::GameplayModifierMask)>(&GameplayServerFilter::WithFilterModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "WithFilterModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::WithFilterSongPacks
// Il2CppName: WithFilterSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (GameplayServerFilter::*)(bool, GlobalNamespace::SongPackMask)>(&GameplayServerFilter::WithFilterSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "WithFilterSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::IEquatableByReference$GameplayServerFilter$_Equals
// Il2CppName: IEquatableByReference<GameplayServerFilter>.Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(GlobalNamespace::GameplayServerFilter&)>(&GameplayServerFilter::IEquatableByReference$GameplayServerFilter$_Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "IEquatableByReference<GameplayServerFilter>.Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter&>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameplayServerFilter::*)(::Il2CppObject*)>(&GameplayServerFilter::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFilter::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GameplayServerFilter::*)()>(&GameplayServerFilter::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFilter), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayServerFiniteStateMachine
#include "GlobalNamespace/GameplayServerFiniteStateMachine.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayServerFiniteStateMachine.add_onGameStateChanged
void GlobalNamespace::GameplayServerFiniteStateMachine::add_onGameStateChanged(System::Action_1<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::add_onGameStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onGameStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.remove_onGameStateChanged
void GlobalNamespace::GameplayServerFiniteStateMachine::remove_onGameStateChanged(System::Action_1<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::remove_onGameStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onGameStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.Dispose
void GlobalNamespace::GameplayServerFiniteStateMachine::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameplayServerFiniteStateMachine::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFiniteStateMachine::*)(MasterServer::ITimeProvider*, GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::GameplayServerConfiguration, bool, GlobalNamespace::IServerBeatmapProvider*)>(&GameplayServerFiniteStateMachine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFiniteStateMachine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IServerBeatmapProvider*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFiniteStateMachine::*)(MasterServer::ITimeProvider*, GlobalNamespace::IMultiplayerSessionManager*, GlobalNamespace::GameplayServerConfiguration, bool, GlobalNamespace::IServerBeatmapProvider*)>(&GameplayServerFiniteStateMachine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFiniteStateMachine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::ITimeProvider*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSessionManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IServerBeatmapProvider*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFiniteStateMachine::add_onGameStateChanged
// Il2CppName: add_onGameStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFiniteStateMachine::*)(System::Action_1<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>*)>(&GameplayServerFiniteStateMachine::add_onGameStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFiniteStateMachine*), "add_onGameStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFiniteStateMachine::remove_onGameStateChanged
// Il2CppName: remove_onGameStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFiniteStateMachine::*)(System::Action_1<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>*)>(&GameplayServerFiniteStateMachine::remove_onGameStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFiniteStateMachine*), "remove_onGameStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>*>()});
  }
};
// Writing MetadataGetter for method: GameplayServerFiniteStateMachine::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayServerFiniteStateMachine::*)()>(&GameplayServerFiniteStateMachine::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayServerFiniteStateMachine*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayServerFiniteStateMachine/GameStateType
#include "GlobalNamespace/GameplayServerFiniteStateMachine.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayServerFiniteStateMachine/GameStateType EmptyServer
GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_EmptyServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_EmptyServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>("", "GameplayServerFiniteStateMachine/GameStateType", "EmptyServer"));
}
// Autogenerated static field setter
// Set static field: static public GameplayServerFiniteStateMachine/GameStateType EmptyServer
void GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_EmptyServer(GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_EmptyServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayServerFiniteStateMachine/GameStateType", "EmptyServer", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayServerFiniteStateMachine/GameStateType SelectingLevel
GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_SelectingLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_SelectingLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>("", "GameplayServerFiniteStateMachine/GameStateType", "SelectingLevel"));
}
// Autogenerated static field setter
// Set static field: static public GameplayServerFiniteStateMachine/GameStateType SelectingLevel
void GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_SelectingLevel(GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_SelectingLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayServerFiniteStateMachine/GameStateType", "SelectingLevel", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayServerFiniteStateMachine/GameStateType StartingLevel
GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_StartingLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_StartingLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>("", "GameplayServerFiniteStateMachine/GameStateType", "StartingLevel"));
}
// Autogenerated static field setter
// Set static field: static public GameplayServerFiniteStateMachine/GameStateType StartingLevel
void GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_StartingLevel(GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_StartingLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayServerFiniteStateMachine/GameStateType", "StartingLevel", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayServerFiniteStateMachine/GameStateType RunningLevel
GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_RunningLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_get_RunningLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType>("", "GameplayServerFiniteStateMachine/GameStateType", "RunningLevel"));
}
// Autogenerated static field setter
// Set static field: static public GameplayServerFiniteStateMachine/GameStateType RunningLevel
void GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_RunningLevel(GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::GameStateType::_set_RunningLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayServerFiniteStateMachine/GameStateType", "RunningLevel", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HealthCheckService
#include "GlobalNamespace/HealthCheckService.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Net.HttpListener
#include "System/Net/HttpListener.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kTimeoutLengthMs
int GlobalNamespace::HealthCheckService::_get_kTimeoutLengthMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_get_kTimeoutLengthMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "HealthCheckService", "kTimeoutLengthMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTimeoutLengthMs
void GlobalNamespace::HealthCheckService::_set_kTimeoutLengthMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_set_kTimeoutLengthMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HealthCheckService", "kTimeoutLengthMs", value));
}
// Autogenerated method: HealthCheckService.Dispose
void GlobalNamespace::HealthCheckService::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthCheckService.PollUpdate
void GlobalNamespace::HealthCheckService::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthCheckService.Run
void GlobalNamespace::HealthCheckService::Run() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HealthCheckService::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthCheckService::*)(int)>(&HealthCheckService::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthCheckService*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthCheckService::*)(int)>(&HealthCheckService::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthCheckService*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HealthCheckService::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthCheckService::*)()>(&HealthCheckService::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthCheckService*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthCheckService::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthCheckService::*)()>(&HealthCheckService::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthCheckService*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthCheckService::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthCheckService::*)()>(&HealthCheckService::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthCheckService*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAuthenticationTokenProvider.GetAuthenticationToken
System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>* GlobalNamespace::IAuthenticationTokenProvider::GetAuthenticationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAuthenticationTokenProvider::GetAuthenticationToken");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAuthenticationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>*, false>(this, ___internal__method);
}
// Autogenerated method: IAuthenticationTokenProvider.get_hashedUserId
::Il2CppString* GlobalNamespace::IAuthenticationTokenProvider::get_hashedUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAuthenticationTokenProvider::get_hashedUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hashedUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IAuthenticationTokenProvider::GetAuthenticationToken
// Il2CppName: GetAuthenticationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>* (IAuthenticationTokenProvider::*)()>(&IAuthenticationTokenProvider::GetAuthenticationToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAuthenticationTokenProvider*), "GetAuthenticationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IAuthenticationTokenProvider::get_hashedUserId
// Il2CppName: get_hashedUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IAuthenticationTokenProvider::*)()>(&IAuthenticationTokenProvider::get_hashedUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAuthenticationTokenProvider*), "get_hashedUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ICPUMonitor
#include "GlobalNamespace/ICPUMonitor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICPUMonitor.get_utilization
float GlobalNamespace::ICPUMonitor::get_utilization() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICPUMonitor::get_utilization");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_utilization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ICPUMonitor.PollUpdate
void GlobalNamespace::ICPUMonitor::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICPUMonitor::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ICPUMonitor::get_utilization
// Il2CppName: get_utilization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ICPUMonitor::*)()>(&ICPUMonitor::get_utilization)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICPUMonitor*), "get_utilization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICPUMonitor::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICPUMonitor::*)()>(&ICPUMonitor::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICPUMonitor*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ICertificateEncryptionProvider
#include "GlobalNamespace/ICertificateEncryptionProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICertificateEncryptionProvider.SignData
::Array<uint8_t>* GlobalNamespace::ICertificateEncryptionProvider::SignData(::Array<uint8_t>* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICertificateEncryptionProvider::SignData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SignData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, length);
}
// Writing MetadataGetter for method: ICertificateEncryptionProvider::SignData
// Il2CppName: SignData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ICertificateEncryptionProvider::*)(::Array<uint8_t>*, int, int)>(&ICertificateEncryptionProvider::SignData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICertificateEncryptionProvider*), "SignData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ICertificateValidator
#include "GlobalNamespace/ICertificateValidator.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICertificateValidator.ValidateCertificateChain
void GlobalNamespace::ICertificateValidator::ValidateCertificateChain(GlobalNamespace::MasterServerEndPoint* endPoint, System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::Array<::Array<uint8_t>*>* certificateChain) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICertificateValidator::ValidateCertificateChain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificateChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(certificateChain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, certificate, certificateChain);
}
// Writing MetadataGetter for method: ICertificateValidator::ValidateCertificateChain
// Il2CppName: ValidateCertificateChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICertificateValidator::*)(GlobalNamespace::MasterServerEndPoint*, System::Security::Cryptography::X509Certificates::X509Certificate2*, ::Array<::Array<uint8_t>*>*)>(&ICertificateValidator::ValidateCertificateChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICertificateValidator*), "ValidateCertificateChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Array<uint8_t>*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IConnectedPlayer.get_isMe
bool GlobalNamespace::IConnectedPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_userId
::Il2CppString* GlobalNamespace::IConnectedPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_userName
::Il2CppString* GlobalNamespace::IConnectedPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_currentLatency
float GlobalNamespace::IConnectedPlayer::get_currentLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_currentLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_isConnected
bool GlobalNamespace::IConnectedPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::IConnectedPlayer::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_isConnectionOwner
bool GlobalNamespace::IConnectedPlayer::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_offsetSyncTime
float GlobalNamespace::IConnectedPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_sortIndex
int GlobalNamespace::IConnectedPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_sortIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_isKicked
bool GlobalNamespace::IConnectedPlayer::get_isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_isKicked");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.get_multiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::IConnectedPlayer::get_multiplayerAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::get_multiplayerAvatarData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method);
}
// Autogenerated method: IConnectedPlayer.HasState
bool GlobalNamespace::IConnectedPlayer::HasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayer::HasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: IConnectedPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectedPlayer::*)()>(&IConnectedPlayer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConnectedPlayer::*)()>(&IConnectedPlayer::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConnectedPlayer::*)()>(&IConnectedPlayer::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_currentLatency
// Il2CppName: get_currentLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IConnectedPlayer::*)()>(&IConnectedPlayer::get_currentLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_currentLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectedPlayer::*)()>(&IConnectedPlayer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_disconnectedReason
// Il2CppName: get_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DisconnectedReason (IConnectedPlayer::*)()>(&IConnectedPlayer::get_disconnectedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectedPlayer::*)()>(&IConnectedPlayer::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IConnectedPlayer::*)()>(&IConnectedPlayer::get_offsetSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_offsetSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_sortIndex
// Il2CppName: get_sortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IConnectedPlayer::*)()>(&IConnectedPlayer::get_sortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_sortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_isKicked
// Il2CppName: get_isKicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectedPlayer::*)()>(&IConnectedPlayer::get_isKicked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_isKicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::get_multiplayerAvatarData
// Il2CppName: get_multiplayerAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerAvatarData (IConnectedPlayer::*)()>(&IConnectedPlayer::get_multiplayerAvatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "get_multiplayerAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectedPlayer::HasState
// Il2CppName: HasState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectedPlayer::*)(::Il2CppString*)>(&IConnectedPlayer::HasState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayer*), "HasState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IConnectedPlayerNoteEventManager
#include "GlobalNamespace/IConnectedPlayerNoteEventManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IConnectedPlayerNoteEventManager.add_connectedPlayerNoteWasCutEvent
void GlobalNamespace::IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasCutEvent(System::Action_1<GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerNoteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectedPlayerNoteEventManager.remove_connectedPlayerNoteWasCutEvent
void GlobalNamespace::IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasCutEvent(System::Action_1<GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerNoteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectedPlayerNoteEventManager.add_connectedPlayerNoteWasMissedEvent
void GlobalNamespace::IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasMissedEvent(System::Action_1<GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerNoteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectedPlayerNoteEventManager.remove_connectedPlayerNoteWasMissedEvent
void GlobalNamespace::IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasMissedEvent(System::Action_1<GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerNoteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasCutEvent
// Il2CppName: add_connectedPlayerNoteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectedPlayerNoteEventManager::*)(System::Action_1<GlobalNamespace::NoteCutInfoNetSerializable*>*)>(&IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayerNoteEventManager*), "add_connectedPlayerNoteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteCutInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasCutEvent
// Il2CppName: remove_connectedPlayerNoteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectedPlayerNoteEventManager::*)(System::Action_1<GlobalNamespace::NoteCutInfoNetSerializable*>*)>(&IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayerNoteEventManager*), "remove_connectedPlayerNoteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteCutInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasMissedEvent
// Il2CppName: add_connectedPlayerNoteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectedPlayerNoteEventManager::*)(System::Action_1<GlobalNamespace::NoteMissInfoNetSerializable*>*)>(&IConnectedPlayerNoteEventManager::add_connectedPlayerNoteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayerNoteEventManager*), "add_connectedPlayerNoteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteMissInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasMissedEvent
// Il2CppName: remove_connectedPlayerNoteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectedPlayerNoteEventManager::*)(System::Action_1<GlobalNamespace::NoteMissInfoNetSerializable*>*)>(&IConnectedPlayerNoteEventManager::remove_connectedPlayerNoteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectedPlayerNoteEventManager*), "remove_connectedPlayerNoteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteMissInfoNetSerializable*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IConnectionManager.add_onConnectedEvent
void GlobalNamespace::IConnectionManager::add_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::add_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.remove_onConnectedEvent
void GlobalNamespace::IConnectionManager::remove_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::remove_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.add_onDisconnectedEvent
void GlobalNamespace::IConnectionManager::add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::add_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.remove_onDisconnectedEvent
void GlobalNamespace::IConnectionManager::remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::remove_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.add_onConnectionFailedEvent
void GlobalNamespace::IConnectionManager::add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::add_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.remove_onConnectionFailedEvent
void GlobalNamespace::IConnectionManager::remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::remove_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.add_onConnectionConnectedEvent
void GlobalNamespace::IConnectionManager::add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::add_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.remove_onConnectionConnectedEvent
void GlobalNamespace::IConnectionManager::remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::remove_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.add_onConnectionDisconnectedEvent
void GlobalNamespace::IConnectionManager::add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::add_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.remove_onConnectionDisconnectedEvent
void GlobalNamespace::IConnectionManager::remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::remove_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.add_onLatencyUpdatedEvent
void GlobalNamespace::IConnectionManager::add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::add_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.remove_onLatencyUpdatedEvent
void GlobalNamespace::IConnectionManager::remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::remove_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.add_onReceivedDataEvent
void GlobalNamespace::IConnectionManager::add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::add_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.remove_onReceivedDataEvent
void GlobalNamespace::IConnectionManager::remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::remove_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IConnectionManager.get_userId
::Il2CppString* GlobalNamespace::IConnectionManager::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.get_userName
::Il2CppString* GlobalNamespace::IConnectionManager::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.get_isConnected
bool GlobalNamespace::IConnectionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.get_isConnecting
bool GlobalNamespace::IConnectionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.get_isDisconnecting
bool GlobalNamespace::IConnectionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.get_connectionCount
int GlobalNamespace::IConnectionManager::get_connectionCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_connectionCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.get_isConnectionOwner
bool GlobalNamespace::IConnectionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.get_isDisposed
bool GlobalNamespace::IConnectionManager::get_isDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::get_isDisposed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.SendToAll
void GlobalNamespace::IConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod);
}
// Autogenerated method: IConnectionManager.SendToAll
void GlobalNamespace::IConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(excludingConnection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod, excludingConnection);
}
// Autogenerated method: IConnectionManager.PollUpdate
void GlobalNamespace::IConnectionManager::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IConnectionManager.Disconnect
void GlobalNamespace::IConnectionManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: IConnectionManager.GetConnection
GlobalNamespace::IConnection* GlobalNamespace::IConnectionManager::GetConnection(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnectionManager::GetConnection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnection*, false>(this, ___internal__method, index);
}
// Writing MetadataGetter for method: IConnectionManager::add_onConnectedEvent
// Il2CppName: add_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action*)>(&IConnectionManager::add_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "add_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::remove_onConnectedEvent
// Il2CppName: remove_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action*)>(&IConnectionManager::remove_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "remove_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::add_onDisconnectedEvent
// Il2CppName: add_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&IConnectionManager::add_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "add_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::remove_onDisconnectedEvent
// Il2CppName: remove_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&IConnectionManager::remove_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "remove_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::add_onConnectionFailedEvent
// Il2CppName: add_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&IConnectionManager::add_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "add_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::remove_onConnectionFailedEvent
// Il2CppName: remove_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&IConnectionManager::remove_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::add_onConnectionConnectedEvent
// Il2CppName: add_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&IConnectionManager::add_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::remove_onConnectionConnectedEvent
// Il2CppName: remove_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&IConnectionManager::remove_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::add_onConnectionDisconnectedEvent
// Il2CppName: add_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&IConnectionManager::add_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::remove_onConnectionDisconnectedEvent
// Il2CppName: remove_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&IConnectionManager::remove_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::add_onLatencyUpdatedEvent
// Il2CppName: add_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&IConnectionManager::add_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::remove_onLatencyUpdatedEvent
// Il2CppName: remove_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&IConnectionManager::remove_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::add_onReceivedDataEvent
// Il2CppName: add_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&IConnectionManager::add_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "add_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::remove_onReceivedDataEvent
// Il2CppName: remove_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&IConnectionManager::remove_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "remove_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConnectionManager::*)()>(&IConnectionManager::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConnectionManager::*)()>(&IConnectionManager::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectionManager::*)()>(&IConnectionManager::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectionManager::*)()>(&IConnectionManager::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectionManager::*)()>(&IConnectionManager::get_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_connectionCount
// Il2CppName: get_connectionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IConnectionManager::*)()>(&IConnectionManager::get_connectionCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_connectionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectionManager::*)()>(&IConnectionManager::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::get_isDisposed
// Il2CppName: get_isDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnectionManager::*)()>(&IConnectionManager::get_isDisposed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "get_isDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&IConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod, GlobalNamespace::IConnection*)>(&IConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)()>(&IConnectionManager::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnectionManager::Init
// Il2CppName: Init
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IConnectionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnectionManager::*)(GlobalNamespace::DisconnectedReason)>(&IConnectionManager::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: IConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnection* (IConnectionManager::*)(int)>(&IConnectionManager::GetConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IConnection.get_userId
::Il2CppString* GlobalNamespace::IConnection::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnection::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IConnection.get_userName
::Il2CppString* GlobalNamespace::IConnection::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnection::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IConnection.get_isConnectionOwner
bool GlobalNamespace::IConnection::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnection::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IConnection.Send
void GlobalNamespace::IConnection::Send(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnection::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod);
}
// Autogenerated method: IConnection.Disconnect
void GlobalNamespace::IConnection::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IConnection::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IConnection::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConnection::*)()>(&IConnection::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnection*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnection::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConnection::*)()>(&IConnection::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnection*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnection::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConnection::*)()>(&IConnection::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnection*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConnection::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnection::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&IConnection::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnection*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: IConnection::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConnection::*)()>(&IConnection::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConnection*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IGameplayRpcManager.get_enabled
bool GlobalNamespace::IGameplayRpcManager::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::get_enabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IGameplayRpcManager.set_enabled
void GlobalNamespace::IGameplayRpcManager::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::set_enabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_setGameplaySceneSyncFinishedEvent
void GlobalNamespace::IGameplayRpcManager::add_setGameplaySceneSyncFinishedEvent(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_setGameplaySceneSyncFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_setGameplaySceneSyncFinishedEvent
void GlobalNamespace::IGameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_setGameplaySceneReadyEvent
void GlobalNamespace::IGameplayRpcManager::add_setGameplaySceneReadyEvent(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_setGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_setGameplaySceneReadyEvent
void GlobalNamespace::IGameplayRpcManager::remove_setGameplaySceneReadyEvent(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_setGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_getGameplaySceneReadyEvent
void GlobalNamespace::IGameplayRpcManager::add_getGameplaySceneReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_getGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_getGameplaySceneReadyEvent
void GlobalNamespace::IGameplayRpcManager::remove_getGameplaySceneReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_getGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_setPlayerDidConnectLateEvent
void GlobalNamespace::IGameplayRpcManager::add_setPlayerDidConnectLateEvent(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_setPlayerDidConnectLateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_setPlayerDidConnectLateEvent
void GlobalNamespace::IGameplayRpcManager::remove_setPlayerDidConnectLateEvent(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_setPlayerDidConnectLateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_setGameplaySongReadyEvent
void GlobalNamespace::IGameplayRpcManager::add_setGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_setGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_setGameplaySongReadyEvent
void GlobalNamespace::IGameplayRpcManager::remove_setGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_setGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_getGameplaySongReadyEvent
void GlobalNamespace::IGameplayRpcManager::add_getGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_getGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_getGameplaySongReadyEvent
void GlobalNamespace::IGameplayRpcManager::remove_getGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_getGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_setSongStartTimeEvent
void GlobalNamespace::IGameplayRpcManager::add_setSongStartTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_setSongStartTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setSongStartTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_setSongStartTimeEvent
void GlobalNamespace::IGameplayRpcManager::remove_setSongStartTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_setSongStartTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setSongStartTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_returnToMenuEvent
void GlobalNamespace::IGameplayRpcManager::add_returnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_returnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_returnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_returnToMenuEvent
void GlobalNamespace::IGameplayRpcManager::remove_returnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_returnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_returnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_levelEndedEarlyEvent
void GlobalNamespace::IGameplayRpcManager::add_levelEndedEarlyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_levelEndedEarlyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelEndedEarlyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_levelEndedEarlyEvent
void GlobalNamespace::IGameplayRpcManager::remove_levelEndedEarlyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_levelEndedEarlyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelEndedEarlyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_levelFinishedEvent
void GlobalNamespace::IGameplayRpcManager::add_levelFinishedEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_levelFinishedEvent
void GlobalNamespace::IGameplayRpcManager::remove_levelFinishedEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_noteWasCutEvent
void GlobalNamespace::IGameplayRpcManager::add_noteWasCutEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_noteWasCutEvent
void GlobalNamespace::IGameplayRpcManager::remove_noteWasCutEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.add_noteWasMissedEvent
void GlobalNamespace::IGameplayRpcManager::add_noteWasMissedEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::add_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.remove_noteWasMissedEvent
void GlobalNamespace::IGameplayRpcManager::remove_noteWasMissedEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::remove_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGameplayRpcManager.NoteMissed
void GlobalNamespace::IGameplayRpcManager::NoteMissed(float songTime, GlobalNamespace::NoteMissInfoNetSerializable* noteMissInfoNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::NoteMissed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteMissInfoNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime, noteMissInfoNetSerializable);
}
// Autogenerated method: IGameplayRpcManager.NoteCut
void GlobalNamespace::IGameplayRpcManager::NoteCut(float songTime, GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfoNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::NoteCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteCutInfoNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime, noteCutInfoNetSerializable);
}
// Autogenerated method: IGameplayRpcManager.SetGameplaySceneSyncFinished
void GlobalNamespace::IGameplayRpcManager::SetGameplaySceneSyncFinished(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::SetGameplaySceneSyncFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySceneSyncFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: IGameplayRpcManager.SetGameplaySceneReady
void GlobalNamespace::IGameplayRpcManager::SetGameplaySceneReady(GlobalNamespace::PlayerSpecificSettingsNetSerializable* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::SetGameplaySceneReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerSpecificSettings);
}
// Autogenerated method: IGameplayRpcManager.GetGameplaySceneReady
void GlobalNamespace::IGameplayRpcManager::GetGameplaySceneReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::GetGameplaySceneReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGameplayRpcManager.SetPlayerDidConnectLate
void GlobalNamespace::IGameplayRpcManager::SetPlayerDidConnectLate(::Il2CppString* userId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::SetPlayerDidConnectLate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerDidConnectLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: IGameplayRpcManager.SetSongStartTime
void GlobalNamespace::IGameplayRpcManager::SetSongStartTime(float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::SetSongStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSongStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTime);
}
// Autogenerated method: IGameplayRpcManager.SetGameplaySongReady
void GlobalNamespace::IGameplayRpcManager::SetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::SetGameplaySongReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGameplayRpcManager.GetGameplaySongReady
void GlobalNamespace::IGameplayRpcManager::GetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::GetGameplaySongReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGameplayRpcManager.ReturnToMenu
void GlobalNamespace::IGameplayRpcManager::ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::ReturnToMenu");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGameplayRpcManager.EndLevelEarly
void GlobalNamespace::IGameplayRpcManager::EndLevelEarly() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::EndLevelEarly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndLevelEarly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGameplayRpcManager.LevelFinished
void GlobalNamespace::IGameplayRpcManager::LevelFinished(GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGameplayRpcManager::LevelFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, results);
}
// Writing MetadataGetter for method: IGameplayRpcManager::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IGameplayRpcManager::*)()>(&IGameplayRpcManager::get_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(bool)>(&IGameplayRpcManager::set_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_setGameplaySceneSyncFinishedEvent
// Il2CppName: add_setGameplaySceneSyncFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&IGameplayRpcManager::add_setGameplaySceneSyncFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent
// Il2CppName: remove_setGameplaySceneSyncFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&IGameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_setGameplaySceneReadyEvent
// Il2CppName: add_setGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*)>(&IGameplayRpcManager::add_setGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_setGameplaySceneReadyEvent
// Il2CppName: remove_setGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*)>(&IGameplayRpcManager::remove_setGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_getGameplaySceneReadyEvent
// Il2CppName: add_getGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::add_getGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_getGameplaySceneReadyEvent
// Il2CppName: remove_getGameplaySceneReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::remove_getGameplaySceneReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_setPlayerDidConnectLateEvent
// Il2CppName: add_setPlayerDidConnectLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&IGameplayRpcManager::add_setPlayerDidConnectLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_setPlayerDidConnectLateEvent
// Il2CppName: remove_setPlayerDidConnectLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*)>(&IGameplayRpcManager::remove_setPlayerDidConnectLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_setGameplaySongReadyEvent
// Il2CppName: add_setGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::add_setGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_setGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_setGameplaySongReadyEvent
// Il2CppName: remove_setGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::remove_setGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_setGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_getGameplaySongReadyEvent
// Il2CppName: add_getGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::add_getGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_getGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_getGameplaySongReadyEvent
// Il2CppName: remove_getGameplaySongReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::remove_getGameplaySongReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_getGameplaySongReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_setSongStartTimeEvent
// Il2CppName: add_setSongStartTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IGameplayRpcManager::add_setSongStartTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_setSongStartTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_setSongStartTimeEvent
// Il2CppName: remove_setSongStartTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IGameplayRpcManager::remove_setSongStartTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_setSongStartTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_returnToMenuEvent
// Il2CppName: add_returnToMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::add_returnToMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_returnToMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_returnToMenuEvent
// Il2CppName: remove_returnToMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::remove_returnToMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_returnToMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_levelEndedEarlyEvent
// Il2CppName: add_levelEndedEarlyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::add_levelEndedEarlyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_levelEndedEarlyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_levelEndedEarlyEvent
// Il2CppName: remove_levelEndedEarlyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IGameplayRpcManager::remove_levelEndedEarlyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_levelEndedEarlyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&IGameplayRpcManager::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&IGameplayRpcManager::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*)>(&IGameplayRpcManager::add_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*)>(&IGameplayRpcManager::remove_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*)>(&IGameplayRpcManager::add_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*)>(&IGameplayRpcManager::remove_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::NoteMissed
// Il2CppName: NoteMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(float, GlobalNamespace::NoteMissInfoNetSerializable*)>(&IGameplayRpcManager::NoteMissed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "NoteMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteMissInfoNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::NoteCut
// Il2CppName: NoteCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(float, GlobalNamespace::NoteCutInfoNetSerializable*)>(&IGameplayRpcManager::NoteCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "NoteCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfoNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::SetGameplaySceneSyncFinished
// Il2CppName: SetGameplaySceneSyncFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&IGameplayRpcManager::SetGameplaySceneSyncFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "SetGameplaySceneSyncFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::SetGameplaySceneReady
// Il2CppName: SetGameplaySceneReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(GlobalNamespace::PlayerSpecificSettingsNetSerializable*)>(&IGameplayRpcManager::SetGameplaySceneReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "SetGameplaySceneReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::GetGameplaySceneReady
// Il2CppName: GetGameplaySceneReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)()>(&IGameplayRpcManager::GetGameplaySceneReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "GetGameplaySceneReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::SetPlayerDidConnectLate
// Il2CppName: SetPlayerDidConnectLate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*)>(&IGameplayRpcManager::SetPlayerDidConnectLate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "SetPlayerDidConnectLate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::SetSongStartTime
// Il2CppName: SetSongStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(float)>(&IGameplayRpcManager::SetSongStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "SetSongStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::SetGameplaySongReady
// Il2CppName: SetGameplaySongReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)()>(&IGameplayRpcManager::SetGameplaySongReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "SetGameplaySongReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::GetGameplaySongReady
// Il2CppName: GetGameplaySongReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)()>(&IGameplayRpcManager::GetGameplaySongReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "GetGameplaySongReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::ReturnToMenu
// Il2CppName: ReturnToMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)()>(&IGameplayRpcManager::ReturnToMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "ReturnToMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::EndLevelEarly
// Il2CppName: EndLevelEarly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)()>(&IGameplayRpcManager::EndLevelEarly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "EndLevelEarly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGameplayRpcManager::LevelFinished
// Il2CppName: LevelFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGameplayRpcManager::*)(GlobalNamespace::MultiplayerLevelCompletionResults*)>(&IGameplayRpcManager::LevelFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGameplayRpcManager*), "LevelFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelCompletionResults*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IHealthCheckService
#include "GlobalNamespace/IHealthCheckService.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IHealthCheckService.PollUpdate
void GlobalNamespace::IHealthCheckService::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IHealthCheckService::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IHealthCheckService::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IHealthCheckService::*)()>(&IHealthCheckService::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IHealthCheckService*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMenuRpcManager.get_syncTime
float GlobalNamespace::IMenuRpcManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.add_getIsReadyEvent
void GlobalNamespace::IMenuRpcManager::add_getIsReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getIsReadyEvent
void GlobalNamespace::IMenuRpcManager::remove_getIsReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_setIsReadyEvent
void GlobalNamespace::IMenuRpcManager::add_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_setIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_setIsReadyEvent
void GlobalNamespace::IMenuRpcManager::remove_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_setIsReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setIsReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_setStartGameTimeEvent
void GlobalNamespace::IMenuRpcManager::add_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_setStartGameTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setStartGameTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_setStartGameTimeEvent
void GlobalNamespace::IMenuRpcManager::remove_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_setStartGameTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setStartGameTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_cancelledLevelStartEvent
void GlobalNamespace::IMenuRpcManager::add_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_cancelledLevelStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cancelledLevelStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_cancelledLevelStartEvent
void GlobalNamespace::IMenuRpcManager::remove_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_cancelledLevelStartEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cancelledLevelStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_selectedBeatmapEvent
void GlobalNamespace::IMenuRpcManager::add_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_selectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_selectedBeatmapEvent
void GlobalNamespace::IMenuRpcManager::remove_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_selectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_clearSelectedBeatmapEvent
void GlobalNamespace::IMenuRpcManager::add_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_clearSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_clearSelectedBeatmapEvent
void GlobalNamespace::IMenuRpcManager::remove_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_clearSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_getSelectedBeatmapEvent
void GlobalNamespace::IMenuRpcManager::add_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getSelectedBeatmapEvent
void GlobalNamespace::IMenuRpcManager::remove_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getSelectedBeatmapEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getSelectedBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_selectedGameplayModifiersEvent
void GlobalNamespace::IMenuRpcManager::add_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_selectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_selectedGameplayModifiersEvent
void GlobalNamespace::IMenuRpcManager::remove_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_selectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_clearSelectedGameplayModifiersEvent
void GlobalNamespace::IMenuRpcManager::add_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_clearSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_clearSelectedGameplayModifiersEvent
void GlobalNamespace::IMenuRpcManager::remove_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_clearSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_getSelectedGameplayModifiersEvent
void GlobalNamespace::IMenuRpcManager::add_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getSelectedGameplayModifiersEvent
void GlobalNamespace::IMenuRpcManager::remove_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getSelectedGameplayModifiersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_startedLevelEvent
void GlobalNamespace::IMenuRpcManager::add_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_startedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_startedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_startedLevelEvent
void GlobalNamespace::IMenuRpcManager::remove_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_startedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_startedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_getStartedLevelEvent
void GlobalNamespace::IMenuRpcManager::add_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getStartedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getStartedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getStartedLevelEvent
void GlobalNamespace::IMenuRpcManager::remove_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getStartedLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getStartedLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_getMultiplayerGameStateEvent
void GlobalNamespace::IMenuRpcManager::add_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getMultiplayerGameStateEvent
void GlobalNamespace::IMenuRpcManager::remove_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_setMultiplayerGameStateEvent
void GlobalNamespace::IMenuRpcManager::add_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_setMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_setMultiplayerGameStateEvent
void GlobalNamespace::IMenuRpcManager::remove_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_setMultiplayerGameStateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_getIsEntitledToLevelEvent
void GlobalNamespace::IMenuRpcManager::add_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getIsEntitledToLevelEvent
void GlobalNamespace::IMenuRpcManager::remove_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_setIsEntitledToLevelEvent
void GlobalNamespace::IMenuRpcManager::add_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_setIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_setIsEntitledToLevelEvent
void GlobalNamespace::IMenuRpcManager::remove_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_setIsEntitledToLevelEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_levelEntitlementStatusesInvalidatedEvent
void GlobalNamespace::IMenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_levelEntitlementStatusesInvalidatedEvent
void GlobalNamespace::IMenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_getIsInLobbyEvent
void GlobalNamespace::IMenuRpcManager::add_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getIsInLobbyEvent
void GlobalNamespace::IMenuRpcManager::remove_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_setIsInLobbyEvent
void GlobalNamespace::IMenuRpcManager::add_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_setIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_setIsInLobbyEvent
void GlobalNamespace::IMenuRpcManager::remove_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_setIsInLobbyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setIsInLobbyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_cancelCountdownEvent
void GlobalNamespace::IMenuRpcManager::add_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_cancelCountdownEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cancelCountdownEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_cancelCountdownEvent
void GlobalNamespace::IMenuRpcManager::remove_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_cancelCountdownEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cancelCountdownEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_setCountdownEndTimeEvent
void GlobalNamespace::IMenuRpcManager::add_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_setCountdownEndTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setCountdownEndTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_setCountdownEndTimeEvent
void GlobalNamespace::IMenuRpcManager::remove_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_setCountdownEndTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setCountdownEndTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_setOwnedSongPacksEvent
void GlobalNamespace::IMenuRpcManager::add_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_setOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_setOwnedSongPacksEvent
void GlobalNamespace::IMenuRpcManager::remove_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_setOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.add_getOwnedSongPacksEvent
void GlobalNamespace::IMenuRpcManager::add_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::add_getOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.remove_getOwnedSongPacksEvent
void GlobalNamespace::IMenuRpcManager::remove_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::remove_getOwnedSongPacksEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getOwnedSongPacksEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuRpcManager.SelectBeatmap
void GlobalNamespace::IMenuRpcManager::SelectBeatmap(GlobalNamespace::BeatmapIdentifierNetSerializable* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SelectBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, identifier);
}
// Autogenerated method: IMenuRpcManager.ClearSelectedBeatmap
void GlobalNamespace::IMenuRpcManager::ClearSelectedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::ClearSelectedBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.GetSelectedBeatmap
void GlobalNamespace::IMenuRpcManager::GetSelectedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetSelectedBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.SelectGameplayModifiers
void GlobalNamespace::IMenuRpcManager::SelectGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SelectGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, gameplayModifiers);
}
// Autogenerated method: IMenuRpcManager.ClearSelectedGameplayModifiers
void GlobalNamespace::IMenuRpcManager::ClearSelectedGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::ClearSelectedGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.GetSelectedGameplayModifiers
void GlobalNamespace::IMenuRpcManager::GetSelectedGameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetSelectedGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.GetIsReady
void GlobalNamespace::IMenuRpcManager::GetIsReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.SetIsReady
void GlobalNamespace::IMenuRpcManager::SetIsReady(bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SetIsReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isReady);
}
// Autogenerated method: IMenuRpcManager.StartLevel
void GlobalNamespace::IMenuRpcManager::StartLevel(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::StartLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapId), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapId, gameplayModifiers, startTime);
}
// Autogenerated method: IMenuRpcManager.GetStartedLevel
void GlobalNamespace::IMenuRpcManager::GetStartedLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetStartedLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.GetMultiplayerGameState
void GlobalNamespace::IMenuRpcManager::GetMultiplayerGameState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetMultiplayerGameState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.SetMultiplayerGameState
void GlobalNamespace::IMenuRpcManager::SetMultiplayerGameState(GlobalNamespace::MultiplayerGameState lobbyState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SetMultiplayerGameState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lobbyState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lobbyState);
}
// Autogenerated method: IMenuRpcManager.CancelLevelStart
void GlobalNamespace::IMenuRpcManager::CancelLevelStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::CancelLevelStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.SetStartGameTime
void GlobalNamespace::IMenuRpcManager::SetStartGameTime(float newTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SetStartGameTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartGameTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newTime);
}
// Autogenerated method: IMenuRpcManager.InvalidateLevelEntitlementStatuses
void GlobalNamespace::IMenuRpcManager::InvalidateLevelEntitlementStatuses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::InvalidateLevelEntitlementStatuses");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateLevelEntitlementStatuses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.SetIsEntitledToLevel
void GlobalNamespace::IMenuRpcManager::SetIsEntitledToLevel(::Il2CppString* levelId, GlobalNamespace::EntitlementsStatus entitlementStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SetIsEntitledToLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(entitlementStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId, entitlementStatus);
}
// Autogenerated method: IMenuRpcManager.GetIsEntitledToLevel
void GlobalNamespace::IMenuRpcManager::GetIsEntitledToLevel(::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetIsEntitledToLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId);
}
// Autogenerated method: IMenuRpcManager.GetIsInLobby
void GlobalNamespace::IMenuRpcManager::GetIsInLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.SetIsInLobby
void GlobalNamespace::IMenuRpcManager::SetIsInLobby(bool isBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SetIsInLobby");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isBack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isBack);
}
// Autogenerated method: IMenuRpcManager.GetCountdownEndTime
void GlobalNamespace::IMenuRpcManager::GetCountdownEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetCountdownEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCountdownEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.GetOwnedSongPacks
void GlobalNamespace::IMenuRpcManager::GetOwnedSongPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::GetOwnedSongPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMenuRpcManager.SetOwnedSongPacks
void GlobalNamespace::IMenuRpcManager::SetOwnedSongPacks(GlobalNamespace::SongPackMask songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuRpcManager::SetOwnedSongPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOwnedSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songPackMask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songPackMask);
}
// Writing MetadataGetter for method: IMenuRpcManager::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IMenuRpcManager::*)()>(&IMenuRpcManager::get_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getIsReadyEvent
// Il2CppName: add_getIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getIsReadyEvent
// Il2CppName: remove_getIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_setIsReadyEvent
// Il2CppName: add_setIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::add_setIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_setIsReadyEvent
// Il2CppName: remove_setIsReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::remove_setIsReadyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_setStartGameTimeEvent
// Il2CppName: add_setStartGameTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::add_setStartGameTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_setStartGameTimeEvent
// Il2CppName: remove_setStartGameTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::remove_setStartGameTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_cancelledLevelStartEvent
// Il2CppName: add_cancelledLevelStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_cancelledLevelStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_cancelledLevelStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_cancelledLevelStartEvent
// Il2CppName: remove_cancelledLevelStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_cancelledLevelStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_cancelledLevelStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_selectedBeatmapEvent
// Il2CppName: add_selectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*)>(&IMenuRpcManager::add_selectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_selectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_selectedBeatmapEvent
// Il2CppName: remove_selectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*)>(&IMenuRpcManager::remove_selectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_selectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_clearSelectedBeatmapEvent
// Il2CppName: add_clearSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_clearSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_clearSelectedBeatmapEvent
// Il2CppName: remove_clearSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_clearSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getSelectedBeatmapEvent
// Il2CppName: add_getSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getSelectedBeatmapEvent
// Il2CppName: remove_getSelectedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getSelectedBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_selectedGameplayModifiersEvent
// Il2CppName: add_selectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*)>(&IMenuRpcManager::add_selectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_selectedGameplayModifiersEvent
// Il2CppName: remove_selectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*)>(&IMenuRpcManager::remove_selectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_clearSelectedGameplayModifiersEvent
// Il2CppName: add_clearSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_clearSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_clearSelectedGameplayModifiersEvent
// Il2CppName: remove_clearSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_clearSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getSelectedGameplayModifiersEvent
// Il2CppName: add_getSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getSelectedGameplayModifiersEvent
// Il2CppName: remove_getSelectedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getSelectedGameplayModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_startedLevelEvent
// Il2CppName: add_startedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*)>(&IMenuRpcManager::add_startedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_startedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_startedLevelEvent
// Il2CppName: remove_startedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*)>(&IMenuRpcManager::remove_startedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_startedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getStartedLevelEvent
// Il2CppName: add_getStartedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getStartedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getStartedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getStartedLevelEvent
// Il2CppName: remove_getStartedLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getStartedLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getStartedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getMultiplayerGameStateEvent
// Il2CppName: add_getMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getMultiplayerGameStateEvent
// Il2CppName: remove_getMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_setMultiplayerGameStateEvent
// Il2CppName: add_setMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*)>(&IMenuRpcManager::add_setMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_setMultiplayerGameStateEvent
// Il2CppName: remove_setMultiplayerGameStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*)>(&IMenuRpcManager::remove_setMultiplayerGameStateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getIsEntitledToLevelEvent
// Il2CppName: add_getIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&IMenuRpcManager::add_getIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getIsEntitledToLevelEvent
// Il2CppName: remove_getIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&IMenuRpcManager::remove_getIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_setIsEntitledToLevelEvent
// Il2CppName: add_setIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*)>(&IMenuRpcManager::add_setIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_setIsEntitledToLevelEvent
// Il2CppName: remove_setIsEntitledToLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*)>(&IMenuRpcManager::remove_setIsEntitledToLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent
// Il2CppName: add_levelEntitlementStatusesInvalidatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent
// Il2CppName: remove_levelEntitlementStatusesInvalidatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getIsInLobbyEvent
// Il2CppName: add_getIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getIsInLobbyEvent
// Il2CppName: remove_getIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_setIsInLobbyEvent
// Il2CppName: add_setIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::add_setIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_setIsInLobbyEvent
// Il2CppName: remove_setIsInLobbyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::remove_setIsInLobbyEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_cancelCountdownEvent
// Il2CppName: add_cancelCountdownEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_cancelCountdownEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_cancelCountdownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_cancelCountdownEvent
// Il2CppName: remove_cancelCountdownEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_cancelCountdownEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_cancelCountdownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_setCountdownEndTimeEvent
// Il2CppName: add_setCountdownEndTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::add_setCountdownEndTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_setCountdownEndTimeEvent
// Il2CppName: remove_setCountdownEndTimeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::remove_setCountdownEndTimeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_setOwnedSongPacksEvent
// Il2CppName: add_setOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)>(&IMenuRpcManager::add_setOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_setOwnedSongPacksEvent
// Il2CppName: remove_setOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)>(&IMenuRpcManager::remove_setOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::add_getOwnedSongPacksEvent
// Il2CppName: add_getOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::remove_getOwnedSongPacksEvent
// Il2CppName: remove_getOwnedSongPacksEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getOwnedSongPacksEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SelectBeatmap
// Il2CppName: SelectBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*)>(&IMenuRpcManager::SelectBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SelectBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::ClearSelectedBeatmap
// Il2CppName: ClearSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::ClearSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "ClearSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetSelectedBeatmap
// Il2CppName: GetSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SelectGameplayModifiers
// Il2CppName: SelectGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::GameplayModifiers*)>(&IMenuRpcManager::SelectGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SelectGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::ClearSelectedGameplayModifiers
// Il2CppName: ClearSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::ClearSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "ClearSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetSelectedGameplayModifiers
// Il2CppName: GetSelectedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetSelectedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetIsReady
// Il2CppName: GetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SetIsReady
// Il2CppName: SetIsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(bool)>(&IMenuRpcManager::SetIsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::StartLevel
// Il2CppName: StartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float)>(&IMenuRpcManager::StartLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetStartedLevel
// Il2CppName: GetStartedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetStartedLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetStartedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetMultiplayerGameState
// Il2CppName: GetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SetMultiplayerGameState
// Il2CppName: SetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::MultiplayerGameState)>(&IMenuRpcManager::SetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::CancelLevelStart
// Il2CppName: CancelLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::CancelLevelStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "CancelLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SetStartGameTime
// Il2CppName: SetStartGameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(float)>(&IMenuRpcManager::SetStartGameTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetStartGameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::InvalidateLevelEntitlementStatuses
// Il2CppName: InvalidateLevelEntitlementStatuses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::InvalidateLevelEntitlementStatuses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "InvalidateLevelEntitlementStatuses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SetIsEntitledToLevel
// Il2CppName: SetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(::Il2CppString*, GlobalNamespace::EntitlementsStatus)>(&IMenuRpcManager::SetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EntitlementsStatus>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetIsEntitledToLevel
// Il2CppName: GetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(::Il2CppString*)>(&IMenuRpcManager::GetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetIsInLobby
// Il2CppName: GetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SetIsInLobby
// Il2CppName: SetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(bool)>(&IMenuRpcManager::SetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetCountdownEndTime
// Il2CppName: GetCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetCountdownEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::GetOwnedSongPacks
// Il2CppName: GetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMenuRpcManager::SetOwnedSongPacks
// Il2CppName: SetOwnedSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::SongPackMask)>(&IMenuRpcManager::SetOwnedSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: INetworkPacketSubSerializer`1
#include "GlobalNamespace/INetworkPacketSubSerializer_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerSessionManager.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::IMultiplayerSessionManager::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_isConnectionOwner
bool GlobalNamespace::IMultiplayerSessionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_syncTime
float GlobalNamespace::IMultiplayerSessionManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_syncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_isSyncTimeInitialized
bool GlobalNamespace::IMultiplayerSessionManager::get_isSyncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_isSyncTimeInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSyncTimeInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_syncTimeDelay
float GlobalNamespace::IMultiplayerSessionManager::get_syncTimeDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_syncTimeDelay");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_maxPlayerCount
int GlobalNamespace::IMultiplayerSessionManager::get_maxPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_maxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_connectedPlayerCount
int GlobalNamespace::IMultiplayerSessionManager::get_connectedPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_connectedPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_isConnectingOrConnected
bool GlobalNamespace::IMultiplayerSessionManager::get_isConnectingOrConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_isConnectingOrConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectingOrConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_isConnected
bool GlobalNamespace::IMultiplayerSessionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_isConnecting
bool GlobalNamespace::IMultiplayerSessionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_isDisconnecting
bool GlobalNamespace::IMultiplayerSessionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_isSpectating
bool GlobalNamespace::IMultiplayerSessionManager::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_connectedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::IMultiplayerSessionManager::get_connectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_connectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.get_connectionOwner
GlobalNamespace::IConnectedPlayer* GlobalNamespace::IMultiplayerSessionManager::get_connectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::get_connectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.add_connectedEvent
void GlobalNamespace::IMultiplayerSessionManager::add_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::add_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.remove_connectedEvent
void GlobalNamespace::IMultiplayerSessionManager::remove_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::remove_connectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.add_connectionFailedEvent
void GlobalNamespace::IMultiplayerSessionManager::add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::add_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.remove_connectionFailedEvent
void GlobalNamespace::IMultiplayerSessionManager::remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::remove_connectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.add_playerConnectedEvent
void GlobalNamespace::IMultiplayerSessionManager::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::add_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.remove_playerConnectedEvent
void GlobalNamespace::IMultiplayerSessionManager::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::remove_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.add_playerDisconnectedEvent
void GlobalNamespace::IMultiplayerSessionManager::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::add_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.remove_playerDisconnectedEvent
void GlobalNamespace::IMultiplayerSessionManager::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::remove_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.add_playerAvatarChangedEvent
void GlobalNamespace::IMultiplayerSessionManager::add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::add_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.remove_playerAvatarChangedEvent
void GlobalNamespace::IMultiplayerSessionManager::remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::remove_playerAvatarChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.add_playerStateChangedEvent
void GlobalNamespace::IMultiplayerSessionManager::add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::add_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.remove_playerStateChangedEvent
void GlobalNamespace::IMultiplayerSessionManager::remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::remove_playerStateChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.add_disconnectedEvent
void GlobalNamespace::IMultiplayerSessionManager::add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::add_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.remove_disconnectedEvent
void GlobalNamespace::IMultiplayerSessionManager::remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::remove_disconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerSessionManager.SetMaxPlayerCount
void GlobalNamespace::IMultiplayerSessionManager::SetMaxPlayerCount(int maxPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::SetMaxPlayerCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxPlayerCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxPlayerCount);
}
// Autogenerated method: IMultiplayerSessionManager.StartSession
void GlobalNamespace::IMultiplayerSessionManager::StartSession(GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::StartSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayerManager)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayerManager);
}
// Autogenerated method: IMultiplayerSessionManager.EndSession
void GlobalNamespace::IMultiplayerSessionManager::EndSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::EndSession");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndSession", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.GetPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::IMultiplayerSessionManager::GetPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::GetPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: IMultiplayerSessionManager.GetConnectedPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::IMultiplayerSessionManager::GetConnectedPlayer(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::GetConnectedPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, index);
}
// Autogenerated method: IMultiplayerSessionManager.GetConnectedPlayerByUserId
GlobalNamespace::IConnectedPlayer* GlobalNamespace::IMultiplayerSessionManager::GetConnectedPlayerByUserId(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::GetConnectedPlayerByUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayerByUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: IMultiplayerSessionManager.Disconnect
void GlobalNamespace::IMultiplayerSessionManager::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerSessionManager.SetLocalPlayerState
void GlobalNamespace::IMultiplayerSessionManager::SetLocalPlayerState(::Il2CppString* state, bool hasState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::SetLocalPlayerState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(hasState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, hasState);
}
// Autogenerated method: IMultiplayerSessionManager.LocalPlayerHasState
bool GlobalNamespace::IMultiplayerSessionManager::LocalPlayerHasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::LocalPlayerHasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalPlayerHasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: IMultiplayerSessionManager.RegisterSerializer
void GlobalNamespace::IMultiplayerSessionManager::RegisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::RegisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: IMultiplayerSessionManager.UnregisterSerializer
void GlobalNamespace::IMultiplayerSessionManager::UnregisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::UnregisterSerializer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: IMultiplayerSessionManager.PerformAtSyncTime
void GlobalNamespace::IMultiplayerSessionManager::PerformAtSyncTime(float syncTime, System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerSessionManager::PerformAtSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformAtSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, syncTime, action);
}
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_syncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_isSyncTimeInitialized
// Il2CppName: get_isSyncTimeInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_isSyncTimeInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_isSyncTimeInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_syncTimeDelay
// Il2CppName: get_syncTimeDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_syncTimeDelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_syncTimeDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_maxPlayerCount
// Il2CppName: get_maxPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_maxPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_maxPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_connectedPlayerCount
// Il2CppName: get_connectedPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_connectedPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_connectedPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_isConnectingOrConnected
// Il2CppName: get_isConnectingOrConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_isConnectingOrConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_isConnectingOrConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_isSpectating
// Il2CppName: get_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_connectedPlayers
// Il2CppName: get_connectedPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_connectedPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_connectedPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::get_connectionOwner
// Il2CppName: get_connectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::get_connectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "get_connectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::add_connectedEvent
// Il2CppName: add_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action*)>(&IMultiplayerSessionManager::add_connectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "add_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::remove_connectedEvent
// Il2CppName: remove_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action*)>(&IMultiplayerSessionManager::remove_connectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "remove_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::add_connectionFailedEvent
// Il2CppName: add_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&IMultiplayerSessionManager::add_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "add_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::remove_connectionFailedEvent
// Il2CppName: remove_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&IMultiplayerSessionManager::remove_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "remove_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::add_playerConnectedEvent
// Il2CppName: add_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::add_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "add_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::remove_playerConnectedEvent
// Il2CppName: remove_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::remove_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "remove_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::add_playerDisconnectedEvent
// Il2CppName: add_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::add_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "add_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::remove_playerDisconnectedEvent
// Il2CppName: remove_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::remove_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::add_playerAvatarChangedEvent
// Il2CppName: add_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::add_playerAvatarChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::remove_playerAvatarChangedEvent
// Il2CppName: remove_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::remove_playerAvatarChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::add_playerStateChangedEvent
// Il2CppName: add_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::add_playerStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "add_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::remove_playerStateChangedEvent
// Il2CppName: remove_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::remove_playerStateChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "remove_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::add_disconnectedEvent
// Il2CppName: add_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&IMultiplayerSessionManager::add_disconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "add_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::remove_disconnectedEvent
// Il2CppName: remove_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&IMultiplayerSessionManager::remove_disconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "remove_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::SetMaxPlayerCount
// Il2CppName: SetMaxPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(int)>(&IMultiplayerSessionManager::SetMaxPlayerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "SetMaxPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::StartSession
// Il2CppName: StartSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(GlobalNamespace::ConnectedPlayerManager*)>(&IMultiplayerSessionManager::StartSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "StartSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectedPlayerManager*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::EndSession
// Il2CppName: EndSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::EndSession)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "EndSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::GetPlayerByUserId
// Il2CppName: GetPlayerByUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (IMultiplayerSessionManager::*)(::Il2CppString*)>(&IMultiplayerSessionManager::GetPlayerByUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "GetPlayerByUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::GetConnectedPlayer
// Il2CppName: GetConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (IMultiplayerSessionManager::*)(int)>(&IMultiplayerSessionManager::GetConnectedPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "GetConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::GetConnectedPlayerByUserId
// Il2CppName: GetConnectedPlayerByUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (IMultiplayerSessionManager::*)(::Il2CppString*)>(&IMultiplayerSessionManager::GetConnectedPlayerByUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "GetConnectedPlayerByUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)()>(&IMultiplayerSessionManager::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::Send
// Il2CppName: Send
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IMultiplayerSessionManager::SendUnreliable
// Il2CppName: SendUnreliable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IMultiplayerSessionManager::RegisterCallback
// Il2CppName: RegisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IMultiplayerSessionManager::UnregisterCallback
// Il2CppName: UnregisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IMultiplayerSessionManager::SetLocalPlayerState
// Il2CppName: SetLocalPlayerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(::Il2CppString*, bool)>(&IMultiplayerSessionManager::SetLocalPlayerState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "SetLocalPlayerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::LocalPlayerHasState
// Il2CppName: LocalPlayerHasState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerSessionManager::*)(::Il2CppString*)>(&IMultiplayerSessionManager::LocalPlayerHasState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "LocalPlayerHasState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::RegisterSerializer
// Il2CppName: RegisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(GlobalNamespace::MultiplayerSessionManager_MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::RegisterSerializer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "RegisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerSessionManager_MessageType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::UnregisterSerializer
// Il2CppName: UnregisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(GlobalNamespace::MultiplayerSessionManager_MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&IMultiplayerSessionManager::UnregisterSerializer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "UnregisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerSessionManager_MessageType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerSessionManager::PerformAtSyncTime
// Il2CppName: PerformAtSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerSessionManager::*)(float, System::Action*)>(&IMultiplayerSessionManager::PerformAtSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerSessionManager*), "PerformAtSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
