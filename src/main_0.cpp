// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Easy
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Easy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Easy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Easy"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Easy
void GlobalNamespace::BeatmapDifficulty::_set_Easy(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Easy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Easy", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Normal
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Normal
void GlobalNamespace::BeatmapDifficulty::_set_Normal(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Hard
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Hard() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Hard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Hard"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Hard
void GlobalNamespace::BeatmapDifficulty::_set_Hard(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Hard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Hard", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty Expert
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_Expert() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_Expert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "Expert"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty Expert
void GlobalNamespace::BeatmapDifficulty::_set_Expert(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_Expert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "Expert", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficulty ExpertPlus
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficulty::_get_ExpertPlus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_ExpertPlus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficulty>("", "BeatmapDifficulty", "ExpertPlus"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficulty ExpertPlus
void GlobalNamespace::BeatmapDifficulty::_set_ExpertPlus(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_ExpertPlus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficulty", "ExpertPlus", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::BeatmapDifficulty::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::BeatmapDifficulty::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficulty::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapDifficultySerializedMethods
#include "GlobalNamespace/BeatmapDifficultySerializedMethods.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyEasySerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyEasySerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyEasySerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyEasySerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyEasySerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyEasySerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyEasySerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyEasySerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyNormalSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyNormalSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyNormalSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyNormalSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyNormalSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyNormalSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyNormalSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyNormalSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyHardSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyHardSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyHardSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyHardSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyHardSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyHardSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyHardSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyHardSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyExpertSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyExpertSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyExpertPlusNameSerializedLegacy
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusNameSerializedLegacy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusNameSerializedLegacy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusNameSerializedLegacy"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyExpertPlusNameSerializedLegacy
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusNameSerializedLegacy(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusNameSerializedLegacy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusNameSerializedLegacy", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyExpertPlusSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyExpertPlusSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyExpertPlusSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyExpertPlusSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyExpertPlusSerializedName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultyUnknownSerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyUnknownSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_get_kDifficultyUnknownSerializedName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapDifficultySerializedMethods", "kDifficultyUnknownSerializedName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultyUnknownSerializedName
void GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyUnknownSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::_set_kDifficultyUnknownSerializedName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultySerializedMethods", "kDifficultyUnknownSerializedName", value));
}
// Autogenerated method: BeatmapDifficultySerializedMethods.SerializedName
::Il2CppString* GlobalNamespace::BeatmapDifficultySerializedMethods::SerializedName(GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::SerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultySerializedMethods", "SerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated method: BeatmapDifficultySerializedMethods.BeatmapDifficultyFromSerializedName
bool GlobalNamespace::BeatmapDifficultySerializedMethods::BeatmapDifficultyFromSerializedName(::Il2CppString* name, ByRef<GlobalNamespace::BeatmapDifficulty> difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultySerializedMethods::BeatmapDifficultyFromSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultySerializedMethods", "BeatmapDifficultyFromSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, byref(difficulty));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Easy
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Easy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Easy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Easy"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Easy
void GlobalNamespace::BeatmapDifficultyMask::_set_Easy(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Easy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Easy", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Normal
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Normal
void GlobalNamespace::BeatmapDifficultyMask::_set_Normal(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Hard
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Hard() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Hard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Hard"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Hard
void GlobalNamespace::BeatmapDifficultyMask::_set_Hard(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Hard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Hard", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask Expert
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_Expert() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_Expert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "Expert"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask Expert
void GlobalNamespace::BeatmapDifficultyMask::_set_Expert(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_Expert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "Expert", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask ExpertPlus
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_ExpertPlus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_ExpertPlus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "ExpertPlus"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask ExpertPlus
void GlobalNamespace::BeatmapDifficultyMask::_set_ExpertPlus(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_ExpertPlus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "ExpertPlus", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapDifficultyMask All
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMask::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyMask>("", "BeatmapDifficultyMask", "All"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapDifficultyMask All
void GlobalNamespace::BeatmapDifficultyMask::_set_All(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapDifficultyMask", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t GlobalNamespace::BeatmapDifficultyMask::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte value__
void GlobalNamespace::BeatmapDifficultyMask::_set_value__(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMask::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapDifficultyMaskExtensions
#include "GlobalNamespace/BeatmapDifficultyMaskExtensions.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapDifficultyMaskExtensions.ToMask
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyMaskExtensions::ToMask(GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::ToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "ToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, difficulty);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.FromMask
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapDifficultyMaskExtensions::FromMask(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::FromMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "FromMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.LocalizedKey
::Il2CppString* GlobalNamespace::BeatmapDifficultyMaskExtensions::LocalizedKey(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::LocalizedKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "LocalizedKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.ShortLocalizedKey
::Il2CppString* GlobalNamespace::BeatmapDifficultyMaskExtensions::ShortLocalizedKey(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::ShortLocalizedKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "ShortLocalizedKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.Contains
bool GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains(GlobalNamespace::BeatmapDifficultyMask mask, GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(difficulty)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, difficulty);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.Contains
bool GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains(GlobalNamespace::BeatmapDifficultyMask mask, GlobalNamespace::BeatmapDifficultyMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.DifferenceFrom
int GlobalNamespace::BeatmapDifficultyMaskExtensions::DifferenceFrom(GlobalNamespace::BeatmapDifficultyMask mask, GlobalNamespace::BeatmapDifficultyMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::DifferenceFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "DifferenceFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: BeatmapDifficultyMaskExtensions.ToHexString
::Il2CppString* GlobalNamespace::BeatmapDifficultyMaskExtensions::ToHexString(GlobalNamespace::BeatmapDifficultyMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyMaskExtensions::ToHexString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyMaskExtensions", "ToHexString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapEventType type
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventData::_get_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventData::_get_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly BeatmapEventType type
void GlobalNamespace::BeatmapEventData::_set_type(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventData::_set_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  *reinterpret_cast<GlobalNamespace::BeatmapEventType*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Single time
float GlobalNamespace::BeatmapEventData::_get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventData::_get_time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Single time
void GlobalNamespace::BeatmapEventData::_set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventData::_set_time");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "time"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 value
int GlobalNamespace::BeatmapEventData::_get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventData::_get_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Int32 value
void GlobalNamespace::BeatmapEventData::_set_value(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventData::_set_value");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventType
#include "GlobalNamespace/BeatmapEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event0
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event0"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event0
void GlobalNamespace::BeatmapEventType::_set_Event0(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event0", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event1
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event1"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event1
void GlobalNamespace::BeatmapEventType::_set_Event1(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event1", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event2
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event2"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event2
void GlobalNamespace::BeatmapEventType::_set_Event2(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event2", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event3
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event3"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event3
void GlobalNamespace::BeatmapEventType::_set_Event3(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event3", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event4
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event4"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event4
void GlobalNamespace::BeatmapEventType::_set_Event4(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event4", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event5
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event5"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event5
void GlobalNamespace::BeatmapEventType::_set_Event5(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event5", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event6
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event6"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event6
void GlobalNamespace::BeatmapEventType::_set_Event6(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event6", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event7
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event7"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event7
void GlobalNamespace::BeatmapEventType::_set_Event7(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event7", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event8
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event8"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event8
void GlobalNamespace::BeatmapEventType::_set_Event8(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event8", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event9
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event9"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event9
void GlobalNamespace::BeatmapEventType::_set_Event9(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event9", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event10
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event10() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event10");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event10"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event10
void GlobalNamespace::BeatmapEventType::_set_Event10(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event10");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event10", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event11
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event11() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event11"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event11
void GlobalNamespace::BeatmapEventType::_set_Event11(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event11", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event12
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event12() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event12"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event12
void GlobalNamespace::BeatmapEventType::_set_Event12(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event12", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event13
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event13"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event13
void GlobalNamespace::BeatmapEventType::_set_Event13(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event13", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event14
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event14() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event14");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event14"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event14
void GlobalNamespace::BeatmapEventType::_set_Event14(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event14");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event14", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event15
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event15"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event15
void GlobalNamespace::BeatmapEventType::_set_Event15(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event15", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event16
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event16() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event16"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event16
void GlobalNamespace::BeatmapEventType::_set_Event16(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event16", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Event17
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Event17() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Event17");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Event17"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Event17
void GlobalNamespace::BeatmapEventType::_set_Event17(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Event17");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Event17", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType VoidEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_VoidEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_VoidEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "VoidEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType VoidEvent
void GlobalNamespace::BeatmapEventType::_set_VoidEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_VoidEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "VoidEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special0
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special0"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special0
void GlobalNamespace::BeatmapEventType::_set_Special0(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special0", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special1
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special1"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special1
void GlobalNamespace::BeatmapEventType::_set_Special1(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special1", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special2
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special2"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special2
void GlobalNamespace::BeatmapEventType::_set_Special2(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special2", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType Special3
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventType::_get_Special3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_Special3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventType", "Special3"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType Special3
void GlobalNamespace::BeatmapEventType::_set_Special3(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_Special3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventType", "Special3", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::BeatmapEventType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::BeatmapEventType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventTypeExtensions
#include "GlobalNamespace/BeatmapEventTypeExtensions.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kEarlyRotationEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kEarlyRotationEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kEarlyRotationEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kEarlyRotationEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kEarlyRotationEvent
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kEarlyRotationEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kEarlyRotationEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kEarlyRotationEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLateRotationEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLateRotationEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLateRotationEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLateRotationEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLateRotationEvent
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLateRotationEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLateRotationEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLateRotationEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kBPMChangeEvent
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kBPMChangeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kBPMChangeEvent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kBPMChangeEvent"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kBPMChangeEvent
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kBPMChangeEvent(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kBPMChangeEvent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kBPMChangeEvent", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights1
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights1"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights1
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights1(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights1", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights2
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights2"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights2
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights2(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights2", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights3
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights3"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights3
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights3(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights3", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights4
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights4"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights4
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights4(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights4", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kLights5
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kLights5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kLights5"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kLights5
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights5(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kLights5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kLights5", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kRotateRings
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kRotateRings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kRotateRings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kRotateRings"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kRotateRings
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kRotateRings(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kRotateRings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kRotateRings", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapEventType kCompressExpand
GlobalNamespace::BeatmapEventType GlobalNamespace::BeatmapEventTypeExtensions::_get_kCompressExpand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_get_kCompressExpand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapEventType>("", "BeatmapEventTypeExtensions", "kCompressExpand"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapEventType kCompressExpand
void GlobalNamespace::BeatmapEventTypeExtensions::_set_kCompressExpand(GlobalNamespace::BeatmapEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::_set_kCompressExpand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapEventTypeExtensions", "kCompressExpand", value));
}
// Autogenerated method: BeatmapEventTypeExtensions.GetEventsValidForAllBeatmaps
System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>* GlobalNamespace::BeatmapEventTypeExtensions::GetEventsValidForAllBeatmaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::GetEventsValidForAllBeatmaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "GetEventsValidForAllBeatmaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsBPMChangeEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsBPMChangeEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsBPMChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsBPMChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsRotationEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsRotationEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsRotationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsRotationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsSpecialEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsSpecialEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsSpecialEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsSpecialEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsLightIntensityChangeEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsLightIntensityChangeEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsLightIntensityChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsLightIntensityChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsEarlyRotationEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyRotationEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyRotationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsEarlyRotationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsLateRotationEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsLateRotationEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsLateRotationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsLateRotationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsEarlyEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsEarlyEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsEarlyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated method: BeatmapEventTypeExtensions.IsSpawnAffectingEvent
bool GlobalNamespace::BeatmapEventTypeExtensions::IsSpawnAffectingEvent(GlobalNamespace::BeatmapEventType beatmapEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventTypeExtensions::IsSpawnAffectingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapEventTypeExtensions", "IsSpawnAffectingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, beatmapEventType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IReadonlyBeatmapLineData
#include "GlobalNamespace/IReadonlyBeatmapLineData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IReadonlyBeatmapLineData.get_beatmapObjectsData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>* GlobalNamespace::IReadonlyBeatmapLineData::get_beatmapObjectsData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IReadonlyBeatmapLineData::get_beatmapObjectsData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectsData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapLineData
#include "GlobalNamespace/BeatmapLineData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<BeatmapObjectData> _beatmapObjectsData
System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>* GlobalNamespace::BeatmapLineData::_get__beatmapObjectsData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLineData::_get__beatmapObjectsData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectsData"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<BeatmapObjectData> _beatmapObjectsData
void GlobalNamespace::BeatmapLineData::_set__beatmapObjectsData(System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLineData::_set__beatmapObjectsData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_beatmapObjectsData"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: BeatmapLineData.get_beatmapObjectsData
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>* GlobalNamespace::BeatmapLineData::get_beatmapObjectsData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLineData::get_beatmapObjectsData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectsData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapObjectData*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLineData.AddBeatmapObjectData
void GlobalNamespace::BeatmapLineData::AddBeatmapObjectData(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLineData::AddBeatmapObjectData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Single <time>k__BackingField
float GlobalNamespace::BeatmapObjectData::_get_$time$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::_get_$time$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<time>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single <time>k__BackingField
void GlobalNamespace::BeatmapObjectData::_set_$time$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::_set_$time$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<time>k__BackingField"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <lineIndex>k__BackingField
int GlobalNamespace::BeatmapObjectData::_get_$lineIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::_get_$lineIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<lineIndex>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <lineIndex>k__BackingField
void GlobalNamespace::BeatmapObjectData::_set_$lineIndex$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::_set_$lineIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<lineIndex>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: BeatmapObjectData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectData.get_time
float GlobalNamespace::BeatmapObjectData::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectData.set_time
void GlobalNamespace::BeatmapObjectData::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectData.get_lineIndex
int GlobalNamespace::BeatmapObjectData::get_lineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::get_lineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectData.set_lineIndex
void GlobalNamespace::BeatmapObjectData::set_lineIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::set_lineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectData.MirrorLineIndex
void GlobalNamespace::BeatmapObjectData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Autogenerated method: BeatmapObjectData.MoveTime
void GlobalNamespace::BeatmapObjectData::MoveTime(float newTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::MoveTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newTime);
}
// Autogenerated method: BeatmapObjectData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::BeatmapObjectData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType Note
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_Note() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_Note");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "Note"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType Note
void GlobalNamespace::BeatmapObjectType::_set_Note(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_Note");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "Note", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType Obstacle
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_Obstacle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_Obstacle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "Obstacle"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType Obstacle
void GlobalNamespace::BeatmapObjectType::_set_Obstacle(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_Obstacle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "Obstacle", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType Waypoint
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_Waypoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_Waypoint");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "Waypoint"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType Waypoint
void GlobalNamespace::BeatmapObjectType::_set_Waypoint(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_Waypoint");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "Waypoint", value));
}
// Autogenerated static field getter
// Get static field: static public BeatmapObjectType None
GlobalNamespace::BeatmapObjectType GlobalNamespace::BeatmapObjectType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapObjectType>("", "BeatmapObjectType", "None"));
}
// Autogenerated static field setter
// Set static field: static public BeatmapObjectType None
void GlobalNamespace::BeatmapObjectType::_set_None(GlobalNamespace::BeatmapObjectType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapObjectType", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::BeatmapObjectType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::BeatmapObjectType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BitMaskUtil
#include "GlobalNamespace/BitMaskUtil.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BitMaskUtil.NumberOfSetBits
uint GlobalNamespace::BitMaskUtil::NumberOfSetBits(uint64_t i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::NumberOfSetBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "NumberOfSetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, i);
}
// Autogenerated method: BitMaskUtil.NumberOfSetBits
uint GlobalNamespace::BitMaskUtil::NumberOfSetBits(uint i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::NumberOfSetBits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "NumberOfSetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, i);
}
// Autogenerated method: BitMaskUtil.ShiftLeft
uint64_t GlobalNamespace::BitMaskUtil::ShiftLeft(ByRef<uint64_t> value, ByRef<int> shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::ShiftLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "ShiftLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(shift)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(value), byref(shift));
}
// Autogenerated method: BitMaskUtil.ShiftRight
uint64_t GlobalNamespace::BitMaskUtil::ShiftRight(ByRef<uint64_t> value, ByRef<int> shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskUtil::ShiftRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskUtil", "ShiftRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(shift)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(value), byref(shift));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ColorType ColorA
GlobalNamespace::ColorType GlobalNamespace::ColorType::_get_ColorA() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_get_ColorA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ColorType>("", "ColorType", "ColorA"));
}
// Autogenerated static field setter
// Set static field: static public ColorType ColorA
void GlobalNamespace::ColorType::_set_ColorA(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_set_ColorA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorType", "ColorA", value));
}
// Autogenerated static field getter
// Get static field: static public ColorType ColorB
GlobalNamespace::ColorType GlobalNamespace::ColorType::_get_ColorB() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_get_ColorB");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ColorType>("", "ColorType", "ColorB"));
}
// Autogenerated static field setter
// Set static field: static public ColorType ColorB
void GlobalNamespace::ColorType::_set_ColorB(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_set_ColorB");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorType", "ColorB", value));
}
// Autogenerated static field getter
// Get static field: static public ColorType None
GlobalNamespace::ColorType GlobalNamespace::ColorType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ColorType>("", "ColorType", "None"));
}
// Autogenerated static field setter
// Set static field: static public ColorType None
void GlobalNamespace::ColorType::_set_None(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorType", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::ColorType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::ColorType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Up
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Up
void GlobalNamespace::NoteCutDirection::_set_Up(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Down
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Down
void GlobalNamespace::NoteCutDirection::_set_Down(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Left
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Left
void GlobalNamespace::NoteCutDirection::_set_Left(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Right
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Right
void GlobalNamespace::NoteCutDirection::_set_Right(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection UpLeft
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_UpLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_UpLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "UpLeft"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection UpLeft
void GlobalNamespace::NoteCutDirection::_set_UpLeft(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_UpLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "UpLeft", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection UpRight
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_UpRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_UpRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "UpRight"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection UpRight
void GlobalNamespace::NoteCutDirection::_set_UpRight(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_UpRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "UpRight", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection DownLeft
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_DownLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_DownLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "DownLeft"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection DownLeft
void GlobalNamespace::NoteCutDirection::_set_DownLeft(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_DownLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "DownLeft", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection DownRight
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_DownRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_DownRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "DownRight"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection DownRight
void GlobalNamespace::NoteCutDirection::_set_DownRight(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_DownRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "DownRight", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection Any
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "Any"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection Any
void GlobalNamespace::NoteCutDirection::_set_Any(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "Any", value));
}
// Autogenerated static field getter
// Get static field: static public NoteCutDirection None
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteCutDirection>("", "NoteCutDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public NoteCutDirection None
void GlobalNamespace::NoteCutDirection::_set_None(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutDirection", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::NoteCutDirection::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::NoteCutDirection::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirection::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutDirectionExtensions
#include "GlobalNamespace/NoteCutDirectionExtensions.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutDirectionExtensions.Direction
UnityEngine::Vector2 GlobalNamespace::NoteCutDirectionExtensions::Direction(GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::Direction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "Direction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection);
}
// Autogenerated method: NoteCutDirectionExtensions.RotationAngle
float GlobalNamespace::NoteCutDirectionExtensions::RotationAngle(GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::RotationAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "RotationAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection);
}
// Autogenerated method: NoteCutDirectionExtensions.Rotation
UnityEngine::Quaternion GlobalNamespace::NoteCutDirectionExtensions::Rotation(GlobalNamespace::NoteCutDirection cutDirection, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::Rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "Rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection, offset);
}
// Autogenerated method: NoteCutDirectionExtensions.IsMainDirection
bool GlobalNamespace::NoteCutDirectionExtensions::IsMainDirection(GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::IsMainDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "IsMainDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cutDirection);
}
// Autogenerated method: NoteCutDirectionExtensions.MainNoteCutDirectionFromCutDirAngle
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteCutDirectionExtensions::MainNoteCutDirectionFromCutDirAngle(float angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutDirectionExtensions::MainNoteCutDirectionFromCutDirAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteCutDirectionExtensions", "MainNoteCutDirectionFromCutDirAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteCutDirection, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ColorType <colorType>k__BackingField
GlobalNamespace::ColorType GlobalNamespace::NoteData::_get_$colorType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$colorType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<colorType>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private ColorType <colorType>k__BackingField
void GlobalNamespace::NoteData::_set_$colorType$k__BackingField(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$colorType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<colorType>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorType*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private NoteCutDirection <cutDirection>k__BackingField
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteData::_get_$cutDirection$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$cutDirection$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<cutDirection>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteCutDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private NoteCutDirection <cutDirection>k__BackingField
void GlobalNamespace::NoteData::_set_$cutDirection$k__BackingField(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$cutDirection$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<cutDirection>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::NoteCutDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single <timeToNextColorNote>k__BackingField
float GlobalNamespace::NoteData::_get_$timeToNextColorNote$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$timeToNextColorNote$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<timeToNextColorNote>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single <timeToNextColorNote>k__BackingField
void GlobalNamespace::NoteData::_set_$timeToNextColorNote$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$timeToNextColorNote$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<timeToNextColorNote>k__BackingField"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single <timeToPrevColorNote>k__BackingField
float GlobalNamespace::NoteData::_get_$timeToPrevColorNote$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$timeToPrevColorNote$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<timeToPrevColorNote>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single <timeToPrevColorNote>k__BackingField
void GlobalNamespace::NoteData::_set_$timeToPrevColorNote$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$timeToPrevColorNote$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<timeToPrevColorNote>k__BackingField"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private NoteLineLayer <noteLineLayer>k__BackingField
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::_get_$noteLineLayer$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$noteLineLayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteLineLayer>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private NoteLineLayer <noteLineLayer>k__BackingField
void GlobalNamespace::NoteData::_set_$noteLineLayer$k__BackingField(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$noteLineLayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteLineLayer>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private NoteLineLayer <startNoteLineLayer>k__BackingField
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::_get_$startNoteLineLayer$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$startNoteLineLayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startNoteLineLayer>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private NoteLineLayer <startNoteLineLayer>k__BackingField
void GlobalNamespace::NoteData::_set_$startNoteLineLayer$k__BackingField(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$startNoteLineLayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<startNoteLineLayer>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <flipLineIndex>k__BackingField
int GlobalNamespace::NoteData::_get_$flipLineIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$flipLineIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipLineIndex>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <flipLineIndex>k__BackingField
void GlobalNamespace::NoteData::_set_$flipLineIndex$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$flipLineIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipLineIndex>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single <flipYSide>k__BackingField
float GlobalNamespace::NoteData::_get_$flipYSide$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$flipYSide$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipYSide>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single <flipYSide>k__BackingField
void GlobalNamespace::NoteData::_set_$flipYSide$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$flipYSide$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<flipYSide>k__BackingField"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single <duration>k__BackingField
float GlobalNamespace::NoteData::_get_$duration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_get_$duration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<duration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single <duration>k__BackingField
void GlobalNamespace::NoteData::_set_$duration$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::_set_$duration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<duration>k__BackingField"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NoteData.get_colorType
GlobalNamespace::ColorType GlobalNamespace::NoteData::get_colorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ColorType, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_colorType
void GlobalNamespace::NoteData::set_colorType(GlobalNamespace::ColorType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_colorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_cutDirection
GlobalNamespace::NoteCutDirection GlobalNamespace::NoteData::get_cutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_cutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteCutDirection, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_cutDirection
void GlobalNamespace::NoteData::set_cutDirection(GlobalNamespace::NoteCutDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_cutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_timeToNextColorNote
float GlobalNamespace::NoteData::get_timeToNextColorNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_timeToNextColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeToNextColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_timeToNextColorNote
void GlobalNamespace::NoteData::set_timeToNextColorNote(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_timeToNextColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeToNextColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_timeToPrevColorNote
float GlobalNamespace::NoteData::get_timeToPrevColorNote() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_timeToPrevColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeToPrevColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_timeToPrevColorNote
void GlobalNamespace::NoteData::set_timeToPrevColorNote(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_timeToPrevColorNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeToPrevColorNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_noteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::get_noteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteLineLayer, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_noteLineLayer
void GlobalNamespace::NoteData::set_noteLineLayer(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_startNoteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteData::get_startNoteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_startNoteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startNoteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteLineLayer, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_startNoteLineLayer
void GlobalNamespace::NoteData::set_startNoteLineLayer(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_startNoteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startNoteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_flipLineIndex
int GlobalNamespace::NoteData::get_flipLineIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_flipLineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_flipLineIndex
void GlobalNamespace::NoteData::set_flipLineIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_flipLineIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_flipYSide
float GlobalNamespace::NoteData::get_flipYSide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_flipYSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flipYSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_flipYSide
void GlobalNamespace::NoteData::set_flipYSide(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_flipYSide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flipYSide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.get_duration
float GlobalNamespace::NoteData::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.set_duration
void GlobalNamespace::NoteData::set_duration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::set_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteData.CreateBombNoteData
GlobalNamespace::NoteData* GlobalNamespace::NoteData::CreateBombNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::CreateBombNoteData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteData", "CreateBombNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time, lineIndex, noteLineLayer);
}
// Autogenerated method: NoteData.CreateBasicNoteData
GlobalNamespace::NoteData* GlobalNamespace::NoteData::CreateBasicNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::CreateBasicNoteData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteData", "CreateBasicNoteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer), ::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(cutDirection)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time, lineIndex, noteLineLayer, colorType, cutDirection);
}
// Autogenerated method: NoteData.SetNoteStartLineLayer
void GlobalNamespace::NoteData::SetNoteStartLineLayer(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SetNoteStartLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteStartLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: NoteData.SetNoteFlipToNote
void GlobalNamespace::NoteData::SetNoteFlipToNote(GlobalNamespace::NoteData* targetNote) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SetNoteFlipToNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteFlipToNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetNote)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetNote);
}
// Autogenerated method: NoteData.SwitchNoteColorType
void GlobalNamespace::NoteData::SwitchNoteColorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SwitchNoteColorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SwitchNoteColorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.MirrorTransformCutDirection
void GlobalNamespace::NoteData::MirrorTransformCutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::MirrorTransformCutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorTransformCutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.SetNoteToAnyCutDirection
void GlobalNamespace::NoteData::SetNoteToAnyCutDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::SetNoteToAnyCutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteToAnyCutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.ChangeNoteCutDirection
void GlobalNamespace::NoteData::ChangeNoteCutDirection(GlobalNamespace::NoteCutDirection newCutDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::ChangeNoteCutDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeNoteCutDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newCutDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newCutDirection);
}
// Autogenerated method: NoteData.TransformNoteAOrBToRandomType
void GlobalNamespace::NoteData::TransformNoteAOrBToRandomType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::TransformNoteAOrBToRandomType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransformNoteAOrBToRandomType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::NoteData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::NoteData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Autogenerated method: NoteData.MirrorLineIndex
void GlobalNamespace::NoteData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteLineLayer Base
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteLineLayer::_get_Base() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_get_Base");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteLineLayer>("", "NoteLineLayer", "Base"));
}
// Autogenerated static field setter
// Set static field: static public NoteLineLayer Base
void GlobalNamespace::NoteLineLayer::_set_Base(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_set_Base");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteLineLayer", "Base", value));
}
// Autogenerated static field getter
// Get static field: static public NoteLineLayer Upper
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteLineLayer::_get_Upper() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_get_Upper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteLineLayer>("", "NoteLineLayer", "Upper"));
}
// Autogenerated static field setter
// Set static field: static public NoteLineLayer Upper
void GlobalNamespace::NoteLineLayer::_set_Upper(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_set_Upper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteLineLayer", "Upper", value));
}
// Autogenerated static field getter
// Get static field: static public NoteLineLayer Top
GlobalNamespace::NoteLineLayer GlobalNamespace::NoteLineLayer::_get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_get_Top");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteLineLayer>("", "NoteLineLayer", "Top"));
}
// Autogenerated static field setter
// Set static field: static public NoteLineLayer Top
void GlobalNamespace::NoteLineLayer::_set_Top(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_set_Top");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteLineLayer", "Top", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::NoteLineLayer::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::NoteLineLayer::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineLayer::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NotesInTimeRowProcessor
#include "GlobalNamespace/NotesInTimeRowProcessor.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<NoteData>[] _notesInColumns
::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>* GlobalNamespace::NotesInTimeRowProcessor::_get__notesInColumns() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_get__notesInColumns");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notesInColumns"))->offset;
  return *reinterpret_cast<::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<NoteData>[] _notesInColumns
void GlobalNamespace::NotesInTimeRowProcessor::_set__notesInColumns(::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_set__notesInColumns");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_notesInColumns"))->offset;
  *reinterpret_cast<::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowColorNotes
System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* GlobalNamespace::NotesInTimeRowProcessor::_get__currentTimeRowColorNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_get__currentTimeRowColorNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTimeRowColorNotes"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowColorNotes
void GlobalNamespace::NotesInTimeRowProcessor::_set__currentTimeRowColorNotes(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_set__currentTimeRowColorNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTimeRowColorNotes"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowAllNotes
System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* GlobalNamespace::NotesInTimeRowProcessor::_get__currentTimeRowAllNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_get__currentTimeRowAllNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTimeRowAllNotes"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowAllNotes
void GlobalNamespace::NotesInTimeRowProcessor::_set__currentTimeRowAllNotes(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_set__currentTimeRowAllNotes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentTimeRowAllNotes"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single _prevBasicNotesTimeRowTime
float GlobalNamespace::NotesInTimeRowProcessor::_get__prevBasicNotesTimeRowTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_get__prevBasicNotesTimeRowTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevBasicNotesTimeRowTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single _prevBasicNotesTimeRowTime
void GlobalNamespace::NotesInTimeRowProcessor::_set__prevBasicNotesTimeRowTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::_set__prevBasicNotesTimeRowTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevBasicNotesTimeRowTime"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: NotesInTimeRowProcessor.ProcessNote
void GlobalNamespace::NotesInTimeRowProcessor::ProcessNote(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: NotesInTimeRowProcessor.ProcessAllRemainingData
void GlobalNamespace::NotesInTimeRowProcessor::ProcessAllRemainingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessAllRemainingData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAllRemainingData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NotesInTimeRowProcessor.ProcessColorNotesInTimeRow
void GlobalNamespace::NotesInTimeRowProcessor::ProcessColorNotesInTimeRow(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* colorNotesData, float nextBasicNoteTimeRowTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessColorNotesInTimeRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessColorNotesInTimeRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorNotesData), ::il2cpp_utils::ExtractType(nextBasicNoteTimeRowTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorNotesData, nextBasicNoteTimeRowTime);
}
// Autogenerated method: NotesInTimeRowProcessor.ProcessAllNotesInTimeRow
void GlobalNamespace::NotesInTimeRowProcessor::ProcessAllNotesInTimeRow(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* notes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NotesInTimeRowProcessor::ProcessAllNotesInTimeRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAllNotesInTimeRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, notes);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private ObstacleType <obstacleType>k__BackingField
GlobalNamespace::ObstacleType GlobalNamespace::ObstacleData::_get_$obstacleType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::_get_$obstacleType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<obstacleType>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::ObstacleType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private ObstacleType <obstacleType>k__BackingField
void GlobalNamespace::ObstacleData::_set_$obstacleType$k__BackingField(GlobalNamespace::ObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::_set_$obstacleType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<obstacleType>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::ObstacleType*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single <duration>k__BackingField
float GlobalNamespace::ObstacleData::_get_$duration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::_get_$duration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<duration>k__BackingField"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single <duration>k__BackingField
void GlobalNamespace::ObstacleData::_set_$duration$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::_set_$duration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<duration>k__BackingField"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <width>k__BackingField
int GlobalNamespace::ObstacleData::_get_$width$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::_get_$width$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<width>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <width>k__BackingField
void GlobalNamespace::ObstacleData::_set_$width$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::_set_$width$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<width>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ObstacleData.get_obstacleType
GlobalNamespace::ObstacleType GlobalNamespace::ObstacleData::get_obstacleType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_obstacleType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_obstacleType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleType, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.set_obstacleType
void GlobalNamespace::ObstacleData::set_obstacleType(GlobalNamespace::ObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::set_obstacleType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_obstacleType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleData.get_duration
float GlobalNamespace::ObstacleData::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.set_duration
void GlobalNamespace::ObstacleData::set_duration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::set_duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleData.get_width
int GlobalNamespace::ObstacleData::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.set_width
void GlobalNamespace::ObstacleData::set_width(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::set_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleData.UpdateDuration
void GlobalNamespace::ObstacleData::UpdateDuration(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::UpdateDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: ObstacleData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::ObstacleData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::ObstacleData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleData.MirrorLineIndex
void GlobalNamespace::ObstacleData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleType
#include "GlobalNamespace/ObstacleType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ObstacleType FullHeight
GlobalNamespace::ObstacleType GlobalNamespace::ObstacleType::_get_FullHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_get_FullHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ObstacleType>("", "ObstacleType", "FullHeight"));
}
// Autogenerated static field setter
// Set static field: static public ObstacleType FullHeight
void GlobalNamespace::ObstacleType::_set_FullHeight(GlobalNamespace::ObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_set_FullHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleType", "FullHeight", value));
}
// Autogenerated static field getter
// Get static field: static public ObstacleType Top
GlobalNamespace::ObstacleType GlobalNamespace::ObstacleType::_get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_get_Top");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ObstacleType>("", "ObstacleType", "Top"));
}
// Autogenerated static field setter
// Set static field: static public ObstacleType Top
void GlobalNamespace::ObstacleType::_set_Top(GlobalNamespace::ObstacleType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_set_Top");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleType", "Top", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::ObstacleType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::ObstacleType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OffsetDirection
#include "GlobalNamespace/OffsetDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OffsetDirection Up
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Up
void GlobalNamespace::OffsetDirection::_set_Up(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection Down
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Down
void GlobalNamespace::OffsetDirection::_set_Down(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection Left
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Left
void GlobalNamespace::OffsetDirection::_set_Left(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection Right
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection Right
void GlobalNamespace::OffsetDirection::_set_Right(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection UpLeft
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_UpLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_UpLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "UpLeft"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection UpLeft
void GlobalNamespace::OffsetDirection::_set_UpLeft(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_UpLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "UpLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection UpRight
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_UpRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_UpRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "UpRight"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection UpRight
void GlobalNamespace::OffsetDirection::_set_UpRight(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_UpRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "UpRight", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection DownLeft
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_DownLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_DownLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "DownLeft"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection DownLeft
void GlobalNamespace::OffsetDirection::_set_DownLeft(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_DownLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "DownLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection DownRight
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_DownRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_DownRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "DownRight"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection DownRight
void GlobalNamespace::OffsetDirection::_set_DownRight(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_DownRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "DownRight", value));
}
// Autogenerated static field getter
// Get static field: static public OffsetDirection None
GlobalNamespace::OffsetDirection GlobalNamespace::OffsetDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OffsetDirection>("", "OffsetDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public OffsetDirection None
void GlobalNamespace::OffsetDirection::_set_None(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OffsetDirection", "None", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::OffsetDirection::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::OffsetDirection::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetDirection::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: WaypointData
#include "GlobalNamespace/WaypointData.hpp"
// Including type: BeatmapObjectType
#include "GlobalNamespace/BeatmapObjectType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private OffsetDirection <offsetDirection>k__BackingField
GlobalNamespace::OffsetDirection GlobalNamespace::WaypointData::_get_$offsetDirection$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::_get_$offsetDirection$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<offsetDirection>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::OffsetDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private OffsetDirection <offsetDirection>k__BackingField
void GlobalNamespace::WaypointData::_set_$offsetDirection$k__BackingField(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::_set_$offsetDirection$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<offsetDirection>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::OffsetDirection*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private NoteLineLayer <noteLineLayer>k__BackingField
GlobalNamespace::NoteLineLayer GlobalNamespace::WaypointData::_get_$noteLineLayer$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::_get_$noteLineLayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteLineLayer>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private NoteLineLayer <noteLineLayer>k__BackingField
void GlobalNamespace::WaypointData::_set_$noteLineLayer$k__BackingField(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::_set_$noteLineLayer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<noteLineLayer>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::NoteLineLayer*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: WaypointData.get_offsetDirection
GlobalNamespace::OffsetDirection GlobalNamespace::WaypointData::get_offsetDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::get_offsetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OffsetDirection, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.set_offsetDirection
void GlobalNamespace::WaypointData::set_offsetDirection(GlobalNamespace::OffsetDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::set_offsetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_offsetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WaypointData.get_noteLineLayer
GlobalNamespace::NoteLineLayer GlobalNamespace::WaypointData::get_noteLineLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::get_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteLineLayer, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.set_noteLineLayer
void GlobalNamespace::WaypointData::set_noteLineLayer(GlobalNamespace::NoteLineLayer value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::set_noteLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_noteLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: WaypointData.MirrorTransformOffsetDirection
void GlobalNamespace::WaypointData::MirrorTransformOffsetDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::MirrorTransformOffsetDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorTransformOffsetDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.get_beatmapObjectType
GlobalNamespace::BeatmapObjectType GlobalNamespace::WaypointData::get_beatmapObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::get_beatmapObjectType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectType, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.GetCopy
GlobalNamespace::BeatmapObjectData* GlobalNamespace::WaypointData::GetCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::GetCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectData*, false>(this, ___internal__method);
}
// Autogenerated method: WaypointData.MirrorLineIndex
void GlobalNamespace::WaypointData::MirrorLineIndex(int lineCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointData::MirrorLineIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MirrorLineIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineCount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lineCount);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncComputeManager
#include "GlobalNamespace/AsyncComputeManager.hpp"
// Including type: System.Collections.Concurrent.BlockingCollection`1
#include "System/Collections/Concurrent/BlockingCollection_1.hpp"
// Including type: AsyncComputeOperation
#include "GlobalNamespace/AsyncComputeOperation.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: AsyncComputeOperation`1
#include "GlobalNamespace/AsyncComputeOperation_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Concurrent.BlockingCollection`1<AsyncComputeOperation> _asyncComputeRequests
System::Collections::Concurrent::BlockingCollection_1<GlobalNamespace::AsyncComputeOperation*>* GlobalNamespace::AsyncComputeManager::_get__asyncComputeRequests() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::_get__asyncComputeRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_asyncComputeRequests"))->offset;
  return *reinterpret_cast<System::Collections::Concurrent::BlockingCollection_1<GlobalNamespace::AsyncComputeOperation*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Concurrent.BlockingCollection`1<AsyncComputeOperation> _asyncComputeRequests
void GlobalNamespace::AsyncComputeManager::_set__asyncComputeRequests(System::Collections::Concurrent::BlockingCollection_1<GlobalNamespace::AsyncComputeOperation*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::_set__asyncComputeRequests");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_asyncComputeRequests"))->offset;
  *reinterpret_cast<System::Collections::Concurrent::BlockingCollection_1<GlobalNamespace::AsyncComputeOperation*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Thread _computeThread
System::Threading::Thread* GlobalNamespace::AsyncComputeManager::_get__computeThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::_get__computeThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_computeThread"))->offset;
  return *reinterpret_cast<System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Threading.Thread _computeThread
void GlobalNamespace::AsyncComputeManager::_set__computeThread(System::Threading::Thread* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::_set__computeThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_computeThread"))->offset;
  *reinterpret_cast<System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
bool GlobalNamespace::AsyncComputeManager::_get__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::_get__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean _disposed
void GlobalNamespace::AsyncComputeManager::_set__disposed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::_set__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: AsyncComputeManager.Dispose
void GlobalNamespace::AsyncComputeManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AsyncComputeManager.BeginOperation
void GlobalNamespace::AsyncComputeManager::BeginOperation(GlobalNamespace::AsyncComputeOperation* operation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::BeginOperation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginOperation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(operation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, operation);
}
// Autogenerated method: AsyncComputeManager.ComputeThreadRun
void GlobalNamespace::AsyncComputeManager::ComputeThreadRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeManager::ComputeThreadRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeThreadRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncComputeOperation
#include "GlobalNamespace/AsyncComputeOperation.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _timeoutMs
int GlobalNamespace::AsyncComputeOperation::_get__timeoutMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeOperation::_get__timeoutMs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeoutMs"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 _timeoutMs
void GlobalNamespace::AsyncComputeOperation::_set__timeoutMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeOperation::_set__timeoutMs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeoutMs"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Diagnostics.Stopwatch _stopwatch
System::Diagnostics::Stopwatch* GlobalNamespace::AsyncComputeOperation::_get__stopwatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeOperation::_get__stopwatch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stopwatch"))->offset;
  return *reinterpret_cast<System::Diagnostics::Stopwatch**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Diagnostics.Stopwatch _stopwatch
void GlobalNamespace::AsyncComputeOperation::_set__stopwatch(System::Diagnostics::Stopwatch* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeOperation::_set__stopwatch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stopwatch"))->offset;
  *reinterpret_cast<System::Diagnostics::Stopwatch**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: AsyncComputeOperation.get_elapsedTime
double GlobalNamespace::AsyncComputeOperation::get_elapsedTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeOperation::get_elapsedTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_elapsedTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: AsyncComputeOperation.get_hasTimedOut
bool GlobalNamespace::AsyncComputeOperation::get_hasTimedOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeOperation::get_hasTimedOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTimedOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AsyncComputeOperation.Execute
void GlobalNamespace::AsyncComputeOperation::Execute(bool disposed) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncComputeOperation::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposed);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AuthenticationToken
#include "GlobalNamespace/AuthenticationToken.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly AuthenticationToken/Platform platform
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::_get_platform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_get_platform");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "platform"))->offset;
  return *reinterpret_cast<GlobalNamespace::AuthenticationToken::Platform*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly AuthenticationToken/Platform platform
void GlobalNamespace::AuthenticationToken::_set_platform(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_set_platform");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "platform"))->offset;
  *reinterpret_cast<GlobalNamespace::AuthenticationToken::Platform*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String userId
::Il2CppString* GlobalNamespace::AuthenticationToken::_get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_get_userId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userId"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.String userId
void GlobalNamespace::AuthenticationToken::_set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_set_userId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userId"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.String userName
::Il2CppString* GlobalNamespace::AuthenticationToken::_get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_get_userName");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.String userName
void GlobalNamespace::AuthenticationToken::_set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_set_userName");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userName"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte[] sessionToken
::Array<uint8_t>* GlobalNamespace::AuthenticationToken::_get_sessionToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_get_sessionToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sessionToken"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Byte[] sessionToken
void GlobalNamespace::AuthenticationToken::_set_sessionToken(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::_set_sessionToken");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sessionToken"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: AuthenticationToken.Serialize
void GlobalNamespace::AuthenticationToken::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: AuthenticationToken.CreateFromSerializedData
GlobalNamespace::AuthenticationToken GlobalNamespace::AuthenticationToken::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AuthenticationToken, false>(*this, ___internal__method, reader);
}
// Autogenerated method: AuthenticationToken.Deserialize
GlobalNamespace::AuthenticationToken GlobalNamespace::AuthenticationToken::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AuthenticationToken", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AuthenticationToken, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AuthenticationToken/Platform
#include "GlobalNamespace/AuthenticationToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform Test
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_Test() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_Test");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "Test"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform Test
void GlobalNamespace::AuthenticationToken::Platform::_set_Test(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_Test");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "Test", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform OculusRift
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_OculusRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_OculusRift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "OculusRift"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform OculusRift
void GlobalNamespace::AuthenticationToken::Platform::_set_OculusRift(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_OculusRift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "OculusRift", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform OculusQuest
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_OculusQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_OculusQuest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "OculusQuest"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform OculusQuest
void GlobalNamespace::AuthenticationToken::Platform::_set_OculusQuest(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_OculusQuest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "OculusQuest", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform Steam
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_Steam() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_Steam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "Steam"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform Steam
void GlobalNamespace::AuthenticationToken::Platform::_set_Steam(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_Steam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "Steam", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform PS4
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_PS4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_PS4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "PS4"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform PS4
void GlobalNamespace::AuthenticationToken::Platform::_set_PS4(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_PS4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "PS4", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform PS4Dev
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_PS4Dev() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_PS4Dev");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "PS4Dev"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform PS4Dev
void GlobalNamespace::AuthenticationToken::Platform::_set_PS4Dev(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_PS4Dev");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "PS4Dev", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform PS4Cert
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_PS4Cert() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_PS4Cert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "PS4Cert"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform PS4Cert
void GlobalNamespace::AuthenticationToken::Platform::_set_PS4Cert(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_PS4Cert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "PS4Cert", value));
}
// Autogenerated static field getter
// Get static field: static public AuthenticationToken/Platform Oculus
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationToken::Platform::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AuthenticationToken::Platform>("", "AuthenticationToken/Platform", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public AuthenticationToken/Platform Oculus
void GlobalNamespace::AuthenticationToken::Platform::_set_Oculus(GlobalNamespace::AuthenticationToken::Platform value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AuthenticationToken/Platform", "Oculus", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t GlobalNamespace::AuthenticationToken::Platform::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte value__
void GlobalNamespace::AuthenticationToken::Platform::_set_value__(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationToken::Platform::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetDebug
#include "GlobalNamespace/BGNetDebug.hpp"
// Including type: BGNetDebug/ILogger
#include "GlobalNamespace/BGNetDebug_ILogger.hpp"
// Including type: BGNetDebug/NetLogger
#include "GlobalNamespace/BGNetDebug_NetLogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE88A9C
// Autogenerated static field getter
// Get static field: static private BGNetDebug/ILogger _logger
GlobalNamespace::BGNetDebug::ILogger* GlobalNamespace::BGNetDebug::_get__logger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::_get__logger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::BGNetDebug::ILogger*>("", "BGNetDebug", "_logger"));
}
// Autogenerated static field setter
// Set static field: static private BGNetDebug/ILogger _logger
void GlobalNamespace::BGNetDebug::_set__logger(GlobalNamespace::BGNetDebug::ILogger* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::_set__logger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BGNetDebug", "_logger", value));
}
// Autogenerated method: BGNetDebug..cctor
void GlobalNamespace::BGNetDebug::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BGNetDebug.SetLogger
void GlobalNamespace::BGNetDebug::SetLogger(GlobalNamespace::BGNetDebug::ILogger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::SetLogger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "SetLogger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logger)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, logger);
}
// Autogenerated method: BGNetDebug.Log
void GlobalNamespace::BGNetDebug::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: BGNetDebug.LogError
void GlobalNamespace::BGNetDebug::LogError(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::LogError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: BGNetDebug.LogWarning
void GlobalNamespace::BGNetDebug::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BGNetDebug", "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetDebug/ILogger
#include "GlobalNamespace/BGNetDebug_ILogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BGNetDebug/ILogger.LogInfo
void GlobalNamespace::BGNetDebug::ILogger::LogInfo(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::ILogger::LogInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetDebug/ILogger.LogError
void GlobalNamespace::BGNetDebug::ILogger::LogError(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::ILogger::LogError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetDebug/ILogger.LogWarning
void GlobalNamespace::BGNetDebug::ILogger::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::ILogger::LogWarning");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetDebug/NetLogger
#include "GlobalNamespace/BGNetDebug_NetLogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BGNetDebug/NetLogger.WriteNet
void GlobalNamespace::BGNetDebug::NetLogger::WriteNet(LiteNetLib::NetLogLevel level, ::Il2CppString* str, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetDebug::NetLogger::WriteNet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level, str, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteNet(LiteNetLib.NetLogLevel level, System.String str, params System.Object[] args)
void GlobalNamespace::BGNetDebug::NetLogger::WriteNet(LiteNetLib::NetLogLevel level, ::Il2CppString* str, std::initializer_list<::Il2CppObject*> args) {
  GlobalNamespace::BGNetDebug::NetLogger::WriteNet(level, str, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BGNetLogger
#include "GlobalNamespace/BGNetLogger.hpp"
// Including type: Microsoft.Extensions.Logging.ILogger
#include "Microsoft/Extensions/Logging/ILogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Microsoft.Extensions.Logging.ILogger[] _loggers
::Array<Microsoft::Extensions::Logging::ILogger*>* GlobalNamespace::BGNetLogger::_get__loggers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::_get__loggers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_loggers"))->offset;
  return *reinterpret_cast<::Array<Microsoft::Extensions::Logging::ILogger*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly Microsoft.Extensions.Logging.ILogger[] _loggers
void GlobalNamespace::BGNetLogger::_set__loggers(::Array<Microsoft::Extensions::Logging::ILogger*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::_set__loggers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_loggers"))->offset;
  *reinterpret_cast<::Array<Microsoft::Extensions::Logging::ILogger*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: BGNetLogger.LogError
void GlobalNamespace::BGNetLogger::LogError(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::LogError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetLogger.LogInfo
void GlobalNamespace::BGNetLogger::LogInfo(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::LogInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BGNetLogger.LogWarning
void GlobalNamespace::BGNetLogger::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BGNetLogger::LogWarning");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BatchExtensions
#include "GlobalNamespace/BatchExtensions.hpp"
// Including type: BatchExtensions/<Batch>d__0`1
#include "GlobalNamespace/BatchExtensions_-Batch-d__0_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly BeatmapDifficultyMask difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapLevelSelectionMask::_get_difficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::_get_difficulties");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "difficulties"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapDifficultyMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly BeatmapDifficultyMask difficulties
void GlobalNamespace::BeatmapLevelSelectionMask::_set_difficulties(GlobalNamespace::BeatmapDifficultyMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::_set_difficulties");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "difficulties"))->offset;
  *reinterpret_cast<GlobalNamespace::BeatmapDifficultyMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly GameplayModifierMask modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::BeatmapLevelSelectionMask::_get_modifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::_get_modifiers");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modifiers"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayModifierMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly GameplayModifierMask modifiers
void GlobalNamespace::BeatmapLevelSelectionMask::_set_modifiers(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::_set_modifiers");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "modifiers"))->offset;
  *reinterpret_cast<GlobalNamespace::GameplayModifierMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly SongPackMask songPacks
GlobalNamespace::SongPackMask GlobalNamespace::BeatmapLevelSelectionMask::_get_songPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::_get_songPacks");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "songPacks"))->offset;
  return *reinterpret_cast<GlobalNamespace::SongPackMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly SongPackMask songPacks
void GlobalNamespace::BeatmapLevelSelectionMask::_set_songPacks(GlobalNamespace::SongPackMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::_set_songPacks");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "songPacks"))->offset;
  *reinterpret_cast<GlobalNamespace::SongPackMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: BeatmapLevelSelectionMask.Equals
bool GlobalNamespace::BeatmapLevelSelectionMask::Equals(GlobalNamespace::BeatmapLevelSelectionMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: BeatmapLevelSelectionMask.Serialize
void GlobalNamespace::BeatmapLevelSelectionMask::Serialize(LiteNetLib::Utils::NetDataWriter* writer, uint version) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::Serialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(version)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer, version);
}
// Autogenerated method: BeatmapLevelSelectionMask.Deserialize
GlobalNamespace::BeatmapLevelSelectionMask GlobalNamespace::BeatmapLevelSelectionMask::Deserialize(LiteNetLib::Utils::NetDataReader* reader, uint version) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelSelectionMask", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(version)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapLevelSelectionMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader, version);
}
// Autogenerated method: BeatmapLevelSelectionMask.Equals
bool GlobalNamespace::BeatmapLevelSelectionMask::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: BeatmapLevelSelectionMask.GetHashCode
int GlobalNamespace::BeatmapLevelSelectionMask::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: BeatmapLevelSelectionMask.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::BeatmapLevelSelectionMask& l, const GlobalNamespace::BeatmapLevelSelectionMask& r) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelSelectionMask", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, r);
}
// Autogenerated method: BeatmapLevelSelectionMask.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::BeatmapLevelSelectionMask& l, const GlobalNamespace::BeatmapLevelSelectionMask& r) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSelectionMask::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapLevelSelectionMask", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, l, r);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ByteArrayNetSerializable
#include "GlobalNamespace/ByteArrayNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Byte[] _data
::Array<uint8_t>* GlobalNamespace::ByteArrayNetSerializable::_get__data() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_get__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Byte[] _data
void GlobalNamespace::ByteArrayNetSerializable::_set__data(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_set__data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_data"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _name
::Il2CppString* GlobalNamespace::ByteArrayNetSerializable::_get__name() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_get__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.String _name
void GlobalNamespace::ByteArrayNetSerializable::_set__name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_set__name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_name"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _allowNull
bool GlobalNamespace::ByteArrayNetSerializable::_get__allowNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_get__allowNull");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allowNull"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Boolean _allowNull
void GlobalNamespace::ByteArrayNetSerializable::_set__allowNull(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_set__allowNull");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_allowNull"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _minLength
int GlobalNamespace::ByteArrayNetSerializable::_get__minLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_get__minLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 _minLength
void GlobalNamespace::ByteArrayNetSerializable::_set__minLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_set__minLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minLength"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _maxLength
int GlobalNamespace::ByteArrayNetSerializable::_get__maxLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_get__maxLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 _maxLength
void GlobalNamespace::ByteArrayNetSerializable::_set__maxLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::_set__maxLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxLength"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ByteArrayNetSerializable.get_data
::Array<uint8_t>* GlobalNamespace::ByteArrayNetSerializable::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::get_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: ByteArrayNetSerializable.set_data
void GlobalNamespace::ByteArrayNetSerializable::set_data(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::set_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ByteArrayNetSerializable.Serialize
void GlobalNamespace::ByteArrayNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ByteArrayNetSerializable.Deserialize
void GlobalNamespace::ByteArrayNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ByteArrayNetSerializable.Clear
void GlobalNamespace::ByteArrayNetSerializable::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CPUMonitor
#include "GlobalNamespace/CPUMonitor.hpp"
// Including type: RollingAverage
#include "GlobalNamespace/RollingAverage.hpp"
// Including type: System.Diagnostics.Process
#include "System/Diagnostics/Process.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly RollingAverage _utilization
GlobalNamespace::RollingAverage* GlobalNamespace::CPUMonitor::_get__utilization() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_get__utilization");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_utilization"))->offset;
  return *reinterpret_cast<GlobalNamespace::RollingAverage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly RollingAverage _utilization
void GlobalNamespace::CPUMonitor::_set__utilization(GlobalNamespace::RollingAverage* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_set__utilization");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_utilization"))->offset;
  *reinterpret_cast<GlobalNamespace::RollingAverage**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Diagnostics.Process _currentProcess
System::Diagnostics::Process* GlobalNamespace::CPUMonitor::_get__currentProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_get__currentProcess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentProcess"))->offset;
  return *reinterpret_cast<System::Diagnostics::Process**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Diagnostics.Process _currentProcess
void GlobalNamespace::CPUMonitor::_set__currentProcess(System::Diagnostics::Process* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_set__currentProcess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentProcess"))->offset;
  *reinterpret_cast<System::Diagnostics::Process**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _processorCount
int GlobalNamespace::CPUMonitor::_get__processorCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_get__processorCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_processorCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 _processorCount
void GlobalNamespace::CPUMonitor::_set__processorCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_set__processorCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_processorCount"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _lastSampleTime
int64_t GlobalNamespace::CPUMonitor::_get__lastSampleTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_get__lastSampleTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSampleTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int64 _lastSampleTime
void GlobalNamespace::CPUMonitor::_set__lastSampleTime(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_set__lastSampleTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSampleTime"))->offset;
  *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _lastSampleValue
int64_t GlobalNamespace::CPUMonitor::_get__lastSampleValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_get__lastSampleValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSampleValue"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int64 _lastSampleValue
void GlobalNamespace::CPUMonitor::_set__lastSampleValue(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::_set__lastSampleValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSampleValue"))->offset;
  *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: CPUMonitor.get_utilization
float GlobalNamespace::CPUMonitor::get_utilization() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::get_utilization");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_utilization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CPUMonitor.PollUpdate
void GlobalNamespace::CPUMonitor::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CPUMonitor::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CannotStartGameReason
#include "GlobalNamespace/CannotStartGameReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public CannotStartGameReason None
GlobalNamespace::CannotStartGameReason GlobalNamespace::CannotStartGameReason::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CannotStartGameReason>("", "CannotStartGameReason", "None"));
}
// Autogenerated static field setter
// Set static field: static public CannotStartGameReason None
void GlobalNamespace::CannotStartGameReason::_set_None(GlobalNamespace::CannotStartGameReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CannotStartGameReason", "None", value));
}
// Autogenerated static field getter
// Get static field: static public CannotStartGameReason AllPlayersSpectating
GlobalNamespace::CannotStartGameReason GlobalNamespace::CannotStartGameReason::_get_AllPlayersSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_get_AllPlayersSpectating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CannotStartGameReason>("", "CannotStartGameReason", "AllPlayersSpectating"));
}
// Autogenerated static field setter
// Set static field: static public CannotStartGameReason AllPlayersSpectating
void GlobalNamespace::CannotStartGameReason::_set_AllPlayersSpectating(GlobalNamespace::CannotStartGameReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_set_AllPlayersSpectating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CannotStartGameReason", "AllPlayersSpectating", value));
}
// Autogenerated static field getter
// Get static field: static public CannotStartGameReason NoSongSelected
GlobalNamespace::CannotStartGameReason GlobalNamespace::CannotStartGameReason::_get_NoSongSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_get_NoSongSelected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CannotStartGameReason>("", "CannotStartGameReason", "NoSongSelected"));
}
// Autogenerated static field setter
// Set static field: static public CannotStartGameReason NoSongSelected
void GlobalNamespace::CannotStartGameReason::_set_NoSongSelected(GlobalNamespace::CannotStartGameReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_set_NoSongSelected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CannotStartGameReason", "NoSongSelected", value));
}
// Autogenerated static field getter
// Get static field: static public CannotStartGameReason AllPlayersNotInLobby
GlobalNamespace::CannotStartGameReason GlobalNamespace::CannotStartGameReason::_get_AllPlayersNotInLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_get_AllPlayersNotInLobby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CannotStartGameReason>("", "CannotStartGameReason", "AllPlayersNotInLobby"));
}
// Autogenerated static field setter
// Set static field: static public CannotStartGameReason AllPlayersNotInLobby
void GlobalNamespace::CannotStartGameReason::_set_AllPlayersNotInLobby(GlobalNamespace::CannotStartGameReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_set_AllPlayersNotInLobby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CannotStartGameReason", "AllPlayersNotInLobby", value));
}
// Autogenerated static field getter
// Get static field: static public CannotStartGameReason DoNotOwnSong
GlobalNamespace::CannotStartGameReason GlobalNamespace::CannotStartGameReason::_get_DoNotOwnSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_get_DoNotOwnSong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CannotStartGameReason>("", "CannotStartGameReason", "DoNotOwnSong"));
}
// Autogenerated static field setter
// Set static field: static public CannotStartGameReason DoNotOwnSong
void GlobalNamespace::CannotStartGameReason::_set_DoNotOwnSong(GlobalNamespace::CannotStartGameReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_set_DoNotOwnSong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CannotStartGameReason", "DoNotOwnSong", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::CannotStartGameReason::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::CannotStartGameReason::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CannotStartGameReason::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSchemeNetSerializable
#include "GlobalNamespace/ColorSchemeNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public ColorNoAlphaSerializable saberAColor
GlobalNamespace::ColorNoAlphaSerializable GlobalNamespace::ColorSchemeNetSerializable::_get_saberAColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_get_saberAColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberAColor"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public ColorNoAlphaSerializable saberAColor
void GlobalNamespace::ColorSchemeNetSerializable::_set_saberAColor(GlobalNamespace::ColorNoAlphaSerializable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_set_saberAColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberAColor"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public ColorNoAlphaSerializable saberBColor
GlobalNamespace::ColorNoAlphaSerializable GlobalNamespace::ColorSchemeNetSerializable::_get_saberBColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_get_saberBColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberBColor"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public ColorNoAlphaSerializable saberBColor
void GlobalNamespace::ColorSchemeNetSerializable::_set_saberBColor(GlobalNamespace::ColorNoAlphaSerializable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_set_saberBColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "saberBColor"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public ColorNoAlphaSerializable obstaclesColor
GlobalNamespace::ColorNoAlphaSerializable GlobalNamespace::ColorSchemeNetSerializable::_get_obstaclesColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_get_obstaclesColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "obstaclesColor"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public ColorNoAlphaSerializable obstaclesColor
void GlobalNamespace::ColorSchemeNetSerializable::_set_obstaclesColor(GlobalNamespace::ColorNoAlphaSerializable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_set_obstaclesColor");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "obstaclesColor"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public ColorNoAlphaSerializable environmentColor0
GlobalNamespace::ColorNoAlphaSerializable GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor0"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public ColorNoAlphaSerializable environmentColor0
void GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor0(GlobalNamespace::ColorNoAlphaSerializable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor0");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor0"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public ColorNoAlphaSerializable environmentColor1
GlobalNamespace::ColorNoAlphaSerializable GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor1"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public ColorNoAlphaSerializable environmentColor1
void GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor1(GlobalNamespace::ColorNoAlphaSerializable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor1");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor1"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public ColorNoAlphaSerializable environmentColor0Boost
GlobalNamespace::ColorNoAlphaSerializable GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor0Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor0Boost");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor0Boost"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public ColorNoAlphaSerializable environmentColor0Boost
void GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor0Boost(GlobalNamespace::ColorNoAlphaSerializable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor0Boost");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor0Boost"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public ColorNoAlphaSerializable environmentColor1Boost
GlobalNamespace::ColorNoAlphaSerializable GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor1Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_get_environmentColor1Boost");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor1Boost"))->offset;
  return *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public ColorNoAlphaSerializable environmentColor1Boost
void GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor1Boost(GlobalNamespace::ColorNoAlphaSerializable value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::_set_environmentColor1Boost");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "environmentColor1Boost"))->offset;
  *reinterpret_cast<GlobalNamespace::ColorNoAlphaSerializable*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ColorSchemeNetSerializable.Serialize
void GlobalNamespace::ColorSchemeNetSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: ColorSchemeNetSerializable.Deserialize
void GlobalNamespace::ColorSchemeNetSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeNetSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: ConnectedPlayerManager/ConnectedPlayer
#include "GlobalNamespace/ConnectedPlayerManager_ConnectedPlayer.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: ConnectedPlayerManager/MessageType
#include "GlobalNamespace/ConnectedPlayerManager_MessageType.hpp"
// Including type: ConnectedPlayerManager/PlayerConnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerConnectedPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerIdentityPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerIdentityPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerAvatarPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerAvatarPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerStatePacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerStatePacket.hpp"
// Including type: ConnectedPlayerManager/PlayerSortOrderPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerSortOrderPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerDisconnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerDisconnectedPacket.hpp"
// Including type: ConnectedPlayerManager/KickPlayerPacket
#include "GlobalNamespace/ConnectedPlayerManager_KickPlayerPacket.hpp"
// Including type: ConnectedPlayerManager/SyncTimePacket
#include "GlobalNamespace/ConnectedPlayerManager_SyncTimePacket.hpp"
// Including type: ConnectedPlayerManager/PlayerLatencyPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerLatencyPacket.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: RollingAverage
#include "GlobalNamespace/RollingAverage.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: NetworkPacketSerializer`2
#include "GlobalNamespace/NetworkPacketSerializer_2.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
// Including type: INetworkPacketSubSerializer`1
#include "GlobalNamespace/INetworkPacketSubSerializer_1.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 invalidSortIndex
int GlobalNamespace::ConnectedPlayerManager::_get_invalidSortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_invalidSortIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ConnectedPlayerManager", "invalidSortIndex"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 invalidSortIndex
void GlobalNamespace::ConnectedPlayerManager::_set_invalidSortIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_invalidSortIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "invalidSortIndex", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte kAllConnectionsId
uint8_t GlobalNamespace::ConnectedPlayerManager::_get_kAllConnectionsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kAllConnectionsId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "ConnectedPlayerManager", "kAllConnectionsId"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kAllConnectionsId
void GlobalNamespace::ConnectedPlayerManager::_set_kAllConnectionsId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kAllConnectionsId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kAllConnectionsId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte kLocalConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::_get_kLocalConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kLocalConnectionId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "ConnectedPlayerManager", "kLocalConnectionId"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kLocalConnectionId
void GlobalNamespace::ConnectedPlayerManager::_set_kLocalConnectionId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kLocalConnectionId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kLocalConnectionId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSyncTimeUpdateFrequency
float GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeUpdateFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeUpdateFrequency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ConnectedPlayerManager", "kSyncTimeUpdateFrequency"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSyncTimeUpdateFrequency
void GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeUpdateFrequency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeUpdateFrequency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kSyncTimeUpdateFrequency", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSyncTimeAllowedReceiveWindow
float GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeAllowedReceiveWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kSyncTimeAllowedReceiveWindow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ConnectedPlayerManager", "kSyncTimeAllowedReceiveWindow"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSyncTimeAllowedReceiveWindow
void GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeAllowedReceiveWindow(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kSyncTimeAllowedReceiveWindow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kSyncTimeAllowedReceiveWindow", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxUnreliableMessageLength
int GlobalNamespace::ConnectedPlayerManager::_get_kMaxUnreliableMessageLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_kMaxUnreliableMessageLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ConnectedPlayerManager", "kMaxUnreliableMessageLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxUnreliableMessageLength
void GlobalNamespace::ConnectedPlayerManager::_set_kMaxUnreliableMessageLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_kMaxUnreliableMessageLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager", "kMaxUnreliableMessageLength", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Action connectedEvent
System::Action* GlobalNamespace::ConnectedPlayerManager::_get_connectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_connectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedEvent"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action connectedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_connectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectedEvent"))->offset;
  *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action reinitializedEvent
System::Action* GlobalNamespace::ConnectedPlayerManager::_get_reinitializedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_reinitializedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reinitializedEvent"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action reinitializedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_reinitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_reinitializedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reinitializedEvent"))->offset;
  *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<DisconnectedReason> disconnectedEvent
System::Action_1<GlobalNamespace::DisconnectedReason>* GlobalNamespace::ConnectedPlayerManager::_get_disconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_disconnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disconnectedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::DisconnectedReason>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<DisconnectedReason> disconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_disconnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disconnectedEvent"))->offset;
  *reinterpret_cast<System::Action_1<GlobalNamespace::DisconnectedReason>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<ConnectionFailedReason> connectionFailedEvent
System::Action_1<GlobalNamespace::ConnectionFailedReason>* GlobalNamespace::ConnectedPlayerManager::_get_connectionFailedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_connectionFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectionFailedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::ConnectionFailedReason>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<ConnectionFailedReason> connectionFailedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_connectionFailedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "connectionFailedEvent"))->offset;
  *reinterpret_cast<System::Action_1<GlobalNamespace::ConnectionFailedReason>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IConnectedPlayer> playerConnectedEvent
System::Action_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ConnectedPlayerManager::_get_playerConnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_playerConnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerConnectedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<IConnectedPlayer> playerConnectedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_playerConnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerConnectedEvent"))->offset;
  *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
System::Action_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ConnectedPlayerManager::_get_playerDisconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_playerDisconnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDisconnectedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_playerDisconnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerDisconnectedEvent"))->offset;
  *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IConnectedPlayer> playerStateChangedEvent
System::Action_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ConnectedPlayerManager::_get_playerStateChangedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_playerStateChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerStateChangedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<IConnectedPlayer> playerStateChangedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_playerStateChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerStateChangedEvent"))->offset;
  *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IConnectedPlayer> playerAvatarChangedEvent
System::Action_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ConnectedPlayerManager::_get_playerAvatarChangedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_playerAvatarChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerAvatarChangedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<IConnectedPlayer> playerAvatarChangedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_playerAvatarChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerAvatarChangedEvent"))->offset;
  *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<IConnectedPlayer> playerOrderChangedEvent
System::Action_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ConnectedPlayerManager::_get_playerOrderChangedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_playerOrderChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerOrderChangedEvent"))->offset;
  return *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<IConnectedPlayer> playerOrderChangedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_playerOrderChangedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerOrderChangedEvent"))->offset;
  *reinterpret_cast<System::Action_1<GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action syncTimeInitializedEvent
System::Action* GlobalNamespace::ConnectedPlayerManager::_get_syncTimeInitializedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get_syncTimeInitializedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncTimeInitializedEvent"))->offset;
  return *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action syncTimeInitializedEvent
void GlobalNamespace::ConnectedPlayerManager::_set_syncTimeInitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set_syncTimeInitializedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncTimeInitializedEvent"))->offset;
  *reinterpret_cast<System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int64 _startTicks
int64_t GlobalNamespace::ConnectedPlayerManager::_get__startTicks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__startTicks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startTicks"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int64 _startTicks
void GlobalNamespace::ConnectedPlayerManager::_set__startTicks(int64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__startTicks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_startTicks"))->offset;
  *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly RollingAverage _syncTimeOffset
GlobalNamespace::RollingAverage* GlobalNamespace::ConnectedPlayerManager::_get__syncTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__syncTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncTimeOffset"))->offset;
  return *reinterpret_cast<GlobalNamespace::RollingAverage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly RollingAverage _syncTimeOffset
void GlobalNamespace::ConnectedPlayerManager::_set__syncTimeOffset(GlobalNamespace::RollingAverage* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__syncTimeOffset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncTimeOffset"))->offset;
  *reinterpret_cast<GlobalNamespace::RollingAverage**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single _syncTimeDelay
float GlobalNamespace::ConnectedPlayerManager::_get__syncTimeDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__syncTimeDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncTimeDelay"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single _syncTimeDelay
void GlobalNamespace::ConnectedPlayerManager::_set__syncTimeDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__syncTimeDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_syncTimeDelay"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnectionManager _connectionManager
GlobalNamespace::IConnectionManager* GlobalNamespace::ConnectedPlayerManager::_get__connectionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__connectionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnectionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly IConnectionManager _connectionManager
void GlobalNamespace::ConnectedPlayerManager::_set__connectionManager(GlobalNamespace::IConnectionManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__connectionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectionManager"))->offset;
  *reinterpret_cast<GlobalNamespace::IConnectionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetDataWriter _temporaryDataWriter
LiteNetLib::Utils::NetDataWriter* GlobalNamespace::ConnectedPlayerManager::_get__temporaryDataWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__temporaryDataWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_temporaryDataWriter"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly LiteNetLib.Utils.NetDataWriter _temporaryDataWriter
void GlobalNamespace::ConnectedPlayerManager::_set__temporaryDataWriter(LiteNetLib::Utils::NetDataWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__temporaryDataWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_temporaryDataWriter"))->offset;
  *reinterpret_cast<LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetDataWriter _reliableDataWriter
LiteNetLib::Utils::NetDataWriter* GlobalNamespace::ConnectedPlayerManager::_get__reliableDataWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__reliableDataWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reliableDataWriter"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly LiteNetLib.Utils.NetDataWriter _reliableDataWriter
void GlobalNamespace::ConnectedPlayerManager::_set__reliableDataWriter(LiteNetLib::Utils::NetDataWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__reliableDataWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_reliableDataWriter"))->offset;
  *reinterpret_cast<LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetDataWriter _unreliableDataWriter
LiteNetLib::Utils::NetDataWriter* GlobalNamespace::ConnectedPlayerManager::_get__unreliableDataWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__unreliableDataWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unreliableDataWriter"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly LiteNetLib.Utils.NetDataWriter _unreliableDataWriter
void GlobalNamespace::ConnectedPlayerManager::_set__unreliableDataWriter(LiteNetLib::Utils::NetDataWriter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__unreliableDataWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unreliableDataWriter"))->offset;
  *reinterpret_cast<LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ConnectedPlayerManager/ConnectedPlayer> _players
System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>* GlobalNamespace::ConnectedPlayerManager::_get__players() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__players");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_players"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.List`1<ConnectedPlayerManager/ConnectedPlayer> _players
void GlobalNamespace::ConnectedPlayerManager::_set__players(System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__players");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_players"))->offset;
  *reinterpret_cast<System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.HashSet`1<System.String> _localPlayerState
System::Collections::Generic::HashSet_1<::Il2CppString*>* GlobalNamespace::ConnectedPlayerManager::_get__localPlayerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__localPlayerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerState"))->offset;
  return *reinterpret_cast<System::Collections::Generic::HashSet_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Generic.HashSet`1<System.String> _localPlayerState
void GlobalNamespace::ConnectedPlayerManager::_set__localPlayerState(System::Collections::Generic::HashSet_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__localPlayerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerState"))->offset;
  *reinterpret_cast<System::Collections::Generic::HashSet_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerAvatarData _localPlayerAvatar
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::ConnectedPlayerManager::_get__localPlayerAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__localPlayerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerAvatar"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private MultiplayerAvatarData _localPlayerAvatar
void GlobalNamespace::ConnectedPlayerManager::_set__localPlayerAvatar(GlobalNamespace::MultiplayerAvatarData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__localPlayerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayerAvatar"))->offset;
  *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private ConnectedPlayerManager/ConnectedPlayer _localPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::_get__localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__localPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayer"))->offset;
  return *reinterpret_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private ConnectedPlayerManager/ConnectedPlayer _localPlayer
void GlobalNamespace::ConnectedPlayerManager::_set__localPlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__localPlayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localPlayer"))->offset;
  *reinterpret_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Byte _lastConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::_get__lastConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__lastConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastConnectionId"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Byte _lastConnectionId
void GlobalNamespace::ConnectedPlayerManager::_set__lastConnectionId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__lastConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastConnectionId"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastSyncTimeUpdate
float GlobalNamespace::ConnectedPlayerManager::_get__lastSyncTimeUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__lastSyncTimeUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSyncTimeUpdate"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single _lastSyncTimeUpdate
void GlobalNamespace::ConnectedPlayerManager::_set__lastSyncTimeUpdate(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__lastSyncTimeUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSyncTimeUpdate"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Single _lastPollTime
float GlobalNamespace::ConnectedPlayerManager::_get__lastPollTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__lastPollTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastPollTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Single _lastPollTime
void GlobalNamespace::ConnectedPlayerManager::_set__lastPollTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__lastPollTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastPollTime"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly NetworkPacketSerializer`2<ConnectedPlayerManager/InternalMessageType,IConnectedPlayer> _messageSerializer
GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::ConnectedPlayerManager::_get__messageSerializer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_get__messageSerializer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_messageSerializer"))->offset;
  return *reinterpret_cast<GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly NetworkPacketSerializer`2<ConnectedPlayerManager/InternalMessageType,IConnectedPlayer> _messageSerializer
void GlobalNamespace::ConnectedPlayerManager::_set__messageSerializer(GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::_set__messageSerializer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_messageSerializer"))->offset;
  *reinterpret_cast<GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager.get_isConnectionOwner
bool GlobalNamespace::ConnectedPlayerManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isConnectedOrConnecting
bool GlobalNamespace::ConnectedPlayerManager::get_isConnectedOrConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnectedOrConnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectedOrConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isConnected
bool GlobalNamespace::ConnectedPlayerManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isConnecting
bool GlobalNamespace::ConnectedPlayerManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isConnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_isDisconnecting
bool GlobalNamespace::ConnectedPlayerManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_isDisconnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_localPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_connectedPlayerCount
int GlobalNamespace::ConnectedPlayerManager::get_connectedPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_connectedPlayerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_syncTime
float GlobalNamespace::ConnectedPlayerManager::get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_syncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_syncTimeDelay
float GlobalNamespace::ConnectedPlayerManager::get_syncTimeDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_syncTimeDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.set_syncTimeDelay
void GlobalNamespace::ConnectedPlayerManager::set_syncTimeDelay(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::set_syncTimeDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_syncTimeDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.get_syncTimeInitialized
bool GlobalNamespace::ConnectedPlayerManager::get_syncTimeInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_syncTimeInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_syncTimeInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.get_runTime
float GlobalNamespace::ConnectedPlayerManager::get_runTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::get_runTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_runTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.add_connectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_connectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_connectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_connectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_connectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_reinitializedEvent
void GlobalNamespace::ConnectedPlayerManager::add_reinitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_reinitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_reinitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_reinitializedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_reinitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_reinitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_reinitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_disconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_disconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_disconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_disconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_disconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_connectionFailedEvent
void GlobalNamespace::ConnectedPlayerManager::add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_connectionFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_connectionFailedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_connectionFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerConnectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerConnectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerDisconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerDisconnectedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerStateChangedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerStateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerStateChangedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerStateChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerStateChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerAvatarChangedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerAvatarChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerAvatarChangedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerAvatarChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_playerOrderChangedEvent
void GlobalNamespace::ConnectedPlayerManager::add_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_playerOrderChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerOrderChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_playerOrderChangedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_playerOrderChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerOrderChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.add_syncTimeInitializedEvent
void GlobalNamespace::ConnectedPlayerManager::add_syncTimeInitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::add_syncTimeInitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncTimeInitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.remove_syncTimeInitializedEvent
void GlobalNamespace::ConnectedPlayerManager::remove_syncTimeInitializedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::remove_syncTimeInitializedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncTimeInitializedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ConnectedPlayerManager.GetNextConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::GetNextConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetNextConnectionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextConnectionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.RemoveAllPlayers
void GlobalNamespace::ConnectedPlayerManager::RemoveAllPlayers(GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::RemoveAllPlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAllPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: ConnectedPlayerManager.RemovePlayer
void GlobalNamespace::ConnectedPlayerManager::RemovePlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player, GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::RemovePlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, reason);
}
// Autogenerated method: ConnectedPlayerManager.AddPlayer
void GlobalNamespace::ConnectedPlayerManager::AddPlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::AddPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: ConnectedPlayerManager.GetPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetPlayer(uint8_t connectionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(this, ___internal__method, connectionId);
}
// Autogenerated method: ConnectedPlayerManager.GetPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetPlayer(GlobalNamespace::IConnection* connection, uint8_t remoteConnectionId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(remoteConnectionId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(this, ___internal__method, connection, remoteConnectionId);
}
// Autogenerated method: ConnectedPlayerManager.GetPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: ConnectedPlayerManager.GetConnectedPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::GetConnectedPlayer(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetConnectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, index);
}
// Autogenerated method: ConnectedPlayerManager.ResetLocalState
void GlobalNamespace::ConnectedPlayerManager::ResetLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ResetLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.PollUpdate
void GlobalNamespace::ConnectedPlayerManager::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PollUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.RegisterSerializer
void GlobalNamespace::ConnectedPlayerManager::RegisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::RegisterSerializer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: ConnectedPlayerManager.UnregisterSerializer
void GlobalNamespace::ConnectedPlayerManager::UnregisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::UnregisterSerializer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterSerializer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(subSerializer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializerType, subSerializer);
}
// Autogenerated method: ConnectedPlayerManager.Dispose
void GlobalNamespace::ConnectedPlayerManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.Disconnect
void GlobalNamespace::ConnectedPlayerManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.KickPlayer
void GlobalNamespace::ConnectedPlayerManager::KickPlayer(::Il2CppString* userId, GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KickPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.SetLocalPlayerState
void GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerState(::Il2CppString* state, bool setState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(setState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, setState);
}
// Autogenerated method: ConnectedPlayerManager.SetLocalPlayerAvatar
void GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerAvatar(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerAvatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerAvatarData);
}
// Autogenerated method: ConnectedPlayerManager.SetLocalPlayerSortIndex
void GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerSortIndex(int sortIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerSortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerSortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sortIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sortIndex);
}
// Autogenerated method: ConnectedPlayerManager.SetPlayerSortIndex
void GlobalNamespace::ConnectedPlayerManager::SetPlayerSortIndex(GlobalNamespace::IConnectedPlayer* player, int sortIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SetPlayerSortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerSortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(sortIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, sortIndex);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnected
void GlobalNamespace::ConnectedPlayerManager::HandleConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.HandleDisconnected
void GlobalNamespace::ConnectedPlayerManager::HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnectionFailed
void GlobalNamespace::ConnectedPlayerManager::HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnectionFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnectionConnected
void GlobalNamespace::ConnectedPlayerManager::HandleConnectionConnected(GlobalNamespace::IConnection* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnectionConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection);
}
// Autogenerated method: ConnectedPlayerManager.OnNetworkLatencyUpdate
void GlobalNamespace::ConnectedPlayerManager::OnNetworkLatencyUpdate(GlobalNamespace::IConnection* connection, float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::OnNetworkLatencyUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, latency);
}
// Autogenerated method: ConnectedPlayerManager.HandleConnectionDisconnected
void GlobalNamespace::ConnectedPlayerManager::HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleConnectionDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager.OnNetworkReceive
void GlobalNamespace::ConnectedPlayerManager::OnNetworkReceive(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::OnNetworkReceive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, reader, deliveryMethod);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediately
void GlobalNamespace::ConnectedPlayerManager::SendImmediately(LiteNetLib::Utils::INetSerializable* message, bool onlyFirstDegree) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(onlyFirstDegree)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, onlyFirstDegree);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyExcludingPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyExcludingPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* excludingPlayer, bool onlyFirstDegree) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyExcludingPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyExcludingPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(excludingPlayer), ::il2cpp_utils::ExtractType(onlyFirstDegree)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, excludingPlayer, onlyFirstDegree);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyToPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(toPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, toPlayer);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyFromPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, bool onlyFirstDegree) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyFromPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(fromPlayer), ::il2cpp_utils::ExtractType(onlyFirstDegree)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, fromPlayer, onlyFirstDegree);
}
// Autogenerated method: ConnectedPlayerManager.SendImmediatelyFromPlayerToPlayer
void GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendImmediatelyFromPlayerToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(fromPlayer), ::il2cpp_utils::ExtractType(toPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, fromPlayer, toPlayer);
}
// Autogenerated method: ConnectedPlayerManager.FlushReliableQueue
void GlobalNamespace::ConnectedPlayerManager::FlushReliableQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::FlushReliableQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushReliableQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.FlushUnreliableQueue
void GlobalNamespace::ConnectedPlayerManager::FlushUnreliableQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::FlushUnreliableQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushUnreliableQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager.WriteOne
LiteNetLib::Utils::NetDataWriter* GlobalNamespace::ConnectedPlayerManager::WriteOne(uint8_t senderId, uint8_t receiverId, LiteNetLib::Utils::INetSerializable* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::WriteOne");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteOne", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(senderId), ::il2cpp_utils::ExtractType(receiverId), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(this, ___internal__method, senderId, receiverId, message);
}
// Autogenerated method: ConnectedPlayerManager.Write
void GlobalNamespace::ConnectedPlayerManager::Write(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::Utils::INetSerializable* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, packet);
}
// Autogenerated method: ConnectedPlayerManager.HandleServerPlayerConnected
void GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerConnected(GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerIdentityUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerIdentityUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerIdentityUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerIdentityUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerStateUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerStateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerStateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerAvatarUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerAvatarUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerAvatarUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerAvatarUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerLatencyUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerLatencyUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandleServerPlayerDisconnected
void GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandleKickPlayerPacket
void GlobalNamespace::ConnectedPlayerManager::HandleKickPlayerPacket(GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleKickPlayerPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleKickPlayerPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandlePlayerSortOrderUpdate
void GlobalNamespace::ConnectedPlayerManager::HandlePlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandlePlayerSortOrderUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerSortOrderUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(iPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, iPlayer);
}
// Autogenerated method: ConnectedPlayerManager.HandleSyncTimePacket
void GlobalNamespace::ConnectedPlayerManager::HandleSyncTimePacket(GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* packet, GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::HandleSyncTimePacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSyncTimePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, player);
}
// Autogenerated method: ConnectedPlayerManager.Log
void GlobalNamespace::ConnectedPlayerManager::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager/ConnectedPlayer
#include "GlobalNamespace/ConnectedPlayerManager_ConnectedPlayer.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: RollingAverage
#include "GlobalNamespace/RollingAverage.hpp"
// Including type: ConnectedPlayerManager/PlayerConnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerConnectedPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerIdentityPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerIdentityPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerStatePacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerStatePacket.hpp"
// Including type: ConnectedPlayerManager/PlayerAvatarPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerAvatarPacket.hpp"
// Including type: ConnectedPlayerManager/PlayerSortOrderPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerSortOrderPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kFixedOffset
float GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get_kFixedOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get_kFixedOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ConnectedPlayerManager/ConnectedPlayer", "kFixedOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kFixedOffset
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set_kFixedOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set_kFixedOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/ConnectedPlayer", "kFixedOffset", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _userId
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_userId"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.String _userId
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_userId"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _userName
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__userName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_userName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.String _userName
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__userName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_userName"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _isMe
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isMe");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isMe"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Boolean _isMe
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isMe(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isMe");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isMe"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _isConnectionOwner
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isConnectionOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isConnectionOwner"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Boolean _isConnectionOwner
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isConnectionOwner(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isConnectionOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isConnectionOwner"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly ConnectedPlayerManager _manager
GlobalNamespace::ConnectedPlayerManager* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__manager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__manager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_manager"))->offset;
  return *reinterpret_cast<GlobalNamespace::ConnectedPlayerManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly ConnectedPlayerManager _manager
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__manager(GlobalNamespace::ConnectedPlayerManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__manager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_manager"))->offset;
  *reinterpret_cast<GlobalNamespace::ConnectedPlayerManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly IConnection _connection
GlobalNamespace::IConnection* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__connection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__connection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connection"))->offset;
  return *reinterpret_cast<GlobalNamespace::IConnection**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly IConnection _connection
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__connection(GlobalNamespace::IConnection* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__connection");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connection"))->offset;
  *reinterpret_cast<GlobalNamespace::IConnection**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly ConnectedPlayerManager/ConnectedPlayer _parent
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parent"))->offset;
  return *reinterpret_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly ConnectedPlayerManager/ConnectedPlayer _parent
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__parent(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__parent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parent"))->offset;
  *reinterpret_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte _connectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__connectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__connectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectionId"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Byte _connectionId
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__connectionId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__connectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectionId"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte _remoteConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__remoteConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__remoteConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteConnectionId"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Byte _remoteConnectionId
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__remoteConnectionId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__remoteConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteConnectionId"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _sortIndex
int GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__sortIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sortIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 _sortIndex
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__sortIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__sortIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sortIndex"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isConnected
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isConnected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isConnected"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean _isConnected
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isConnected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isConnected");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isConnected"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private DisconnectedReason _disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__disconnectedReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disconnectedReason"))->offset;
  return *reinterpret_cast<GlobalNamespace::DisconnectedReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private DisconnectedReason _disconnectedReason
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__disconnectedReason(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__disconnectedReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disconnectedReason"))->offset;
  *reinterpret_cast<GlobalNamespace::DisconnectedReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isKicked
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__isKicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isKicked"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean _isKicked
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isKicked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__isKicked");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isKicked"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private PlayerStateHash _playerState
GlobalNamespace::PlayerStateHash GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__playerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__playerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerState"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerStateHash*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private PlayerStateHash _playerState
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__playerState(GlobalNamespace::PlayerStateHash value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__playerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerState"))->offset;
  *reinterpret_cast<GlobalNamespace::PlayerStateHash*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private MultiplayerAvatarData _playerAvatar
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__playerAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__playerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerAvatar"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private MultiplayerAvatarData _playerAvatar
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__playerAvatar(GlobalNamespace::MultiplayerAvatarData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__playerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_playerAvatar"))->offset;
  *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly RollingAverage _latency
GlobalNamespace::RollingAverage* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__latency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_get__latency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_latency"))->offset;
  return *reinterpret_cast<GlobalNamespace::RollingAverage**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly RollingAverage _latency
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__latency(GlobalNamespace::RollingAverage* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::_set__latency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_latency"))->offset;
  *reinterpret_cast<GlobalNamespace::RollingAverage**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_connection
GlobalNamespace::IConnection* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnection*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_connectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connectionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_remoteConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_remoteConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_remoteConnectionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_remoteConnectionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isConnected
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isConnectionOwner
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isKicked
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isKicked");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_sortIndex
int GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_sortIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_userId
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_userName
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isMe
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_currentLatency
float GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_currentLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_currentLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_offsetSyncTime
float GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_multiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_multiplayerAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_multiplayerAvatarData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.get_isDirectConnection
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isDirectConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isDirectConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDirectConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.CreateLocalPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateLocalPlayer(GlobalNamespace::ConnectedPlayerManager* manager, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateLocalPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/ConnectedPlayer", "CreateLocalPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(isConnectionOwner)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, manager, userId, userName, isConnectionOwner);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.CreateDirectlyConnectedPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateDirectlyConnectedPlayer(GlobalNamespace::ConnectedPlayerManager* manager, uint8_t connectionId, GlobalNamespace::IConnection* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateDirectlyConnectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/ConnectedPlayer", "CreateDirectlyConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager), ::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(connection)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, manager, connectionId, connection);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.CreateRemoteConnectedPlayer
GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateRemoteConnectedPlayer(GlobalNamespace::ConnectedPlayerManager* manager, uint8_t connectionId, GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateRemoteConnectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/ConnectedPlayer", "CreateRemoteConnectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(manager), ::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(parent)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, manager, connectionId, packet, parent);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerConnectedPacket
GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerConnectedPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerConnectedPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerConnectedPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerIdentityPacket
GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerIdentityPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerIdentityPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerIdentityPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerStatePacket
GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerStatePacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerStatePacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerStatePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerAvatarPacket
GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerAvatarPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerAvatarPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerAvatarPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.GetPlayerSortOrderPacket
GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerSortOrderPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerSortOrderPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerSortOrderPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.Disconnect
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateLatency
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateLatency(float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateLatency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, latency);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateSortIndex
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateSortIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateSortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.SetKicked
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetKicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateIdentity
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateIdentity(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateIdentity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIdentity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateState
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateState(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.UpdateAvatar
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateAvatar(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.HasState
bool GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::HasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::HasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.SetPlayerState
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerState(GlobalNamespace::PlayerStateHash playerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerState);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.SetPlayerAvatar
void GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerAvatar(GlobalNamespace::MultiplayerAvatarData avatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, avatarData);
}
// Autogenerated method: ConnectedPlayerManager/ConnectedPlayer.ToString
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/InternalMessageType
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_SyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_SyncTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "SyncTime"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_SyncTime(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_SyncTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "SyncTime", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerConnected"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerConnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerConnected", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerIdentity
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerIdentity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerIdentity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerIdentity"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerIdentity
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerIdentity(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerIdentity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerIdentity", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerLatencyUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerLatencyUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerLatencyUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerLatencyUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerLatencyUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerDisconnected"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerDisconnected", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerSortOrderUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerSortOrderUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerSortOrderUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerSortOrderUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerSortOrderUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType Party
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_Party() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_Party");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "Party"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType Party
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_Party(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_Party");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "Party", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_MultiplayerSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_MultiplayerSession");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "MultiplayerSession"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_MultiplayerSession(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_MultiplayerSession");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "MultiplayerSession", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_KickPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_KickPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "KickPlayer"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_KickPlayer(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_KickPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "KickPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerStateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerStateUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerStateUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerStateUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerStateUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerAvatarUpdate
GlobalNamespace::ConnectedPlayerManager::InternalMessageType GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerAvatarUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_PlayerAvatarUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::InternalMessageType>("", "ConnectedPlayerManager/InternalMessageType", "PlayerAvatarUpdate"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerAvatarUpdate
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerAvatarUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_PlayerAvatarUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/InternalMessageType", "PlayerAvatarUpdate", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte value__
void GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_value__(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::InternalMessageType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/MessageType
#include "GlobalNamespace/ConnectedPlayerManager_MessageType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/MessageType Party
GlobalNamespace::ConnectedPlayerManager::MessageType GlobalNamespace::ConnectedPlayerManager::MessageType::_get_Party() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_get_Party");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::MessageType>("", "ConnectedPlayerManager/MessageType", "Party"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/MessageType Party
void GlobalNamespace::ConnectedPlayerManager::MessageType::_set_Party(GlobalNamespace::ConnectedPlayerManager::MessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_set_Party");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/MessageType", "Party", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectedPlayerManager/MessageType MultiplayerSession
GlobalNamespace::ConnectedPlayerManager::MessageType GlobalNamespace::ConnectedPlayerManager::MessageType::_get_MultiplayerSession() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_get_MultiplayerSession");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectedPlayerManager::MessageType>("", "ConnectedPlayerManager/MessageType", "MultiplayerSession"));
}
// Autogenerated static field setter
// Set static field: static public ConnectedPlayerManager/MessageType MultiplayerSession
void GlobalNamespace::ConnectedPlayerManager::MessageType::_set_MultiplayerSession(GlobalNamespace::ConnectedPlayerManager::MessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_set_MultiplayerSession");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectedPlayerManager/MessageType", "MultiplayerSession", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t GlobalNamespace::ConnectedPlayerManager::MessageType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte value__
void GlobalNamespace::ConnectedPlayerManager::MessageType::_set_value__(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::MessageType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager/PlayerConnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerConnectedPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte remoteConnectionId
uint8_t GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_remoteConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_remoteConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "remoteConnectionId"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte remoteConnectionId
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_remoteConnectionId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_remoteConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "remoteConnectionId"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.String userId
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userId"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.String userId
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userId"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.String userName
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_userName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.String userName
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_userName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userName"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isConnectionOwner
bool GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_get_isConnectionOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isConnectionOwner"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Boolean isConnectionOwner
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_isConnectionOwner(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::_set_isConnectionOwner");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isConnectionOwner"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerConnectedPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerConnectedPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Init(uint8_t connectionId, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(isConnectionOwner)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*, false>(this, ___internal__method, connectionId, userId, userName, isConnectionOwner);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerIdentityPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerIdentityPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public PlayerStateHash playerState
GlobalNamespace::PlayerStateHash GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_get_playerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_get_playerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerState"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerStateHash*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public PlayerStateHash playerState
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_set_playerState(GlobalNamespace::PlayerStateHash value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_set_playerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerState"))->offset;
  *reinterpret_cast<GlobalNamespace::PlayerStateHash*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public MultiplayerAvatarData playerAvatar
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_get_playerAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_get_playerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerAvatar"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public MultiplayerAvatarData playerAvatar
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_set_playerAvatar(GlobalNamespace::MultiplayerAvatarData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::_set_playerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerAvatar"))->offset;
  *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerIdentityPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerIdentityPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Init(GlobalNamespace::PlayerStateHash states, GlobalNamespace::MultiplayerAvatarData avatar) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(states), ::il2cpp_utils::ExtractType(avatar)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*, false>(this, ___internal__method, states, avatar);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerAvatarPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerAvatarPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public MultiplayerAvatarData playerAvatar
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::_get_playerAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::_get_playerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerAvatar"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public MultiplayerAvatarData playerAvatar
void GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::_set_playerAvatar(GlobalNamespace::MultiplayerAvatarData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::_set_playerAvatar");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerAvatar"))->offset;
  *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerAvatarPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerAvatarPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Init(GlobalNamespace::MultiplayerAvatarData avatar) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatar)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*, false>(this, ___internal__method, avatar);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerStatePacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerStatePacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public PlayerStateHash playerState
GlobalNamespace::PlayerStateHash GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::_get_playerState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::_get_playerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerState"))->offset;
  return *reinterpret_cast<GlobalNamespace::PlayerStateHash*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public PlayerStateHash playerState
void GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::_set_playerState(GlobalNamespace::PlayerStateHash value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::_set_playerState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playerState"))->offset;
  *reinterpret_cast<GlobalNamespace::PlayerStateHash*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerStatePacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerStatePacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Init(GlobalNamespace::PlayerStateHash states) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(states)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*, false>(this, ___internal__method, states);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager/PlayerSortOrderPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerSortOrderPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String userId
::Il2CppString* GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_get_userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userId"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.String userId
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_set_userId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "userId"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 sortIndex
int GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_get_sortIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sortIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 sortIndex
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_set_sortIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::_set_sortIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sortIndex"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerSortOrderPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerSortOrderPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Init(::Il2CppString* userId, int sortIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(sortIndex)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*, false>(this, ___internal__method, userId, sortIndex);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerDisconnectedPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerDisconnectedPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public DisconnectedReason disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::_get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::_get_disconnectedReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disconnectedReason"))->offset;
  return *reinterpret_cast<GlobalNamespace::DisconnectedReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public DisconnectedReason disconnectedReason
void GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::_set_disconnectedReason(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::_set_disconnectedReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disconnectedReason"))->offset;
  *reinterpret_cast<GlobalNamespace::DisconnectedReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerDisconnectedPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Init(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerDisconnectedPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/KickPlayerPacket
#include "GlobalNamespace/ConnectedPlayerManager_KickPlayerPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public DisconnectedReason disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::_get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::_get_disconnectedReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disconnectedReason"))->offset;
  return *reinterpret_cast<GlobalNamespace::DisconnectedReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public DisconnectedReason disconnectedReason
void GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::_set_disconnectedReason(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::_set_disconnectedReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disconnectedReason"))->offset;
  *reinterpret_cast<GlobalNamespace::DisconnectedReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*>* GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/KickPlayerPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Init
GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Init(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/KickPlayerPacket.Release
void GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/SyncTimePacket
#include "GlobalNamespace/ConnectedPlayerManager_SyncTimePacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single syncTime
float GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::_get_syncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::_get_syncTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncTime"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Single syncTime
void GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::_set_syncTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::_set_syncTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "syncTime"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*>* GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/SyncTimePacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Init
GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Init(float syncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(syncTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*, false>(this, ___internal__method, syncTime);
}
// Autogenerated method: ConnectedPlayerManager/SyncTimePacket.Release
void GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SyncTimePacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerManager/PlayerLatencyPacket
#include "GlobalNamespace/ConnectedPlayerManager_PlayerLatencyPacket.hpp"
// Including type: PacketPool`1
#include "GlobalNamespace/PacketPool_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single latency
float GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::_get_latency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::_get_latency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "latency"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Single latency
void GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::_set_latency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::_set_latency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "latency"))->offset;
  *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.get_pool
GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*>* GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::get_pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::get_pool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager/PlayerLatencyPacket", "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PacketPool_1<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Serialize
void GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Deserialize
void GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Init
GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Init(float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(latency)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*, false>(this, ___internal__method, latency);
}
// Autogenerated method: ConnectedPlayerManager/PlayerLatencyPacket.Release
void GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket::Release");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerHelpers
#include "GlobalNamespace/ConnectedPlayerHelpers.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerHelpers.WantsToPlayNextLevel
bool GlobalNamespace::ConnectedPlayerHelpers::WantsToPlayNextLevel(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::WantsToPlayNextLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "WantsToPlayNextLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.WasActiveAtLevelStart
bool GlobalNamespace::ConnectedPlayerHelpers::WasActiveAtLevelStart(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::WasActiveAtLevelStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "WasActiveAtLevelStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.IsActive
bool GlobalNamespace::ConnectedPlayerHelpers::IsActive(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::IsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "IsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.HasFinishedLevel
bool GlobalNamespace::ConnectedPlayerHelpers::HasFinishedLevel(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::HasFinishedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "HasFinishedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.IsActiveOrFinished
bool GlobalNamespace::ConnectedPlayerHelpers::IsActiveOrFinished(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::IsActiveOrFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "IsActiveOrFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated method: ConnectedPlayerHelpers.IsFailed
bool GlobalNamespace::ConnectedPlayerHelpers::IsFailed(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerHelpers::IsFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerHelpers", "IsFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, connectedPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason Unknown
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason Unknown
void GlobalNamespace::ConnectionFailedReason::_set_Unknown(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ConnectionCanceled
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ConnectionCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ConnectionCanceled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ConnectionCanceled"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ConnectionCanceled
void GlobalNamespace::ConnectionFailedReason::_set_ConnectionCanceled(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ConnectionCanceled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ConnectionCanceled", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerUnreachable
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerUnreachable
void GlobalNamespace::ConnectionFailedReason::_set_ServerUnreachable(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerAlreadyExists
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerAlreadyExists
void GlobalNamespace::ConnectionFailedReason::_set_ServerAlreadyExists(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerAlreadyExists", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerDoesNotExist
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerDoesNotExist() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerDoesNotExist");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerDoesNotExist"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerDoesNotExist
void GlobalNamespace::ConnectionFailedReason::_set_ServerDoesNotExist(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerDoesNotExist");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerDoesNotExist", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerAtCapacity
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerAtCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerAtCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerAtCapacity"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerAtCapacity
void GlobalNamespace::ConnectionFailedReason::_set_ServerAtCapacity(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerAtCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerAtCapacity", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason VersionMismatch
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_VersionMismatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_VersionMismatch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "VersionMismatch"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason VersionMismatch
void GlobalNamespace::ConnectionFailedReason::_set_VersionMismatch(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_VersionMismatch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "VersionMismatch", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason InvalidPassword
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_InvalidPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_InvalidPassword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "InvalidPassword"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason InvalidPassword
void GlobalNamespace::ConnectionFailedReason::_set_InvalidPassword(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_InvalidPassword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "InvalidPassword", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason MasterServerUnreachable
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_MasterServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_MasterServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "MasterServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason MasterServerUnreachable
void GlobalNamespace::ConnectionFailedReason::_set_MasterServerUnreachable(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_MasterServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "MasterServerUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason MasterServerNotAuthenticated
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_MasterServerNotAuthenticated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_MasterServerNotAuthenticated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "MasterServerNotAuthenticated"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason MasterServerNotAuthenticated
void GlobalNamespace::ConnectionFailedReason::_set_MasterServerNotAuthenticated(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_MasterServerNotAuthenticated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "MasterServerNotAuthenticated", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason NetworkNotConnected
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_NetworkNotConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_NetworkNotConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "NetworkNotConnected"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason NetworkNotConnected
void GlobalNamespace::ConnectionFailedReason::_set_NetworkNotConnected(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_NetworkNotConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "NetworkNotConnected", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason MasterServerCertificateValidationFailed
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_MasterServerCertificateValidationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_MasterServerCertificateValidationFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "MasterServerCertificateValidationFailed"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason MasterServerCertificateValidationFailed
void GlobalNamespace::ConnectionFailedReason::_set_MasterServerCertificateValidationFailed(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_MasterServerCertificateValidationFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "MasterServerCertificateValidationFailed", value));
}
// Autogenerated static field getter
// Get static field: static public ConnectionFailedReason ServerIsTerminating
GlobalNamespace::ConnectionFailedReason GlobalNamespace::ConnectionFailedReason::_get_ServerIsTerminating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_ServerIsTerminating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ConnectionFailedReason>("", "ConnectionFailedReason", "ServerIsTerminating"));
}
// Autogenerated static field setter
// Set static field: static public ConnectionFailedReason ServerIsTerminating
void GlobalNamespace::ConnectionFailedReason::_set_ServerIsTerminating(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_ServerIsTerminating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ConnectionFailedReason", "ServerIsTerminating", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::ConnectionFailedReason::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::ConnectionFailedReason::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectionFailedReason::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CustomNetworkConfig
#include "GlobalNamespace/CustomNetworkConfig.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <maxPartySize>k__BackingField
int GlobalNamespace::CustomNetworkConfig::_get_$maxPartySize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_get_$maxPartySize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<maxPartySize>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <maxPartySize>k__BackingField
void GlobalNamespace::CustomNetworkConfig::_set_$maxPartySize$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_set_$maxPartySize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<maxPartySize>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <discoveryPort>k__BackingField
int GlobalNamespace::CustomNetworkConfig::_get_$discoveryPort$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_get_$discoveryPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<discoveryPort>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <discoveryPort>k__BackingField
void GlobalNamespace::CustomNetworkConfig::_set_$discoveryPort$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_set_$discoveryPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<discoveryPort>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <partyPort>k__BackingField
int GlobalNamespace::CustomNetworkConfig::_get_$partyPort$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_get_$partyPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<partyPort>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <partyPort>k__BackingField
void GlobalNamespace::CustomNetworkConfig::_set_$partyPort$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_set_$partyPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<partyPort>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <multiplayerPort>k__BackingField
int GlobalNamespace::CustomNetworkConfig::_get_$multiplayerPort$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_get_$multiplayerPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<multiplayerPort>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 <multiplayerPort>k__BackingField
void GlobalNamespace::CustomNetworkConfig::_set_$multiplayerPort$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_set_$multiplayerPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<multiplayerPort>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private MasterServerEndPoint <masterServerEndPoint>k__BackingField
GlobalNamespace::MasterServerEndPoint* GlobalNamespace::CustomNetworkConfig::_get_$masterServerEndPoint$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_get_$masterServerEndPoint$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<masterServerEndPoint>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::MasterServerEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private MasterServerEndPoint <masterServerEndPoint>k__BackingField
void GlobalNamespace::CustomNetworkConfig::_set_$masterServerEndPoint$k__BackingField(GlobalNamespace::MasterServerEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_set_$masterServerEndPoint$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<masterServerEndPoint>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::MasterServerEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.String <masterServerStatusUrl>k__BackingField
::Il2CppString* GlobalNamespace::CustomNetworkConfig::_get_$masterServerStatusUrl$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_get_$masterServerStatusUrl$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<masterServerStatusUrl>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <masterServerStatusUrl>k__BackingField
void GlobalNamespace::CustomNetworkConfig::_set_$masterServerStatusUrl$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::_set_$masterServerStatusUrl$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<masterServerStatusUrl>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: CustomNetworkConfig.get_maxPartySize
int GlobalNamespace::CustomNetworkConfig::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_maxPartySize
void GlobalNamespace::CustomNetworkConfig::set_maxPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_maxPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_discoveryPort
int GlobalNamespace::CustomNetworkConfig::get_discoveryPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_discoveryPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_discoveryPort
void GlobalNamespace::CustomNetworkConfig::set_discoveryPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_discoveryPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_discoveryPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_partyPort
int GlobalNamespace::CustomNetworkConfig::get_partyPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_partyPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_partyPort
void GlobalNamespace::CustomNetworkConfig::set_partyPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_partyPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_partyPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_multiplayerPort
int GlobalNamespace::CustomNetworkConfig::get_multiplayerPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_multiplayerPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_multiplayerPort
void GlobalNamespace::CustomNetworkConfig::set_multiplayerPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_multiplayerPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_masterServerEndPoint
GlobalNamespace::MasterServerEndPoint* GlobalNamespace::CustomNetworkConfig::get_masterServerEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_masterServerEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_masterServerEndPoint
void GlobalNamespace::CustomNetworkConfig::set_masterServerEndPoint(GlobalNamespace::MasterServerEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_masterServerEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CustomNetworkConfig.get_masterServerStatusUrl
::Il2CppString* GlobalNamespace::CustomNetworkConfig::get_masterServerStatusUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::get_masterServerStatusUrl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerStatusUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: CustomNetworkConfig.set_masterServerStatusUrl
void GlobalNamespace::CustomNetworkConfig::set_masterServerStatusUrl(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomNetworkConfig::set_masterServerStatusUrl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_masterServerStatusUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IDiffieHellmanKeyPair.get_publicKey
::Array<uint8_t>* GlobalNamespace::IDiffieHellmanKeyPair::get_publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDiffieHellmanKeyPair::get_publicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: IDiffieHellmanKeyPair.GetPreMasterSecretAsync
System::Threading::Tasks::Task_1<::Array<uint8_t>*>* GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecretAsync(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecretAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecretAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<uint8_t>*>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated method: IDiffieHellmanKeyPair.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecret(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IDiffieHellmanKeyPair::GetPreMasterSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility
#include "GlobalNamespace/DiffieHellmanUtility.hpp"
// Including type: DiffieHellmanUtility/KeyType
#include "GlobalNamespace/DiffieHellmanUtility_KeyType.hpp"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair.hpp"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair.hpp"
// Including type: DiffieHellmanUtility/OperationTimer
#include "GlobalNamespace/DiffieHellmanUtility_OperationTimer.hpp"
// Including type: Org.BouncyCastle.Security.SecureRandom
#include "Org/BouncyCastle/Security/SecureRandom.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.DHParameters
#include "Org/BouncyCastle/Crypto/Parameters/DHParameters.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.ECDomainParameters
#include "Org/BouncyCastle/Crypto/Parameters/ECDomainParameters.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IDiffieHellmanKeyPair
#include "GlobalNamespace/IDiffieHellmanKeyPair.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/DHBasicAgreement.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/ECDHBasicAgreement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxDiffieHellmanPublicKeyLength
int GlobalNamespace::DiffieHellmanUtility::_get_kMaxDiffieHellmanPublicKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get_kMaxDiffieHellmanPublicKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DiffieHellmanUtility", "kMaxDiffieHellmanPublicKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxDiffieHellmanPublicKeyLength
void GlobalNamespace::DiffieHellmanUtility::_set_kMaxDiffieHellmanPublicKeyLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set_kMaxDiffieHellmanPublicKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "kMaxDiffieHellmanPublicKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxElipticalCurvePublicKeyLength
int GlobalNamespace::DiffieHellmanUtility::_get_kMaxElipticalCurvePublicKeyLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get_kMaxElipticalCurvePublicKeyLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "DiffieHellmanUtility", "kMaxElipticalCurvePublicKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxElipticalCurvePublicKeyLength
void GlobalNamespace::DiffieHellmanUtility::_set_kMaxElipticalCurvePublicKeyLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set_kMaxElipticalCurvePublicKeyLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "kMaxElipticalCurvePublicKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
Org::BouncyCastle::Security::SecureRandom* GlobalNamespace::DiffieHellmanUtility::_get__secureRandom() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__secureRandom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::Security::SecureRandom*>("", "DiffieHellmanUtility", "_secureRandom"));
}
// Autogenerated static field setter
// Set static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
void GlobalNamespace::DiffieHellmanUtility::_set__secureRandom(Org::BouncyCastle::Security::SecureRandom* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__secureRandom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_secureRandom", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE88BAC
// Autogenerated static field getter
// Get static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
Org::BouncyCastle::Crypto::Parameters::DHParameters* GlobalNamespace::DiffieHellmanUtility::_get__dhParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__dhParameters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::Crypto::Parameters::DHParameters*>("", "DiffieHellmanUtility", "_dhParameters"));
}
// Autogenerated static field setter
// Set static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
void GlobalNamespace::DiffieHellmanUtility::_set__dhParameters(Org::BouncyCastle::Crypto::Parameters::DHParameters* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__dhParameters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_dhParameters", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE88BBC
// Autogenerated static field getter
// Get static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* GlobalNamespace::DiffieHellmanUtility::_get__ecParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__ecParameters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Org::BouncyCastle::Crypto::Parameters::ECDomainParameters*>("", "DiffieHellmanUtility", "_ecParameters"));
}
// Autogenerated static field setter
// Set static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
void GlobalNamespace::DiffieHellmanUtility::_set__ecParameters(Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__ecParameters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_ecParameters", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _ecPointFormats
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::_get__ecPointFormats() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_get__ecPointFormats");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "DiffieHellmanUtility", "_ecPointFormats"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _ecPointFormats
void GlobalNamespace::DiffieHellmanUtility::_set__ecPointFormats(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::_set__ecPointFormats");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility", "_ecPointFormats", value));
}
// Autogenerated method: DiffieHellmanUtility..cctor
void GlobalNamespace::DiffieHellmanUtility::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility.GenerateKeysAsync
System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* GlobalNamespace::DiffieHellmanUtility::GenerateKeysAsync(GlobalNamespace::DiffieHellmanUtility::KeyType keyType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateKeysAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateKeysAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, keyType);
}
// Autogenerated method: DiffieHellmanUtility.GenerateKeys
GlobalNamespace::IDiffieHellmanKeyPair* GlobalNamespace::DiffieHellmanUtility::GenerateKeys(GlobalNamespace::DiffieHellmanUtility::KeyType keyType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyType)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDiffieHellmanKeyPair*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, keyType);
}
// Autogenerated method: DiffieHellmanUtility.GenerateDiffieHellmanKeys
GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* GlobalNamespace::DiffieHellmanUtility::GenerateDiffieHellmanKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateDiffieHellmanKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateDiffieHellmanKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility.GenerateElipticalCurveKeys
GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* GlobalNamespace::DiffieHellmanUtility::GenerateElipticalCurveKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GenerateElipticalCurveKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GenerateElipticalCurveKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret(Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement* dhBasicAgreement, ::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dhBasicAgreement), ::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dhBasicAgreement, clientPublicKey);
}
// Autogenerated method: DiffieHellmanUtility.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret(Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement* ecdhBasicAgreement, ::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility", "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ecdhBasicAgreement), ::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ecdhBasicAgreement, clientPublicKey);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DiffieHellmanUtility/KeyType
#include "GlobalNamespace/DiffieHellmanUtility_KeyType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DiffieHellmanUtility/KeyType DiffieHellman
GlobalNamespace::DiffieHellmanUtility::KeyType GlobalNamespace::DiffieHellmanUtility::KeyType::_get_DiffieHellman() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_get_DiffieHellman");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DiffieHellmanUtility::KeyType>("", "DiffieHellmanUtility/KeyType", "DiffieHellman"));
}
// Autogenerated static field setter
// Set static field: static public DiffieHellmanUtility/KeyType DiffieHellman
void GlobalNamespace::DiffieHellmanUtility::KeyType::_set_DiffieHellman(GlobalNamespace::DiffieHellmanUtility::KeyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_set_DiffieHellman");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility/KeyType", "DiffieHellman", value));
}
// Autogenerated static field getter
// Get static field: static public DiffieHellmanUtility/KeyType ElipticalCurve
GlobalNamespace::DiffieHellmanUtility::KeyType GlobalNamespace::DiffieHellmanUtility::KeyType::_get_ElipticalCurve() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_get_ElipticalCurve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DiffieHellmanUtility::KeyType>("", "DiffieHellmanUtility/KeyType", "ElipticalCurve"));
}
// Autogenerated static field setter
// Set static field: static public DiffieHellmanUtility/KeyType ElipticalCurve
void GlobalNamespace::DiffieHellmanUtility::KeyType::_set_ElipticalCurve(GlobalNamespace::DiffieHellmanUtility::KeyType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_set_ElipticalCurve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DiffieHellmanUtility/KeyType", "ElipticalCurve", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::DiffieHellmanUtility::KeyType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::DiffieHellmanUtility::KeyType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::KeyType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair.hpp"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair_--c__DisplayClass5_0.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/DHBasicAgreement.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.DHPrivateKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/DHPrivateKeyParameters.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement _dhBasicAgreement
Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_get__dhBasicAgreement() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_get__dhBasicAgreement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dhBasicAgreement"))->offset;
  return *reinterpret_cast<Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement _dhBasicAgreement
void GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_set__dhBasicAgreement(Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_set__dhBasicAgreement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dhBasicAgreement"))->offset;
  *reinterpret_cast<Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte[] _publicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_get__publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_get__publicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_publicKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Byte[] _publicKey
void GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_set__publicKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::_set__publicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_publicKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair.get_publicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::get_publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::get_publicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair.GetPreMasterSecretAsync
System::Threading::Tasks::Task_1<::Array<uint8_t>*>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecretAsync(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecretAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecretAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<uint8_t>*>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecret(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::GetPreMasterSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/DiffieHellmanKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_DiffieHellmanKeyPair_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public DiffieHellmanUtility/DiffieHellmanKeyPair <>4__this
GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_get_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_get_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public DiffieHellmanUtility/DiffieHellmanKeyPair <>4__this
void GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_set_$$4__this(GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_set_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  *reinterpret_cast<GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] clientPublicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_get_clientPublicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_get_clientPublicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientPublicKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte[] clientPublicKey
void GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_set_clientPublicKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::_set_clientPublicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientPublicKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: DiffieHellmanUtility/DiffieHellmanKeyPair/<>c__DisplayClass5_0.<GetPreMasterSecretAsync>b__0
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair::$$c__DisplayClass5_0::<GetPreMasterSecretAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPreMasterSecretAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair.hpp"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair_--c__DisplayClass5_0.hpp"
// Including type: Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement
#include "Org/BouncyCastle/Crypto/Agreement/ECDHBasicAgreement.hpp"
// Including type: Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters
#include "Org/BouncyCastle/Crypto/Parameters/ECPrivateKeyParameters.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement _ecdhBasicAgreement
Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_get__ecdhBasicAgreement() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_get__ecdhBasicAgreement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ecdhBasicAgreement"))->offset;
  return *reinterpret_cast<Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement _ecdhBasicAgreement
void GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_set__ecdhBasicAgreement(Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_set__ecdhBasicAgreement");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ecdhBasicAgreement"))->offset;
  *reinterpret_cast<Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte[] _publicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_get__publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_get__publicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_publicKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Byte[] _publicKey
void GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_set__publicKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::_set__publicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_publicKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair.get_publicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::get_publicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::get_publicKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair.GetPreMasterSecretAsync
System::Threading::Tasks::Task_1<::Array<uint8_t>*>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecretAsync(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecretAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecretAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<uint8_t>*>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair.GetPreMasterSecret
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecret(::Array<uint8_t>* clientPublicKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::GetPreMasterSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreMasterSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clientPublicKey)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, clientPublicKey);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/ElipticalCurveKeyPair/<>c__DisplayClass5_0
#include "GlobalNamespace/DiffieHellmanUtility_ElipticalCurveKeyPair_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public DiffieHellmanUtility/ElipticalCurveKeyPair <>4__this
GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_get_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_get_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public DiffieHellmanUtility/ElipticalCurveKeyPair <>4__this
void GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_set_$$4__this(GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_set_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  *reinterpret_cast<GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] clientPublicKey
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_get_clientPublicKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_get_clientPublicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientPublicKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte[] clientPublicKey
void GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_set_clientPublicKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::_set_clientPublicKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientPublicKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: DiffieHellmanUtility/ElipticalCurveKeyPair/<>c__DisplayClass5_0.<GetPreMasterSecretAsync>b__0
::Array<uint8_t>* GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::$GetPreMasterSecretAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair::$$c__DisplayClass5_0::<GetPreMasterSecretAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetPreMasterSecretAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DiffieHellmanUtility/OperationTimer
#include "GlobalNamespace/DiffieHellmanUtility_OperationTimer.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Diagnostics.Stopwatch _stopwatch
System::Diagnostics::Stopwatch* GlobalNamespace::DiffieHellmanUtility::OperationTimer::_get__stopwatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::_get__stopwatch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stopwatch"))->offset;
  return *reinterpret_cast<System::Diagnostics::Stopwatch**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Diagnostics.Stopwatch _stopwatch
void GlobalNamespace::DiffieHellmanUtility::OperationTimer::_set__stopwatch(System::Diagnostics::Stopwatch* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::_set__stopwatch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_stopwatch"))->offset;
  *reinterpret_cast<System::Diagnostics::Stopwatch**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.String _operationName
::Il2CppString* GlobalNamespace::DiffieHellmanUtility::OperationTimer::_get__operationName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::_get__operationName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_operationName"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.String _operationName
void GlobalNamespace::DiffieHellmanUtility::OperationTimer::_set__operationName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::_set__operationName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_operationName"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: DiffieHellmanUtility/OperationTimer.Dispose
void GlobalNamespace::DiffieHellmanUtility::OperationTimer::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DiffieHellmanUtility/OperationTimer.Time
GlobalNamespace::DiffieHellmanUtility::OperationTimer* GlobalNamespace::DiffieHellmanUtility::OperationTimer::Time(::Il2CppString* operation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DiffieHellmanUtility::OperationTimer::Time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DiffieHellmanUtility/OperationTimer", "Time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(operation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiffieHellmanUtility::OperationTimer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, operation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DisconnectedPlayer
#include "GlobalNamespace/DisconnectedPlayer.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <userId>k__BackingField
::Il2CppString* GlobalNamespace::DisconnectedPlayer::_get_$userId$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_get_$userId$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<userId>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <userId>k__BackingField
void GlobalNamespace::DisconnectedPlayer::_set_$userId$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_set_$userId$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<userId>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.String <userName>k__BackingField
::Il2CppString* GlobalNamespace::DisconnectedPlayer::_get_$userName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_get_$userName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<userName>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <userName>k__BackingField
void GlobalNamespace::DisconnectedPlayer::_set_$userName$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_set_$userName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<userName>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 <sortIndex>k__BackingField
int GlobalNamespace::DisconnectedPlayer::_get_$sortIndex$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_get_$sortIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sortIndex>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 <sortIndex>k__BackingField
void GlobalNamespace::DisconnectedPlayer::_set_$sortIndex$k__BackingField(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_set_$sortIndex$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<sortIndex>k__BackingField"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly MultiplayerAvatarData <multiplayerAvatarData>k__BackingField
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::DisconnectedPlayer::_get_$multiplayerAvatarData$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_get_$multiplayerAvatarData$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<multiplayerAvatarData>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly MultiplayerAvatarData <multiplayerAvatarData>k__BackingField
void GlobalNamespace::DisconnectedPlayer::_set_$multiplayerAvatarData$k__BackingField(GlobalNamespace::MultiplayerAvatarData value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::_set_$multiplayerAvatarData$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<multiplayerAvatarData>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::MultiplayerAvatarData*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: DisconnectedPlayer.get_offsetSyncTime
float GlobalNamespace::DisconnectedPlayer::get_offsetSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_offsetSyncTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offsetSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isFailed
bool GlobalNamespace::DisconnectedPlayer::get_isFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isMe
bool GlobalNamespace::DisconnectedPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_userId
::Il2CppString* GlobalNamespace::DisconnectedPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.set_userId
void GlobalNamespace::DisconnectedPlayer::set_userId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::set_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DisconnectedPlayer.get_userName
::Il2CppString* GlobalNamespace::DisconnectedPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.set_userName
void GlobalNamespace::DisconnectedPlayer::set_userName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::set_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DisconnectedPlayer.get_currentLatency
float GlobalNamespace::DisconnectedPlayer::get_currentLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_currentLatency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isConnected
bool GlobalNamespace::DisconnectedPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_disconnectedReason
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedPlayer::get_disconnectedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_disconnectedReason");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disconnectedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DisconnectedReason, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isConnectionOwner
bool GlobalNamespace::DisconnectedPlayer::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_sortIndex
int GlobalNamespace::DisconnectedPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_sortIndex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_multiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::DisconnectedPlayer::get_multiplayerAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_multiplayerAvatarData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.get_isKicked
bool GlobalNamespace::DisconnectedPlayer::get_isKicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::get_isKicked");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isKicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DisconnectedPlayer.HasState
bool GlobalNamespace::DisconnectedPlayer::HasState(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedPlayer::HasState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DisconnectedReason Unknown
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason Unknown
void GlobalNamespace::DisconnectedReason::_set_Unknown(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason UserInitiated
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_UserInitiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_UserInitiated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "UserInitiated"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason UserInitiated
void GlobalNamespace::DisconnectedReason::_set_UserInitiated(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_UserInitiated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "UserInitiated", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason Timeout
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "Timeout"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason Timeout
void GlobalNamespace::DisconnectedReason::_set_Timeout(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason Kicked
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_Kicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_Kicked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "Kicked"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason Kicked
void GlobalNamespace::DisconnectedReason::_set_Kicked(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_Kicked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "Kicked", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason ServerAtCapacity
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_ServerAtCapacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_ServerAtCapacity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "ServerAtCapacity"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason ServerAtCapacity
void GlobalNamespace::DisconnectedReason::_set_ServerAtCapacity(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_ServerAtCapacity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "ServerAtCapacity", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason ServerConnectionClosed
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_ServerConnectionClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_ServerConnectionClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "ServerConnectionClosed"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason ServerConnectionClosed
void GlobalNamespace::DisconnectedReason::_set_ServerConnectionClosed(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_ServerConnectionClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "ServerConnectionClosed", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason MasterServerUnreachable
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_MasterServerUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_MasterServerUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "MasterServerUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason MasterServerUnreachable
void GlobalNamespace::DisconnectedReason::_set_MasterServerUnreachable(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_MasterServerUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "MasterServerUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason ClientConnectionClosed
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_ClientConnectionClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_ClientConnectionClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "ClientConnectionClosed"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason ClientConnectionClosed
void GlobalNamespace::DisconnectedReason::_set_ClientConnectionClosed(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_ClientConnectionClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "ClientConnectionClosed", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason NetworkDisconnected
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_NetworkDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_NetworkDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "NetworkDisconnected"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason NetworkDisconnected
void GlobalNamespace::DisconnectedReason::_set_NetworkDisconnected(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_NetworkDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "NetworkDisconnected", value));
}
// Autogenerated static field getter
// Get static field: static public DisconnectedReason ServerTerminated
GlobalNamespace::DisconnectedReason GlobalNamespace::DisconnectedReason::_get_ServerTerminated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_ServerTerminated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DisconnectedReason>("", "DisconnectedReason", "ServerTerminated"));
}
// Autogenerated static field setter
// Set static field: static public DisconnectedReason ServerTerminated
void GlobalNamespace::DisconnectedReason::_set_ServerTerminated(GlobalNamespace::DisconnectedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_ServerTerminated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DisconnectedReason", "ServerTerminated", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::DisconnectedReason::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::DisconnectedReason::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisconnectedReason::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility
#include "GlobalNamespace/EncryptionUtility.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
// Including type: EncryptionUtility/EncryptionState
#include "GlobalNamespace/EncryptionUtility_EncryptionState.hpp"
// Including type: EncryptionUtility/<>c__DisplayClass18_0
#include "GlobalNamespace/EncryptionUtility_--c__DisplayClass18_0.hpp"
// Including type: System.Security.Cryptography.AesCryptoServiceProvider
#include "System/Security/Cryptography/AesCryptoServiceProvider.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMacHashSize
int GlobalNamespace::EncryptionUtility::_get_kMacHashSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMacHashSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMacHashSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMacHashSize
void GlobalNamespace::EncryptionUtility::_set_kMacHashSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMacHashSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMacHashSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kSequenceNumberSize
int GlobalNamespace::EncryptionUtility::_get_kSequenceNumberSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kSequenceNumberSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kSequenceNumberSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kSequenceNumberSize
void GlobalNamespace::EncryptionUtility::_set_kSequenceNumberSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kSequenceNumberSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kSequenceNumberSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxPadding
int GlobalNamespace::EncryptionUtility::_get_kMaxPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMaxPadding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMaxPadding"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxPadding
void GlobalNamespace::EncryptionUtility::_set_kMaxPadding(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMaxPadding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMaxPadding", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMacKeySize
int GlobalNamespace::EncryptionUtility::_get_kMacKeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMacKeySize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMacKeySize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMacKeySize
void GlobalNamespace::EncryptionUtility::_set_kMacKeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMacKeySize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMacKeySize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kKeySize
int GlobalNamespace::EncryptionUtility::_get_kKeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kKeySize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kKeySize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kKeySize
void GlobalNamespace::EncryptionUtility::_set_kKeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kKeySize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kKeySize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kBlockSize
int GlobalNamespace::EncryptionUtility::_get_kBlockSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kBlockSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kBlockSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kBlockSize
void GlobalNamespace::EncryptionUtility::_set_kBlockSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kBlockSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kBlockSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kIvSize
int GlobalNamespace::EncryptionUtility::_get_kIvSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kIvSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kIvSize"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kIvSize
void GlobalNamespace::EncryptionUtility::_set_kIvSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kIvSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kIvSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMasterKeySize
int GlobalNamespace::EncryptionUtility::_get_kMasterKeySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kMasterKeySize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kMasterKeySize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMasterKeySize
void GlobalNamespace::EncryptionUtility::_set_kMasterKeySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kMasterKeySize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kMasterKeySize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kRandomBlockSize
int GlobalNamespace::EncryptionUtility::_get_kRandomBlockSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kRandomBlockSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kRandomBlockSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kRandomBlockSize
void GlobalNamespace::EncryptionUtility::_set_kRandomBlockSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kRandomBlockSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kRandomBlockSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kExtraSize
int GlobalNamespace::EncryptionUtility::_get_kExtraSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get_kExtraSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility", "kExtraSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kExtraSize
void GlobalNamespace::EncryptionUtility::_set_kExtraSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set_kExtraSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "kExtraSize", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _masterSecretSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__masterSecretSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__masterSecretSeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_masterSecretSeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _masterSecretSeed
void GlobalNamespace::EncryptionUtility::_set__masterSecretSeed(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__masterSecretSeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_masterSecretSeed", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _keyExpansionSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__keyExpansionSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__keyExpansionSeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_keyExpansionSeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _keyExpansionSeed
void GlobalNamespace::EncryptionUtility::_set__keyExpansionSeed(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__keyExpansionSeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_keyExpansionSeed", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _tempIV
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__tempIV() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__tempIV");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_tempIV"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _tempIV
void GlobalNamespace::EncryptionUtility::_set__tempIV(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__tempIV");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_tempIV", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] _tempHash
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::_get__tempHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__tempHash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("", "EncryptionUtility", "_tempHash"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] _tempHash
void GlobalNamespace::EncryptionUtility::_set__tempHash(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__tempHash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_tempHash", value));
}
// Autogenerated static field getter
// Get static field: static private System.Security.Cryptography.AesCryptoServiceProvider _aes
System::Security::Cryptography::AesCryptoServiceProvider* GlobalNamespace::EncryptionUtility::_get__aes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_get__aes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::AesCryptoServiceProvider*>("", "EncryptionUtility", "_aes"));
}
// Autogenerated static field setter
// Set static field: static private System.Security.Cryptography.AesCryptoServiceProvider _aes
void GlobalNamespace::EncryptionUtility::_set__aes(System::Security::Cryptography::AesCryptoServiceProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::_set__aes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility", "_aes", value));
}
// Autogenerated method: EncryptionUtility..cctor
void GlobalNamespace::EncryptionUtility::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: EncryptionUtility.CreateEncryptionState
GlobalNamespace::EncryptionUtility::IEncryptionState* GlobalNamespace::EncryptionUtility::CreateEncryptionState(::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed, bool isClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::CreateEncryptionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "CreateEncryptionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(serverSeed), ::il2cpp_utils::ExtractType(clientSeed), ::il2cpp_utils::ExtractType(isClient)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EncryptionUtility::IEncryptionState*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, preMasterSecret, serverSeed, clientSeed, isClient);
}
// Autogenerated method: EncryptionUtility.CreateEncryptionStateAsync
System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>* GlobalNamespace::EncryptionUtility::CreateEncryptionStateAsync(::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed, bool isClient) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::CreateEncryptionStateAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "CreateEncryptionStateAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preMasterSecret), ::il2cpp_utils::ExtractType(serverSeed), ::il2cpp_utils::ExtractType(clientSeed), ::il2cpp_utils::ExtractType(isClient)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EncryptionUtility::IEncryptionState*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, preMasterSecret, serverSeed, clientSeed, isClient);
}
// Autogenerated method: EncryptionUtility.IsValidLength
bool GlobalNamespace::EncryptionUtility::IsValidLength(int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IsValidLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "IsValidLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, length);
}
// Autogenerated method: EncryptionUtility.EncryptData
void GlobalNamespace::EncryptionUtility::EncryptData(GlobalNamespace::EncryptionUtility::EncryptionState* state, ::Array<uint8_t>* data, ByRef<int> offset, ByRef<int> length, int extraPrefixedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "EncryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(extraPrefixedData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state, data, byref(offset), byref(length), extraPrefixedData);
}
// Autogenerated method: EncryptionUtility.TryDecryptData
bool GlobalNamespace::EncryptionUtility::TryDecryptData(GlobalNamespace::EncryptionUtility::EncryptionState* state, ::Array<uint8_t>* data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::TryDecryptData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "TryDecryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state, data, byref(offset), byref(length));
}
// Autogenerated method: EncryptionUtility.FastCopyBlock
void GlobalNamespace::EncryptionUtility::FastCopyBlock(::Array<uint8_t>* inArr, int inOff, ::Array<uint8_t>* outArr, int outOff) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::FastCopyBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "FastCopyBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inArr), ::il2cpp_utils::ExtractType(inOff), ::il2cpp_utils::ExtractType(outArr), ::il2cpp_utils::ExtractType(outOff)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inArr, inOff, outArr, outOff);
}
// Autogenerated method: EncryptionUtility.FastCopyMac
void GlobalNamespace::EncryptionUtility::FastCopyMac(::Array<uint8_t>* inArr, int inOff, ::Array<uint8_t>* outArr, int outOff) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::FastCopyMac");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "FastCopyMac", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inArr), ::il2cpp_utils::ExtractType(inOff), ::il2cpp_utils::ExtractType(outArr), ::il2cpp_utils::ExtractType(outOff)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inArr, inOff, outArr, outOff);
}
// Autogenerated method: EncryptionUtility.Log
void GlobalNamespace::EncryptionUtility::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: EncryptionUtility.LogV
void GlobalNamespace::EncryptionUtility::LogV(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::LogV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility", "LogV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EncryptionUtility/IEncryptionState.get_isValid
bool GlobalNamespace::EncryptionUtility::IEncryptionState::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IEncryptionState::get_isValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EncryptionUtility/IEncryptionState.EncryptData
void GlobalNamespace::EncryptionUtility::IEncryptionState::EncryptData(::Array<uint8_t>* data, ByRef<int> offset, ByRef<int> length, int extraPrefixBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IEncryptionState::EncryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(extraPrefixBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, byref(offset), byref(length), extraPrefixBytes);
}
// Autogenerated method: EncryptionUtility/IEncryptionState.TryDecryptData
bool GlobalNamespace::EncryptionUtility::IEncryptionState::TryDecryptData(::Array<uint8_t>* data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::IEncryptionState::TryDecryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDecryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, byref(offset), byref(length));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility/EncryptionState
#include "GlobalNamespace/EncryptionUtility_EncryptionState.hpp"
// Including type: System.Collections.Concurrent.ConcurrentQueue`1
#include "System/Collections/Concurrent/ConcurrentQueue_1.hpp"
// Including type: Org.BouncyCastle.Crypto.Macs.HMac
#include "Org/BouncyCastle/Crypto/Macs/HMac.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kReceivedSequencNumBufferLength
int GlobalNamespace::EncryptionUtility::EncryptionState::_get_kReceivedSequencNumBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get_kReceivedSequencNumBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EncryptionUtility/EncryptionState", "kReceivedSequencNumBufferLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kReceivedSequencNumBufferLength
void GlobalNamespace::EncryptionUtility::EncryptionState::_set_kReceivedSequencNumBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set_kReceivedSequencNumBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EncryptionUtility/EncryptionState", "kReceivedSequencNumBufferLength", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isValid
bool GlobalNamespace::EncryptionUtility::EncryptionState::_get__isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__isValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isValid"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean _isValid
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__isValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__isValid");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isValid"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastSentSequenceNum
int GlobalNamespace::EncryptionUtility::EncryptionState::_get__lastSentSequenceNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__lastSentSequenceNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSentSequenceNum"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Int32 _lastSentSequenceNum
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__lastSentSequenceNum(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__lastSentSequenceNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastSentSequenceNum"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasReceivedSequenceNum
bool GlobalNamespace::EncryptionUtility::EncryptionState::_get__hasReceivedSequenceNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__hasReceivedSequenceNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasReceivedSequenceNum"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean _hasReceivedSequenceNum
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__hasReceivedSequenceNum(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__hasReceivedSequenceNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasReceivedSequenceNum"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.UInt32 _lastReceivedSequenceNum
uint GlobalNamespace::EncryptionUtility::EncryptionState::_get__lastReceivedSequenceNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__lastReceivedSequenceNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastReceivedSequenceNum"))->offset;
  return *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.UInt32 _lastReceivedSequenceNum
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__lastReceivedSequenceNum(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__lastReceivedSequenceNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastReceivedSequenceNum"))->offset;
  *reinterpret_cast<uint*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean[] _receivedSequenceNumBuffer
::Array<bool>* GlobalNamespace::EncryptionUtility::EncryptionState::_get__receivedSequenceNumBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__receivedSequenceNumBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receivedSequenceNumBuffer"))->offset;
  return *reinterpret_cast<::Array<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Boolean[] _receivedSequenceNumBuffer
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__receivedSequenceNumBuffer(::Array<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__receivedSequenceNumBuffer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receivedSequenceNumBuffer"))->offset;
  *reinterpret_cast<::Array<bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte[] sendKey
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::_get_sendKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get_sendKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sendKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Byte[] sendKey
void GlobalNamespace::EncryptionUtility::EncryptionState::_set_sendKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set_sendKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sendKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte[] receiveKey
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::_get_receiveKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get_receiveKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "receiveKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Byte[] receiveKey
void GlobalNamespace::EncryptionUtility::EncryptionState::_set_receiveKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set_receiveKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "receiveKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte[] _sendMacKey
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::_get__sendMacKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__sendMacKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sendMacKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Byte[] _sendMacKey
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__sendMacKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__sendMacKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sendMacKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte[] _receiveMacKey
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::_get__receiveMacKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__receiveMacKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receiveMacKey"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Byte[] _receiveMacKey
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__receiveMacKey(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__receiveMacKey");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receiveMacKey"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _sendMacQueue
System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* GlobalNamespace::EncryptionUtility::EncryptionState::_get__sendMacQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__sendMacQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sendMacQueue"))->offset;
  return *reinterpret_cast<System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _sendMacQueue
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__sendMacQueue(System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__sendMacQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sendMacQueue"))->offset;
  *reinterpret_cast<System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _receiveMacQueue
System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* GlobalNamespace::EncryptionUtility::EncryptionState::_get__receiveMacQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_get__receiveMacQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receiveMacQueue"))->offset;
  return *reinterpret_cast<System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _receiveMacQueue
void GlobalNamespace::EncryptionUtility::EncryptionState::_set__receiveMacQueue(System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::_set__receiveMacQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receiveMacQueue"))->offset;
  *reinterpret_cast<System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: EncryptionUtility/EncryptionState.get_isValid
bool GlobalNamespace::EncryptionUtility::EncryptionState::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::get_isValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EncryptionUtility/EncryptionState.EncryptData
void GlobalNamespace::EncryptionUtility::EncryptionState::EncryptData(::Array<uint8_t>* data, ByRef<int> offset, ByRef<int> length, int extraPrefixBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::EncryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(extraPrefixBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, byref(offset), byref(length), extraPrefixBytes);
}
// Autogenerated method: EncryptionUtility/EncryptionState.TryDecryptData
bool GlobalNamespace::EncryptionUtility::EncryptionState::TryDecryptData(::Array<uint8_t>* data, ByRef<int> offset, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::TryDecryptData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryDecryptData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, data, byref(offset), byref(length));
}
// Autogenerated method: EncryptionUtility/EncryptionState.ComputeSendMac
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::ComputeSendMac(::Array<uint8_t>* data, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::ComputeSendMac");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeSendMac", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, count);
}
// Autogenerated method: EncryptionUtility/EncryptionState.ComputeReceiveMac
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::ComputeReceiveMac(::Array<uint8_t>* data, int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::ComputeReceiveMac");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeReceiveMac", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, count);
}
// Autogenerated method: EncryptionUtility/EncryptionState.IsValidSequenceNum
bool GlobalNamespace::EncryptionUtility::EncryptionState::IsValidSequenceNum(uint sequenceNum) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::IsValidSequenceNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidSequenceNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceNum)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceNum);
}
// Autogenerated method: EncryptionUtility/EncryptionState.PutSequenceNum
bool GlobalNamespace::EncryptionUtility::EncryptionState::PutSequenceNum(uint sequenceNum) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::PutSequenceNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutSequenceNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sequenceNum)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sequenceNum);
}
// Autogenerated method: EncryptionUtility/EncryptionState.GetNextSentSequenceNum
uint GlobalNamespace::EncryptionUtility::EncryptionState::GetNextSentSequenceNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::GetNextSentSequenceNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextSentSequenceNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: EncryptionUtility/EncryptionState.MakeSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::MakeSeed(::Array<uint8_t>* baseSeed, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::MakeSeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility/EncryptionState", "MakeSeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseSeed), ::il2cpp_utils::ExtractType(serverSeed), ::il2cpp_utils::ExtractType(clientSeed)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, baseSeed, serverSeed, clientSeed);
}
// Autogenerated method: EncryptionUtility/EncryptionState.PRF
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::EncryptionState::PRF(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::PRF");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility/EncryptionState", "PRF", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(seed), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, seed, length);
}
// Autogenerated method: EncryptionUtility/EncryptionState.PRF_Hash
void GlobalNamespace::EncryptionUtility::EncryptionState::PRF_Hash(::Array<uint8_t>* key, ::Array<uint8_t>* seed, ByRef<int> length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::PRF_Hash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EncryptionUtility/EncryptionState", "PRF_Hash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(seed), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, seed, byref(length));
}
// Autogenerated method: EncryptionUtility/EncryptionState.Dispose
void GlobalNamespace::EncryptionUtility::EncryptionState::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::EncryptionState::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EncryptionUtility/<>c__DisplayClass18_0
#include "GlobalNamespace/EncryptionUtility_--c__DisplayClass18_0.hpp"
// Including type: EncryptionUtility/IEncryptionState
#include "GlobalNamespace/EncryptionUtility_IEncryptionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Byte[] preMasterSecret
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_preMasterSecret() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_preMasterSecret");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "preMasterSecret"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte[] preMasterSecret
void GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_preMasterSecret(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_preMasterSecret");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "preMasterSecret"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] serverSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_serverSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_serverSeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "serverSeed"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte[] serverSeed
void GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_serverSeed(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_serverSeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "serverSeed"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] clientSeed
::Array<uint8_t>* GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_clientSeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_clientSeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientSeed"))->offset;
  return *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte[] clientSeed
void GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_clientSeed(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_clientSeed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clientSeed"))->offset;
  *reinterpret_cast<::Array<uint8_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean isClient
bool GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_isClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_get_isClient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isClient"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Boolean isClient
void GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_isClient(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::_set_isClient");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "isClient"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: EncryptionUtility/<>c__DisplayClass18_0.<CreateEncryptionStateAsync>b__0
GlobalNamespace::EncryptionUtility::IEncryptionState* GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::$CreateEncryptionStateAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EncryptionUtility::$$c__DisplayClass18_0::<CreateEncryptionStateAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateEncryptionStateAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EncryptionUtility::IEncryptionState*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EntitlementsStatus
#include "GlobalNamespace/EntitlementsStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus Unknown
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus Unknown
void GlobalNamespace::EntitlementsStatus::_set_Unknown(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus NotOwned
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_NotOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_NotOwned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "NotOwned"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus NotOwned
void GlobalNamespace::EntitlementsStatus::_set_NotOwned(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_NotOwned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "NotOwned", value));
}
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus NotDownloaded
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_NotDownloaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_NotDownloaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "NotDownloaded"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus NotDownloaded
void GlobalNamespace::EntitlementsStatus::_set_NotDownloaded(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_NotDownloaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "NotDownloaded", value));
}
// Autogenerated static field getter
// Get static field: static public EntitlementsStatus Ok
GlobalNamespace::EntitlementsStatus GlobalNamespace::EntitlementsStatus::_get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_Ok");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EntitlementsStatus>("", "EntitlementsStatus", "Ok"));
}
// Autogenerated static field setter
// Set static field: static public EntitlementsStatus Ok
void GlobalNamespace::EntitlementsStatus::_set_Ok(GlobalNamespace::EntitlementsStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_Ok");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EntitlementsStatus", "Ok", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::EntitlementsStatus::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::EntitlementsStatus::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EntitlementsStatus::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayRpcManager
#include "GlobalNamespace/GameplayRpcManager.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: GameplayRpcManager/SetGameplaySceneSyncFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneSyncFinishedRpc.hpp"
// Including type: GameplayRpcManager/SetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneReadyRpc.hpp"
// Including type: GameplayRpcManager/GetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySceneReadyRpc.hpp"
// Including type: GameplayRpcManager/SetPlayerDidConnectLateRpc
#include "GlobalNamespace/GameplayRpcManager_SetPlayerDidConnectLateRpc.hpp"
// Including type: GameplayRpcManager/SetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySongReadyRpc.hpp"
// Including type: GameplayRpcManager/GetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySongReadyRpc.hpp"
// Including type: GameplayRpcManager/SetSongStartTimeRpc
#include "GlobalNamespace/GameplayRpcManager_SetSongStartTimeRpc.hpp"
// Including type: GameplayRpcManager/NoteCutRpc
#include "GlobalNamespace/GameplayRpcManager_NoteCutRpc.hpp"
// Including type: GameplayRpcManager/NoteMissedRpc
#include "GlobalNamespace/GameplayRpcManager_NoteMissedRpc.hpp"
// Including type: GameplayRpcManager/LevelFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_LevelFinishedRpc.hpp"
// Including type: GameplayRpcManager/ReturnToMenuRpc
#include "GlobalNamespace/GameplayRpcManager_ReturnToMenuRpc.hpp"
// Including type: GameplayRpcManager/RequestReturnToMenuRpc
#include "GlobalNamespace/GameplayRpcManager_RequestReturnToMenuRpc.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: RpcHandler`1
#include "GlobalNamespace/RpcHandler_1.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kGameplayState
::Il2CppString* GlobalNamespace::GameplayRpcManager::_get_kGameplayState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_kGameplayState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "GameplayRpcManager", "kGameplayState"));
}
// Autogenerated static field setter
// Set static field: static private System.String kGameplayState
void GlobalNamespace::GameplayRpcManager::_set_kGameplayState(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_kGameplayState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager", "kGameplayState", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager* GlobalNamespace::GameplayRpcManager::_get__multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
void GlobalNamespace::GameplayRpcManager::_set__multiplayerSessionManager(GlobalNamespace::IMultiplayerSessionManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set__multiplayerSessionManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
  *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly RpcHandler`1<GameplayRpcManager/RpcType> _rpcHandler
GlobalNamespace::RpcHandler_1<GlobalNamespace::GameplayRpcManager::RpcType>* GlobalNamespace::GameplayRpcManager::_get__rpcHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get__rpcHandler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rpcHandler"))->offset;
  return *reinterpret_cast<GlobalNamespace::RpcHandler_1<GlobalNamespace::GameplayRpcManager::RpcType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly RpcHandler`1<GameplayRpcManager/RpcType> _rpcHandler
void GlobalNamespace::GameplayRpcManager::_set__rpcHandler(GlobalNamespace::RpcHandler_1<GlobalNamespace::GameplayRpcManager::RpcType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set__rpcHandler");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rpcHandler"))->offset;
  *reinterpret_cast<GlobalNamespace::RpcHandler_1<GlobalNamespace::GameplayRpcManager::RpcType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`3<System.String,PlayerSpecificSettingsAtStartNetSerializable,System.String> setGameplaySceneSyncFinishedEvent
System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* GlobalNamespace::GameplayRpcManager::_get_setGameplaySceneSyncFinishedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_setGameplaySceneSyncFinishedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setGameplaySceneSyncFinishedEvent"))->offset;
  return *reinterpret_cast<System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`3<System.String,PlayerSpecificSettingsAtStartNetSerializable,System.String> setGameplaySceneSyncFinishedEvent
void GlobalNamespace::GameplayRpcManager::_set_setGameplaySceneSyncFinishedEvent(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_setGameplaySceneSyncFinishedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setGameplaySceneSyncFinishedEvent"))->offset;
  *reinterpret_cast<System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<System.String,PlayerSpecificSettingsNetSerializable> setGameplaySceneReadyEvent
System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* GlobalNamespace::GameplayRpcManager::_get_setGameplaySceneReadyEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_setGameplaySceneReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setGameplaySceneReadyEvent"))->offset;
  return *reinterpret_cast<System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`2<System.String,PlayerSpecificSettingsNetSerializable> setGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::_set_setGameplaySceneReadyEvent(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_setGameplaySceneReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setGameplaySceneReadyEvent"))->offset;
  *reinterpret_cast<System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.String> getGameplaySceneReadyEvent
System::Action_1<::Il2CppString*>* GlobalNamespace::GameplayRpcManager::_get_getGameplaySceneReadyEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_getGameplaySceneReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "getGameplaySceneReadyEvent"))->offset;
  return *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<System.String> getGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::_set_getGameplaySceneReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_getGameplaySceneReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "getGameplaySceneReadyEvent"))->offset;
  *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`4<System.String,System.String,PlayerSpecificSettingsAtStartNetSerializable,System.String> setPlayerDidConnectLateEvent
System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* GlobalNamespace::GameplayRpcManager::_get_setPlayerDidConnectLateEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_setPlayerDidConnectLateEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setPlayerDidConnectLateEvent"))->offset;
  return *reinterpret_cast<System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`4<System.String,System.String,PlayerSpecificSettingsAtStartNetSerializable,System.String> setPlayerDidConnectLateEvent
void GlobalNamespace::GameplayRpcManager::_set_setPlayerDidConnectLateEvent(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_setPlayerDidConnectLateEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setPlayerDidConnectLateEvent"))->offset;
  *reinterpret_cast<System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.String> setGameplaySongReadyEvent
System::Action_1<::Il2CppString*>* GlobalNamespace::GameplayRpcManager::_get_setGameplaySongReadyEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_setGameplaySongReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setGameplaySongReadyEvent"))->offset;
  return *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<System.String> setGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::_set_setGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_setGameplaySongReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setGameplaySongReadyEvent"))->offset;
  *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.String> getGameplaySongReadyEvent
System::Action_1<::Il2CppString*>* GlobalNamespace::GameplayRpcManager::_get_getGameplaySongReadyEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_getGameplaySongReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "getGameplaySongReadyEvent"))->offset;
  return *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<System.String> getGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::_set_getGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_getGameplaySongReadyEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "getGameplaySongReadyEvent"))->offset;
  *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<System.String,System.Single> setSongStartTimeEvent
System::Action_2<::Il2CppString*, float>* GlobalNamespace::GameplayRpcManager::_get_setSongStartTimeEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_setSongStartTimeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setSongStartTimeEvent"))->offset;
  return *reinterpret_cast<System::Action_2<::Il2CppString*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`2<System.String,System.Single> setSongStartTimeEvent
void GlobalNamespace::GameplayRpcManager::_set_setSongStartTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_setSongStartTimeEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "setSongStartTimeEvent"))->offset;
  *reinterpret_cast<System::Action_2<::Il2CppString*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`4<System.String,System.Single,System.Single,NoteCutInfoNetSerializable> noteWasCutEvent
System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* GlobalNamespace::GameplayRpcManager::_get_noteWasCutEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_noteWasCutEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteWasCutEvent"))->offset;
  return *reinterpret_cast<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`4<System.String,System.Single,System.Single,NoteCutInfoNetSerializable> noteWasCutEvent
void GlobalNamespace::GameplayRpcManager::_set_noteWasCutEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_noteWasCutEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteWasCutEvent"))->offset;
  *reinterpret_cast<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`4<System.String,System.Single,System.Single,NoteMissInfoNetSerializable> noteWasMissedEvent
System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* GlobalNamespace::GameplayRpcManager::_get_noteWasMissedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_noteWasMissedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteWasMissedEvent"))->offset;
  return *reinterpret_cast<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`4<System.String,System.Single,System.Single,NoteMissInfoNetSerializable> noteWasMissedEvent
void GlobalNamespace::GameplayRpcManager::_set_noteWasMissedEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_noteWasMissedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "noteWasMissedEvent"))->offset;
  *reinterpret_cast<System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`2<System.String,MultiplayerLevelCompletionResults> levelFinishedEvent
System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* GlobalNamespace::GameplayRpcManager::_get_levelFinishedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_levelFinishedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFinishedEvent"))->offset;
  return *reinterpret_cast<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`2<System.String,MultiplayerLevelCompletionResults> levelFinishedEvent
void GlobalNamespace::GameplayRpcManager::_set_levelFinishedEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_levelFinishedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelFinishedEvent"))->offset;
  *reinterpret_cast<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.String> returnToMenuEvent
System::Action_1<::Il2CppString*>* GlobalNamespace::GameplayRpcManager::_get_returnToMenuEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_returnToMenuEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "returnToMenuEvent"))->offset;
  return *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<System.String> returnToMenuEvent
void GlobalNamespace::GameplayRpcManager::_set_returnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_returnToMenuEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "returnToMenuEvent"))->offset;
  *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.String> requestReturnToMenuEvent
System::Action_1<::Il2CppString*>* GlobalNamespace::GameplayRpcManager::_get_requestReturnToMenuEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_get_requestReturnToMenuEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "requestReturnToMenuEvent"))->offset;
  return *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Action`1<System.String> requestReturnToMenuEvent
void GlobalNamespace::GameplayRpcManager::_set_requestReturnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::_set_requestReturnToMenuEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "requestReturnToMenuEvent"))->offset;
  *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: GameplayRpcManager.get_enabled
bool GlobalNamespace::GameplayRpcManager::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::get_enabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.set_enabled
void GlobalNamespace::GameplayRpcManager::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::set_enabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_setGameplaySceneSyncFinishedEvent
void GlobalNamespace::GameplayRpcManager::add_setGameplaySceneSyncFinishedEvent(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setGameplaySceneSyncFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setGameplaySceneSyncFinishedEvent
void GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent(System::Action_3<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneSyncFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySceneSyncFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_setGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::add_setGameplaySceneReadyEvent(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneReadyEvent(System::Action_2<::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_getGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::add_getGameplaySceneReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_getGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_getGameplaySceneReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_getGameplaySceneReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_getGameplaySceneReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getGameplaySceneReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_setPlayerDidConnectLateEvent
void GlobalNamespace::GameplayRpcManager::add_setPlayerDidConnectLateEvent(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setPlayerDidConnectLateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setPlayerDidConnectLateEvent
void GlobalNamespace::GameplayRpcManager::remove_setPlayerDidConnectLateEvent(System::Action_4<::Il2CppString*, ::Il2CppString*, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setPlayerDidConnectLateEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setPlayerDidConnectLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_setGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::add_setGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_setGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_getGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::add_getGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_getGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_getGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_getGameplaySongReadyEvent
void GlobalNamespace::GameplayRpcManager::remove_getGameplaySongReadyEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_getGameplaySongReadyEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_getGameplaySongReadyEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_setSongStartTimeEvent
void GlobalNamespace::GameplayRpcManager::add_setSongStartTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_setSongStartTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_setSongStartTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_setSongStartTimeEvent
void GlobalNamespace::GameplayRpcManager::remove_setSongStartTimeEvent(System::Action_2<::Il2CppString*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_setSongStartTimeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_setSongStartTimeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_noteWasCutEvent
void GlobalNamespace::GameplayRpcManager::add_noteWasCutEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_noteWasCutEvent
void GlobalNamespace::GameplayRpcManager::remove_noteWasCutEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteCutInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_noteWasCutEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_noteWasMissedEvent
void GlobalNamespace::GameplayRpcManager::add_noteWasMissedEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_noteWasMissedEvent
void GlobalNamespace::GameplayRpcManager::remove_noteWasMissedEvent(System::Action_4<::Il2CppString*, float, float, GlobalNamespace::NoteMissInfoNetSerializable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_noteWasMissedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_levelFinishedEvent
void GlobalNamespace::GameplayRpcManager::add_levelFinishedEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_levelFinishedEvent
void GlobalNamespace::GameplayRpcManager::remove_levelFinishedEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_returnToMenuEvent
void GlobalNamespace::GameplayRpcManager::add_returnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_returnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_returnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_returnToMenuEvent
void GlobalNamespace::GameplayRpcManager::remove_returnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_returnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_returnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.add_requestReturnToMenuEvent
void GlobalNamespace::GameplayRpcManager::add_requestReturnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::add_requestReturnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_requestReturnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.remove_requestReturnToMenuEvent
void GlobalNamespace::GameplayRpcManager::remove_requestReturnToMenuEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::remove_requestReturnToMenuEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_requestReturnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayRpcManager.Dispose
void GlobalNamespace::GameplayRpcManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.SetGameplaySceneSyncFinished
void GlobalNamespace::GameplayRpcManager::SetGameplaySceneSyncFinished(GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetGameplaySceneSyncFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySceneSyncFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.InvokeSetGameplaySceneSyncFinishCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneSyncFinishCallback(::Il2CppString* userId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStart, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneSyncFinishCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetGameplaySceneSyncFinishCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(playersAtGameStart), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, playersAtGameStart, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.SetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::SetGameplaySceneReady(GlobalNamespace::PlayerSpecificSettingsNetSerializable* playerSpecificSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetGameplaySceneReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerSpecificSettings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerSpecificSettings);
}
// Autogenerated method: GameplayRpcManager.InvokeSetGameplaySceneReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneReadyCallback(::Il2CppString* userId, GlobalNamespace::PlayerSpecificSettingsNetSerializable* playerSpecificSettingsNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySceneReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetGameplaySceneReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(playerSpecificSettingsNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, playerSpecificSettingsNetSerializable);
}
// Autogenerated method: GameplayRpcManager.GetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::GetGameplaySceneReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::GetGameplaySceneReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameplaySceneReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeGetGameplaySceneReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeGetGameplaySceneReadyCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeGetGameplaySceneReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetGameplaySceneReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.SetPlayerDidConnectLate
void GlobalNamespace::GameplayRpcManager::SetPlayerDidConnectLate(::Il2CppString* usedId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetPlayerDidConnectLate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlayerDidConnectLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(usedId), ::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, usedId, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.InvokeSetPlayerDidConnectLate
void GlobalNamespace::GameplayRpcManager::InvokeSetPlayerDidConnectLate(::Il2CppString* userId, ::Il2CppString* failedUserId, GlobalNamespace::PlayerSpecificSettingsAtStartNetSerializable* playersAtGameStartNetSerializable, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetPlayerDidConnectLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetPlayerDidConnectLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(failedUserId), ::il2cpp_utils::ExtractType(playersAtGameStartNetSerializable), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, failedUserId, playersAtGameStartNetSerializable, sessionGameId);
}
// Autogenerated method: GameplayRpcManager.SetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::SetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetGameplaySongReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeSetGameplaySongReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySongReadyCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetGameplaySongReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetGameplaySongReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.GetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::GetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::GetGameplaySongReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGameplaySongReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeGetGameplayLevelReadyCallback
void GlobalNamespace::GameplayRpcManager::InvokeGetGameplayLevelReadyCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeGetGameplayLevelReadyCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeGetGameplayLevelReadyCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.SetSongStartTime
void GlobalNamespace::GameplayRpcManager::SetSongStartTime(float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::SetSongStartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSongStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTime);
}
// Autogenerated method: GameplayRpcManager.InvokeSetSongStartTimeCallback
void GlobalNamespace::GameplayRpcManager::InvokeSetSongStartTimeCallback(::Il2CppString* userId, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeSetSongStartTimeCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeSetSongStartTimeCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, startTime);
}
// Autogenerated method: GameplayRpcManager.NoteCut
void GlobalNamespace::GameplayRpcManager::NoteCut(float songTime, GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfoNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::NoteCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteCutInfoNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime, noteCutInfoNetSerializable);
}
// Autogenerated method: GameplayRpcManager.InvokeNoteWasCutCallback
void GlobalNamespace::GameplayRpcManager::InvokeNoteWasCutCallback(::Il2CppString* userId, float syncTime, float songTime, GlobalNamespace::NoteCutInfoNetSerializable* noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeNoteWasCutCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeNoteWasCutCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, syncTime, songTime, noteCutInfo);
}
// Autogenerated method: GameplayRpcManager.NoteMissed
void GlobalNamespace::GameplayRpcManager::NoteMissed(float songTime, GlobalNamespace::NoteMissInfoNetSerializable* noteMissInfoNetSerializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::NoteMissed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteMissInfoNetSerializable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime, noteMissInfoNetSerializable);
}
// Autogenerated method: GameplayRpcManager.InvokeNoteWasMissedCallback
void GlobalNamespace::GameplayRpcManager::InvokeNoteWasMissedCallback(::Il2CppString* userId, float syncTime, float songTime, GlobalNamespace::NoteMissInfoNetSerializable* noteMissInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeNoteWasMissedCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeNoteWasMissedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(syncTime), ::il2cpp_utils::ExtractType(songTime), ::il2cpp_utils::ExtractType(noteMissInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, syncTime, songTime, noteMissInfo);
}
// Autogenerated method: GameplayRpcManager.LevelFinished
void GlobalNamespace::GameplayRpcManager::LevelFinished(GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::LevelFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, results);
}
// Autogenerated method: GameplayRpcManager.InvokeLevelFinishedCallback
void GlobalNamespace::GameplayRpcManager::InvokeLevelFinishedCallback(::Il2CppString* userId, GlobalNamespace::MultiplayerLevelCompletionResults* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeLevelFinishedCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeLevelFinishedCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, results);
}
// Autogenerated method: GameplayRpcManager.ReturnToMenu
void GlobalNamespace::GameplayRpcManager::ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::ReturnToMenu");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeReturnToMenuCallback
void GlobalNamespace::GameplayRpcManager::InvokeReturnToMenuCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeReturnToMenuCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeReturnToMenuCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: GameplayRpcManager.RequestReturnToMenu
void GlobalNamespace::GameplayRpcManager::RequestReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RequestReturnToMenu");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayRpcManager.InvokeRequestReturnToMenuCallback
void GlobalNamespace::GameplayRpcManager::InvokeRequestReturnToMenuCallback(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::InvokeRequestReturnToMenuCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeRequestReturnToMenuCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/RpcType
#include "GlobalNamespace/GameplayRpcManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetGameplaySceneSyncFinish
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneSyncFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneSyncFinish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetGameplaySceneSyncFinish"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetGameplaySceneSyncFinish
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneSyncFinish(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneSyncFinish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetGameplaySceneSyncFinish", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetGameplaySceneReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySceneReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetGameplaySceneReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySceneReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetGameplaySceneReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType GetGameplaySceneReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySceneReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySceneReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "GetGameplaySceneReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType GetGameplaySceneReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySceneReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySceneReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "GetGameplaySceneReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetActivePlayerFailedToConnect
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetActivePlayerFailedToConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetActivePlayerFailedToConnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetActivePlayerFailedToConnect"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetActivePlayerFailedToConnect
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetActivePlayerFailedToConnect(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetActivePlayerFailedToConnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetActivePlayerFailedToConnect", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetGameplaySongReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetGameplaySongReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetGameplaySongReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySongReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetGameplaySongReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetGameplaySongReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType GetGameplaySongReady
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySongReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_GetGameplaySongReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "GetGameplaySongReady"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType GetGameplaySongReady
void GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySongReady(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_GetGameplaySongReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "GetGameplaySongReady", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType SetSongStartTime
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_SetSongStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_SetSongStartTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "SetSongStartTime"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType SetSongStartTime
void GlobalNamespace::GameplayRpcManager::RpcType::_set_SetSongStartTime(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_SetSongStartTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "SetSongStartTime", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType NoteCut
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteCut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "NoteCut"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType NoteCut
void GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteCut(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteCut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "NoteCut", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType NoteMissed
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteMissed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_NoteMissed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "NoteMissed"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType NoteMissed
void GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteMissed(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_NoteMissed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "NoteMissed", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType LevelFinished
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_LevelFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_LevelFinished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "LevelFinished"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType LevelFinished
void GlobalNamespace::GameplayRpcManager::RpcType::_set_LevelFinished(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_LevelFinished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "LevelFinished", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType ReturnToMenu
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_ReturnToMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "ReturnToMenu"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType ReturnToMenu
void GlobalNamespace::GameplayRpcManager::RpcType::_set_ReturnToMenu(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_ReturnToMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "ReturnToMenu", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayRpcManager/RpcType RequestReturnToMenu
GlobalNamespace::GameplayRpcManager::RpcType GlobalNamespace::GameplayRpcManager::RpcType::_get_RequestReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_RequestReturnToMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayRpcManager::RpcType>("", "GameplayRpcManager/RpcType", "RequestReturnToMenu"));
}
// Autogenerated static field setter
// Set static field: static public GameplayRpcManager/RpcType RequestReturnToMenu
void GlobalNamespace::GameplayRpcManager::RpcType::_set_RequestReturnToMenu(GlobalNamespace::GameplayRpcManager::RpcType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_RequestReturnToMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayRpcManager/RpcType", "RequestReturnToMenu", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t GlobalNamespace::GameplayRpcManager::RpcType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Byte value__
void GlobalNamespace::GameplayRpcManager::RpcType::_set_value__(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayRpcManager::RpcType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayRpcManager/SetGameplaySceneSyncFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneSyncFinishedRpc.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/SetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySceneReadyRpc.hpp"
// Including type: PlayerSpecificSettingsNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/GetGameplaySceneReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySceneReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayRpcManager/SetPlayerDidConnectLateRpc
#include "GlobalNamespace/GameplayRpcManager_SetPlayerDidConnectLateRpc.hpp"
// Including type: PlayerSpecificSettingsAtStartNetSerializable
#include "GlobalNamespace/PlayerSpecificSettingsAtStartNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/SetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_SetGameplaySongReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/GetGameplaySongReadyRpc
#include "GlobalNamespace/GameplayRpcManager_GetGameplaySongReadyRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/SetSongStartTimeRpc
#include "GlobalNamespace/GameplayRpcManager_SetSongStartTimeRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/NoteCutRpc
#include "GlobalNamespace/GameplayRpcManager_NoteCutRpc.hpp"
// Including type: NoteCutInfoNetSerializable
#include "GlobalNamespace/NoteCutInfoNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/NoteMissedRpc
#include "GlobalNamespace/GameplayRpcManager_NoteMissedRpc.hpp"
// Including type: NoteMissInfoNetSerializable
#include "GlobalNamespace/NoteMissInfoNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/LevelFinishedRpc
#include "GlobalNamespace/GameplayRpcManager_LevelFinishedRpc.hpp"
// Including type: MultiplayerLevelCompletionResults
#include "GlobalNamespace/MultiplayerLevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/ReturnToMenuRpc
#include "GlobalNamespace/GameplayRpcManager_ReturnToMenuRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayRpcManager/RequestReturnToMenuRpc
#include "GlobalNamespace/GameplayRpcManager_RequestReturnToMenuRpc.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 maxPlayerCount
int GlobalNamespace::GameplayServerConfiguration::_get_maxPlayerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_get_maxPlayerCount");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxPlayerCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly System.Int32 maxPlayerCount
void GlobalNamespace::GameplayServerConfiguration::_set_maxPlayerCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_set_maxPlayerCount");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxPlayerCount"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly DiscoveryPolicy discoveryPolicy
GlobalNamespace::DiscoveryPolicy GlobalNamespace::GameplayServerConfiguration::_get_discoveryPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_get_discoveryPolicy");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "discoveryPolicy"))->offset;
  return *reinterpret_cast<GlobalNamespace::DiscoveryPolicy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly DiscoveryPolicy discoveryPolicy
void GlobalNamespace::GameplayServerConfiguration::_set_discoveryPolicy(GlobalNamespace::DiscoveryPolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_set_discoveryPolicy");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "discoveryPolicy"))->offset;
  *reinterpret_cast<GlobalNamespace::DiscoveryPolicy*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly InvitePolicy invitePolicy
GlobalNamespace::InvitePolicy GlobalNamespace::GameplayServerConfiguration::_get_invitePolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_get_invitePolicy");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invitePolicy"))->offset;
  return *reinterpret_cast<GlobalNamespace::InvitePolicy*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly InvitePolicy invitePolicy
void GlobalNamespace::GameplayServerConfiguration::_set_invitePolicy(GlobalNamespace::InvitePolicy value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_set_invitePolicy");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "invitePolicy"))->offset;
  *reinterpret_cast<GlobalNamespace::InvitePolicy*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly GameplayServerMode gameplayServerMode
GlobalNamespace::GameplayServerMode GlobalNamespace::GameplayServerConfiguration::_get_gameplayServerMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_get_gameplayServerMode");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayServerMode"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayServerMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly GameplayServerMode gameplayServerMode
void GlobalNamespace::GameplayServerConfiguration::_set_gameplayServerMode(GlobalNamespace::GameplayServerMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_set_gameplayServerMode");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayServerMode"))->offset;
  *reinterpret_cast<GlobalNamespace::GameplayServerMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly SongSelectionMode songSelectionMode
GlobalNamespace::SongSelectionMode GlobalNamespace::GameplayServerConfiguration::_get_songSelectionMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_get_songSelectionMode");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "songSelectionMode"))->offset;
  return *reinterpret_cast<GlobalNamespace::SongSelectionMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly SongSelectionMode songSelectionMode
void GlobalNamespace::GameplayServerConfiguration::_set_songSelectionMode(GlobalNamespace::SongSelectionMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_set_songSelectionMode");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "songSelectionMode"))->offset;
  *reinterpret_cast<GlobalNamespace::SongSelectionMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: public readonly GameplayServerControlSettings gameplayServerControlSettings
GlobalNamespace::GameplayServerControlSettings GlobalNamespace::GameplayServerConfiguration::_get_gameplayServerControlSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_get_gameplayServerControlSettings");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayServerControlSettings"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayServerControlSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public readonly GameplayServerControlSettings gameplayServerControlSettings
void GlobalNamespace::GameplayServerConfiguration::_set_gameplayServerControlSettings(GlobalNamespace::GameplayServerControlSettings value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::_set_gameplayServerControlSettings");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "gameplayServerControlSettings"))->offset;
  *reinterpret_cast<GlobalNamespace::GameplayServerControlSettings*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: GameplayServerConfiguration.Equals
bool GlobalNamespace::GameplayServerConfiguration::Equals(ByRef<GlobalNamespace::GameplayServerConfiguration> other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, byref(other));
}
// Autogenerated method: GameplayServerConfiguration.Equals
bool GlobalNamespace::GameplayServerConfiguration::Equals_(GlobalNamespace::GameplayServerConfiguration other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: GameplayServerConfiguration.Serialize
void GlobalNamespace::GameplayServerConfiguration::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: GameplayServerConfiguration.CreateFromSerializedData
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::GameplayServerConfiguration::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(*this, ___internal__method, reader);
}
// Autogenerated method: GameplayServerConfiguration.Deserialize
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::GameplayServerConfiguration::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerConfiguration", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: GameplayServerConfiguration.WithMaxPlayerCount
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::GameplayServerConfiguration::WithMaxPlayerCount(int maxPlayerCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::WithMaxPlayerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithMaxPlayerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxPlayerCount)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(*this, ___internal__method, maxPlayerCount);
}
// Autogenerated method: GameplayServerConfiguration.Equals
bool GlobalNamespace::GameplayServerConfiguration::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: GameplayServerConfiguration.GetHashCode
int GlobalNamespace::GameplayServerConfiguration::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: GameplayServerConfiguration.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::GameplayServerConfiguration&& a, const GlobalNamespace::GameplayServerConfiguration&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerConfiguration", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated method: GameplayServerConfiguration.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::GameplayServerConfiguration&& a, const GlobalNamespace::GameplayServerConfiguration&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerConfiguration::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerConfiguration", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, byref(a), byref(b));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CountdownGameplayServerFiniteStateMachine
#include "GlobalNamespace/CountdownGameplayServerFiniteStateMachine.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameState
#include "GlobalNamespace/GameState.hpp"
// Including type: GameplayServerFiniteStateMachine
#include "GlobalNamespace/GameplayServerFiniteStateMachine.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: protected readonly GameplayServerFiniteStateMachine fsm
GlobalNamespace::GameplayServerFiniteStateMachine* GlobalNamespace::GameState::_get_fsm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameState::_get_fsm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fsm"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayServerFiniteStateMachine**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: protected readonly GameplayServerFiniteStateMachine fsm
void GlobalNamespace::GameState::_set_fsm(GlobalNamespace::GameplayServerFiniteStateMachine* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameState::_set_fsm");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "fsm"))->offset;
  *reinterpret_cast<GlobalNamespace::GameplayServerFiniteStateMachine**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: GameState.Dispose
void GlobalNamespace::GameState::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameState::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameState.Init
void GlobalNamespace::GameState::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameState::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameStateType
#include "GlobalNamespace/GameStateType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameStateType EmptyServer
GlobalNamespace::GameStateType GlobalNamespace::GameStateType::_get_EmptyServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_get_EmptyServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameStateType>("", "GameStateType", "EmptyServer"));
}
// Autogenerated static field setter
// Set static field: static public GameStateType EmptyServer
void GlobalNamespace::GameStateType::_set_EmptyServer(GlobalNamespace::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_set_EmptyServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameStateType", "EmptyServer", value));
}
// Autogenerated static field getter
// Get static field: static public GameStateType SelectingLevel
GlobalNamespace::GameStateType GlobalNamespace::GameStateType::_get_SelectingLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_get_SelectingLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameStateType>("", "GameStateType", "SelectingLevel"));
}
// Autogenerated static field setter
// Set static field: static public GameStateType SelectingLevel
void GlobalNamespace::GameStateType::_set_SelectingLevel(GlobalNamespace::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_set_SelectingLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameStateType", "SelectingLevel", value));
}
// Autogenerated static field getter
// Get static field: static public GameStateType StartingLevel
GlobalNamespace::GameStateType GlobalNamespace::GameStateType::_get_StartingLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_get_StartingLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameStateType>("", "GameStateType", "StartingLevel"));
}
// Autogenerated static field setter
// Set static field: static public GameStateType StartingLevel
void GlobalNamespace::GameStateType::_set_StartingLevel(GlobalNamespace::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_set_StartingLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameStateType", "StartingLevel", value));
}
// Autogenerated static field getter
// Get static field: static public GameStateType RunningLevel
GlobalNamespace::GameStateType GlobalNamespace::GameStateType::_get_RunningLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_get_RunningLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameStateType>("", "GameStateType", "RunningLevel"));
}
// Autogenerated static field setter
// Set static field: static public GameStateType RunningLevel
void GlobalNamespace::GameStateType::_set_RunningLevel(GlobalNamespace::GameStateType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_set_RunningLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameStateType", "RunningLevel", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int GlobalNamespace::GameStateType::_get_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_get_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: public System.Int32 value__
void GlobalNamespace::GameStateType::_set_value__(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameStateType::_set_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayServerFiniteStateMachine
#include "GlobalNamespace/GameplayServerFiniteStateMachine.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
// Including type: MenuRpcManager
#include "GlobalNamespace/MenuRpcManager.hpp"
// Including type: GameplayRpcManager
#include "GlobalNamespace/GameplayRpcManager.hpp"
// Including type: GameState
#include "GlobalNamespace/GameState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private MasterServer.ITimeProvider <timeProvider>k__BackingField
MasterServer::ITimeProvider* GlobalNamespace::GameplayServerFiniteStateMachine::_get_$timeProvider$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$timeProvider$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<timeProvider>k__BackingField"))->offset;
  return *reinterpret_cast<MasterServer::ITimeProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private MasterServer.ITimeProvider <timeProvider>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$timeProvider$k__BackingField(MasterServer::ITimeProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$timeProvider$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<timeProvider>k__BackingField"))->offset;
  *reinterpret_cast<MasterServer::ITimeProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private IMultiplayerSessionManager <multiplayerSessionManager>k__BackingField
GlobalNamespace::IMultiplayerSessionManager* GlobalNamespace::GameplayServerFiniteStateMachine::_get_$multiplayerSessionManager$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$multiplayerSessionManager$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<multiplayerSessionManager>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private IMultiplayerSessionManager <multiplayerSessionManager>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$multiplayerSessionManager$k__BackingField(GlobalNamespace::IMultiplayerSessionManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$multiplayerSessionManager$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<multiplayerSessionManager>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.String <ownerUserId>k__BackingField
::Il2CppString* GlobalNamespace::GameplayServerFiniteStateMachine::_get_$ownerUserId$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$ownerUserId$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ownerUserId>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.String <ownerUserId>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$ownerUserId$k__BackingField(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$ownerUserId$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ownerUserId>k__BackingField"))->offset;
  *reinterpret_cast<::Il2CppString**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private BeatmapLevelSelectionMask <selectionMask>k__BackingField
GlobalNamespace::BeatmapLevelSelectionMask GlobalNamespace::GameplayServerFiniteStateMachine::_get_$selectionMask$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$selectionMask$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<selectionMask>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::BeatmapLevelSelectionMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private BeatmapLevelSelectionMask <selectionMask>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$selectionMask$k__BackingField(GlobalNamespace::BeatmapLevelSelectionMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$selectionMask$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<selectionMask>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::BeatmapLevelSelectionMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private GameplayServerConfiguration <configuration>k__BackingField
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::GameplayServerFiniteStateMachine::_get_$configuration$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$configuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<configuration>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayServerConfiguration*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private GameplayServerConfiguration <configuration>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$configuration$k__BackingField(GlobalNamespace::GameplayServerConfiguration value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$configuration$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<configuration>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::GameplayServerConfiguration*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private IServerBeatmapProvider <beatmapProvider>k__BackingField
GlobalNamespace::IServerBeatmapProvider* GlobalNamespace::GameplayServerFiniteStateMachine::_get_$beatmapProvider$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$beatmapProvider$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapProvider>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::IServerBeatmapProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private IServerBeatmapProvider <beatmapProvider>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$beatmapProvider$k__BackingField(GlobalNamespace::IServerBeatmapProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$beatmapProvider$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<beatmapProvider>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::IServerBeatmapProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private MenuRpcManager <menuRpcManager>k__BackingField
GlobalNamespace::MenuRpcManager* GlobalNamespace::GameplayServerFiniteStateMachine::_get_$menuRpcManager$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$menuRpcManager$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<menuRpcManager>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::MenuRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private MenuRpcManager <menuRpcManager>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$menuRpcManager$k__BackingField(GlobalNamespace::MenuRpcManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$menuRpcManager$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<menuRpcManager>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::MenuRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private GameplayRpcManager <gameplayRpcManager>k__BackingField
GlobalNamespace::GameplayRpcManager* GlobalNamespace::GameplayServerFiniteStateMachine::_get_$gameplayRpcManager$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_$gameplayRpcManager$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<gameplayRpcManager>k__BackingField"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameplayRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private GameplayRpcManager <gameplayRpcManager>k__BackingField
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_$gameplayRpcManager$k__BackingField(GlobalNamespace::GameplayRpcManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_$gameplayRpcManager$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<gameplayRpcManager>k__BackingField"))->offset;
  *reinterpret_cast<GlobalNamespace::GameplayRpcManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: protected GameState state
GlobalNamespace::GameState* GlobalNamespace::GameplayServerFiniteStateMachine::_get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  return *reinterpret_cast<GlobalNamespace::GameState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: protected GameState state
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_state(GlobalNamespace::GameState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "state"))->offset;
  *reinterpret_cast<GlobalNamespace::GameState**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: protected System.Boolean enteringState
bool GlobalNamespace::GameplayServerFiniteStateMachine::_get_enteringState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_get_enteringState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enteringState"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: protected System.Boolean enteringState
void GlobalNamespace::GameplayServerFiniteStateMachine::_set_enteringState(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::_set_enteringState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "enteringState"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_timeProvider
MasterServer::ITimeProvider* GlobalNamespace::GameplayServerFiniteStateMachine::get_timeProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_timeProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<MasterServer::ITimeProvider*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_timeProvider
void GlobalNamespace::GameplayServerFiniteStateMachine::set_timeProvider(MasterServer::ITimeProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_timeProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timeProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_multiplayerSessionManager
GlobalNamespace::IMultiplayerSessionManager* GlobalNamespace::GameplayServerFiniteStateMachine::get_multiplayerSessionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_multiplayerSessionManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerSessionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IMultiplayerSessionManager*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_multiplayerSessionManager
void GlobalNamespace::GameplayServerFiniteStateMachine::set_multiplayerSessionManager(GlobalNamespace::IMultiplayerSessionManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_multiplayerSessionManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerSessionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_ownerUserId
::Il2CppString* GlobalNamespace::GameplayServerFiniteStateMachine::get_ownerUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_ownerUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ownerUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_ownerUserId
void GlobalNamespace::GameplayServerFiniteStateMachine::set_ownerUserId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_ownerUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ownerUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_selectionMask
GlobalNamespace::BeatmapLevelSelectionMask GlobalNamespace::GameplayServerFiniteStateMachine::get_selectionMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_selectionMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapLevelSelectionMask, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_selectionMask
void GlobalNamespace::GameplayServerFiniteStateMachine::set_selectionMask(GlobalNamespace::BeatmapLevelSelectionMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_selectionMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_configuration
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::GameplayServerFiniteStateMachine::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_configuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_configuration
void GlobalNamespace::GameplayServerFiniteStateMachine::set_configuration(GlobalNamespace::GameplayServerConfiguration value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_configuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_beatmapProvider
GlobalNamespace::IServerBeatmapProvider* GlobalNamespace::GameplayServerFiniteStateMachine::get_beatmapProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_beatmapProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IServerBeatmapProvider*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_beatmapProvider
void GlobalNamespace::GameplayServerFiniteStateMachine::set_beatmapProvider(GlobalNamespace::IServerBeatmapProvider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_beatmapProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_menuRpcManager
GlobalNamespace::MenuRpcManager* GlobalNamespace::GameplayServerFiniteStateMachine::get_menuRpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_menuRpcManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_menuRpcManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MenuRpcManager*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_menuRpcManager
void GlobalNamespace::GameplayServerFiniteStateMachine::set_menuRpcManager(GlobalNamespace::MenuRpcManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_menuRpcManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_menuRpcManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayServerFiniteStateMachine.get_gameplayRpcManager
GlobalNamespace::GameplayRpcManager* GlobalNamespace::GameplayServerFiniteStateMachine::get_gameplayRpcManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::get_gameplayRpcManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayRpcManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayRpcManager*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayServerFiniteStateMachine.set_gameplayRpcManager
void GlobalNamespace::GameplayServerFiniteStateMachine::set_gameplayRpcManager(GlobalNamespace::GameplayRpcManager* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachine::set_gameplayRpcManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_gameplayRpcManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayServerFiniteStateMachineFactory
#include "GlobalNamespace/GameplayServerFiniteStateMachineFactory.hpp"
// Including type: GameplayServerFiniteStateMachine
#include "GlobalNamespace/GameplayServerFiniteStateMachine.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayServerFiniteStateMachineFactory.Create
GlobalNamespace::GameplayServerFiniteStateMachine* GlobalNamespace::GameplayServerFiniteStateMachineFactory::Create(MasterServer::ITimeProvider* timeProvider, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, ::Il2CppString* creatorId, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::IServerBeatmapProvider* beatmapProvider) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayServerFiniteStateMachineFactory::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayServerFiniteStateMachineFactory", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timeProvider), ::il2cpp_utils::ExtractType(multiplayerSessionManager), ::il2cpp_utils::ExtractType(creatorId), ::il2cpp_utils::ExtractType(selectionMask), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(beatmapProvider)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFiniteStateMachine*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, timeProvider, multiplayerSessionManager, creatorId, selectionMask, configuration, beatmapProvider);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ManagedGameplayServerFiniteStateMachine
#include "GlobalNamespace/ManagedGameplayServerFiniteStateMachine.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuickStartOneSongGameplayServerFiniteStateMachine
#include "GlobalNamespace/QuickStartOneSongGameplayServerFiniteStateMachine.hpp"
// Including type: MasterServer.ITimeProvider
#include "MasterServer/ITimeProvider.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IServerBeatmapProvider
#include "GlobalNamespace/IServerBeatmapProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HealthCheckService
#include "GlobalNamespace/HealthCheckService.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
// Including type: System.Net.HttpListener
#include "System/Net/HttpListener.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kTimeoutLengthMs
int GlobalNamespace::HealthCheckService::_get_kTimeoutLengthMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_get_kTimeoutLengthMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "HealthCheckService", "kTimeoutLengthMs"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kTimeoutLengthMs
void GlobalNamespace::HealthCheckService::_set_kTimeoutLengthMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_set_kTimeoutLengthMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HealthCheckService", "kTimeoutLengthMs", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _port
int GlobalNamespace::HealthCheckService::_get__port() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_get__port");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_port"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Int32 _port
void GlobalNamespace::HealthCheckService::_set__port(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_set__port");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_port"))->offset;
  *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.Thread _runThread
System::Threading::Thread* GlobalNamespace::HealthCheckService::_get__runThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_get__runThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_runThread"))->offset;
  return *reinterpret_cast<System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private readonly System.Threading.Thread _runThread
void GlobalNamespace::HealthCheckService::_set__runThread(System::Threading::Thread* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_set__runThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_runThread"))->offset;
  *reinterpret_cast<System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
bool GlobalNamespace::HealthCheckService::_get__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_get__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Boolean _disposed
void GlobalNamespace::HealthCheckService::_set__disposed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_set__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.ManualResetEvent _manualResetEvent
System::Threading::ManualResetEvent* GlobalNamespace::HealthCheckService::_get__manualResetEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_get__manualResetEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_manualResetEvent"))->offset;
  return *reinterpret_cast<System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Threading.ManualResetEvent _manualResetEvent
void GlobalNamespace::HealthCheckService::_set__manualResetEvent(System::Threading::ManualResetEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_set__manualResetEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_manualResetEvent"))->offset;
  *reinterpret_cast<System::Threading::ManualResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated instance field getter
// Get instance field: private System.Net.HttpListener _listener
System::Net::HttpListener* GlobalNamespace::HealthCheckService::_get__listener() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_get__listener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listener"))->offset;
  return *reinterpret_cast<System::Net::HttpListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field setter
// Set instance field: private System.Net.HttpListener _listener
void GlobalNamespace::HealthCheckService::_set__listener(System::Net::HttpListener* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::_set__listener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listener"))->offset;
  *reinterpret_cast<System::Net::HttpListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset) = value;
}
// Autogenerated method: HealthCheckService.Dispose
void GlobalNamespace::HealthCheckService::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthCheckService.PollUpdate
void GlobalNamespace::HealthCheckService::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthCheckService.Run
void GlobalNamespace::HealthCheckService::Run() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IAsyncComputeManager
#include "GlobalNamespace/IAsyncComputeManager.hpp"
// Including type: AsyncComputeOperation
#include "GlobalNamespace/AsyncComputeOperation.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: AsyncComputeOperation`1
#include "GlobalNamespace/AsyncComputeOperation_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAsyncComputeManager.BeginOperation
void GlobalNamespace::IAsyncComputeManager::BeginOperation(GlobalNamespace::AsyncComputeOperation* asyncComputeOperation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAsyncComputeManager::BeginOperation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginOperation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncComputeOperation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, asyncComputeOperation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAuthenticationTokenProvider.get_hashedUserId
::Il2CppString* GlobalNamespace::IAuthenticationTokenProvider::get_hashedUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAuthenticationTokenProvider::get_hashedUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hashedUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IAuthenticationTokenProvider.get_userName
::Il2CppString* GlobalNamespace::IAuthenticationTokenProvider::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAuthenticationTokenProvider::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IAuthenticationTokenProvider.GetAuthenticationToken
System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>* GlobalNamespace::IAuthenticationTokenProvider::GetAuthenticationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAuthenticationTokenProvider::GetAuthenticationToken");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAuthenticationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ICPUMonitor
#include "GlobalNamespace/ICPUMonitor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICPUMonitor.get_utilization
float GlobalNamespace::ICPUMonitor::get_utilization() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICPUMonitor::get_utilization");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_utilization", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ICPUMonitor.PollUpdate
void GlobalNamespace::ICPUMonitor::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICPUMonitor::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ICertificateEncryptionProvider
#include "GlobalNamespace/ICertificateEncryptionProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICertificateEncryptionProvider.SignData
::Array<uint8_t>* GlobalNamespace::ICertificateEncryptionProvider::SignData(::Array<uint8_t>* data, int offset, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICertificateEncryptionProvider::SignData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SignData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, data, offset, length);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ICertificateValidator
#include "GlobalNamespace/ICertificateValidator.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate2
#include "System/Security/Cryptography/X509Certificates/X509Certificate2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICertificateValidator.ValidateCertificateChain
void GlobalNamespace::ICertificateValidator::ValidateCertificateChain(GlobalNamespace::MasterServerEndPoint* endPoint, System::Security::Cryptography::X509Certificates::X509Certificate2* certificate, ::Array<::Array<uint8_t>*>* certificateChain) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICertificateValidator::ValidateCertificateChain");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateCertificateChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(certificate), ::il2cpp_utils::ExtractType(certificateChain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, certificate, certificateChain);
}
