// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_CameraMask
#include "GlobalNamespace/SteamVR_CameraMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_CameraMask.Awake
void GlobalNamespace::SteamVR_CameraMask::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_CameraMask::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Controller
#include "GlobalNamespace/SteamVR_Controller.hpp"
// Including type: SteamVR_Controller/ButtonMask
#include "GlobalNamespace/SteamVR_Controller_ButtonMask.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: SteamVR_Controller/DeviceRelation
#include "GlobalNamespace/SteamVR_Controller_DeviceRelation.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_Controller/Device[] devices
::Array<GlobalNamespace::SteamVR_Controller::Device*>* GlobalNamespace::SteamVR_Controller::_get_devices() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::_get_devices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_Controller::Device*>*>("", "SteamVR_Controller", "devices"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Controller/Device[] devices
void GlobalNamespace::SteamVR_Controller::_set_devices(::Array<GlobalNamespace::SteamVR_Controller::Device*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::_set_devices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller", "devices", value));
}
// Autogenerated method: SteamVR_Controller.Input
GlobalNamespace::SteamVR_Controller::Device* GlobalNamespace::SteamVR_Controller::Input(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Input");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Controller", "Input", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(deviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Controller::Device*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_Controller.Update
void GlobalNamespace::SteamVR_Controller::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Controller", "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Controller.GetDeviceIndex
int GlobalNamespace::SteamVR_Controller::GetDeviceIndex(GlobalNamespace::SteamVR_Controller::DeviceRelation relation, Valve::VR::ETrackedDeviceClass deviceClass, int relativeTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::GetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Controller", "GetDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(relation, deviceClass, relativeTo)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, relation, deviceClass, relativeTo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/ButtonMask
#include "GlobalNamespace/SteamVR_Controller_ButtonMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt64 System
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_System");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "System"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 System
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_System(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_System");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "System", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 ApplicationMenu
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_ApplicationMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_ApplicationMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "ApplicationMenu"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 ApplicationMenu
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_ApplicationMenu(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_ApplicationMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "ApplicationMenu", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Grip
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Grip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Grip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Grip"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Grip
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Grip(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Grip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Grip", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis0
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis0"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis0
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis0(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis0", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis1
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis1"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis1
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis1(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis1", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis2
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis2"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis2
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis2(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis2", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis3
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis3"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis3
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis3(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis3", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Axis4
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Axis4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Axis4"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Axis4
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis4(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Axis4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Axis4", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Touchpad
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Touchpad() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Touchpad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Touchpad"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Touchpad
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Touchpad(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Touchpad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Touchpad", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 Trigger
uint64_t GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_get_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "SteamVR_Controller/ButtonMask", "Trigger"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 Trigger
void GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Trigger(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::ButtonMask::_set_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/ButtonMask", "Trigger", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Controller/Device.get_index
uint GlobalNamespace::SteamVR_Controller::Device::get_index() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_index");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_index", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_index
void GlobalNamespace::SteamVR_Controller::Device::set_index(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::set_index");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_index", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_valid
bool GlobalNamespace::SteamVR_Controller::Device::get_valid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_valid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_valid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.set_valid
void GlobalNamespace::SteamVR_Controller::Device::set_valid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::set_valid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_valid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Controller/Device.get_connected
bool GlobalNamespace::SteamVR_Controller::Device::get_connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_connected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_connected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_hasTracking
bool GlobalNamespace::SteamVR_Controller::Device::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_outOfRange
bool GlobalNamespace::SteamVR_Controller::Device::get_outOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_outOfRange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_outOfRange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_calibrating
bool GlobalNamespace::SteamVR_Controller::Device::get_calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_calibrating");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_calibrating", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_uninitialized
bool GlobalNamespace::SteamVR_Controller::Device::get_uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_uninitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_uninitialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_transform
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Controller::Device::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_velocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_velocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.get_angularVelocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_Controller::Device::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetState
Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPrevState
Valve::VR::VRControllerState_t GlobalNamespace::SteamVR_Controller::Device::GetPrevState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPrevState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPrevState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRControllerState_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPose
Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_Controller::Device::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.Update
void GlobalNamespace::SteamVR_Controller::Device::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetPress
bool GlobalNamespace::SteamVR_Controller::Device::GetPress(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressDown
bool GlobalNamespace::SteamVR_Controller::Device::GetPressDown(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetPressUp
bool GlobalNamespace::SteamVR_Controller::Device::GetPressUp(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetPressUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPressUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(uint64_t buttonMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonMask)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonMask);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouch
bool GlobalNamespace::SteamVR_Controller::Device::GetTouch(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchDown
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchDown(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetTouchUp
bool GlobalNamespace::SteamVR_Controller::Device::GetTouchUp(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetTouchUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTouchUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.GetAxis
UnityEngine::Vector2 GlobalNamespace::SteamVR_Controller::Device::GetAxis(Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetAxis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetAxis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buttonId)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.TriggerHapticPulse
void GlobalNamespace::SteamVR_Controller::Device::TriggerHapticPulse(uint16_t durationMicroSec, Valve::VR::EVRButtonId buttonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(durationMicroSec, buttonId)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, durationMicroSec, buttonId);
}
// Autogenerated method: SteamVR_Controller/Device.UpdateHairTrigger
void GlobalNamespace::SteamVR_Controller::Device::UpdateHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::UpdateHairTrigger");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateHairTrigger", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTrigger
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTrigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetHairTrigger");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHairTrigger", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerDown
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHairTriggerDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Controller/Device.GetHairTriggerUp
bool GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::Device::GetHairTriggerUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetHairTriggerUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Controller/DeviceRelation
#include "GlobalNamespace/SteamVR_Controller_DeviceRelation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation First
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_First() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_First");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "First"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation First
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_First(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_First");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "First", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation Leftmost
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Leftmost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Leftmost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "Leftmost"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation Leftmost
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Leftmost(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Leftmost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "Leftmost", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation Rightmost
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Rightmost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_Rightmost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "Rightmost"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation Rightmost
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Rightmost(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_Rightmost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "Rightmost", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation FarthestLeft
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "FarthestLeft"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation FarthestLeft
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestLeft(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "FarthestLeft", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Controller/DeviceRelation FarthestRight
GlobalNamespace::SteamVR_Controller::DeviceRelation GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_get_FarthestRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Controller::DeviceRelation>("", "SteamVR_Controller/DeviceRelation", "FarthestRight"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Controller/DeviceRelation FarthestRight
void GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestRight(GlobalNamespace::SteamVR_Controller::DeviceRelation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Controller::DeviceRelation::_set_FarthestRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Controller/DeviceRelation", "FarthestRight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_ControllerManager
#include "GlobalNamespace/SteamVR_ControllerManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String hiddenPrefix
::Il2CppString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_ControllerManager", "hiddenPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPrefix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String hiddenPostfix
::Il2CppString* GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_get_hiddenPostfix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_ControllerManager", "hiddenPostfix"));
}
// Autogenerated static field setter
// Set static field: static private System.String hiddenPostfix
void GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_set_hiddenPostfix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "hiddenPostfix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String[] labels
::Array<::Il2CppString*>* GlobalNamespace::SteamVR_ControllerManager::_get_labels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_get_labels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("", "SteamVR_ControllerManager", "labels"));
}
// Autogenerated static field setter
// Set static field: static private System.String[] labels
void GlobalNamespace::SteamVR_ControllerManager::_set_labels(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::_set_labels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_ControllerManager", "labels", value));
}
// Autogenerated method: SteamVR_ControllerManager.SetUniqueObject
void GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject(UnityEngine::GameObject* o, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::SetUniqueObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetUniqueObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(o, index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, o, index);
}
// Autogenerated method: SteamVR_ControllerManager.UpdateTargets
void GlobalNamespace::SteamVR_ControllerManager::UpdateTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::UpdateTargets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateTargets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.Awake
void GlobalNamespace::SteamVR_ControllerManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnEnable
void GlobalNamespace::SteamVR_ControllerManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnDisable
void GlobalNamespace::SteamVR_ControllerManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager.OnInputFocus
void GlobalNamespace::SteamVR_ControllerManager::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hasFocus)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_ControllerManager.HideObject
void GlobalNamespace::SteamVR_ControllerManager::HideObject(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::HideObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HideObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, name)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.ShowObject
void GlobalNamespace::SteamVR_ControllerManager::ShowObject(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::ShowObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, name)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, name);
}
// Autogenerated method: SteamVR_ControllerManager.SetTrackedDeviceIndex
void GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex(int objectIndex, uint trackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::SetTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(objectIndex, trackedDeviceIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, objectIndex, trackedDeviceIndex);
}
// Autogenerated method: SteamVR_ControllerManager.OnTrackedDeviceRoleChanged
void GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnTrackedDeviceRoleChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnTrackedDeviceRoleChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrEvent)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_ControllerManager.OnDeviceConnected
void GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index, connected)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_ControllerManager.Refresh
void GlobalNamespace::SteamVR_ControllerManager::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::Refresh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ControllerManager..cctor
void GlobalNamespace::SteamVR_ControllerManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ControllerManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_ControllerManager", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Ears
#include "GlobalNamespace/SteamVR_Ears.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Ears.OnNewPosesApplied
void GlobalNamespace::SteamVR_Ears::OnNewPosesApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Ears::OnNewPosesApplied");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnNewPosesApplied", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Ears.OnEnable
void GlobalNamespace::SteamVR_Ears::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Ears::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Ears.OnDisable
void GlobalNamespace::SteamVR_Ears::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Ears::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Events
#include "GlobalNamespace/SteamVR_Events.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
// Including type: SteamVR_Events/ActionNoArgs
#include "GlobalNamespace/SteamVR_Events_ActionNoArgs.hpp"
// Including type: SteamVR_Events/Action`1
#include "GlobalNamespace/SteamVR_Events_Action_1.hpp"
// Including type: SteamVR_Events/Action`2
#include "GlobalNamespace/SteamVR_Events_Action_2.hpp"
// Including type: SteamVR_Events/Action`3
#include "GlobalNamespace/SteamVR_Events_Action_3.hpp"
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
// Including type: SteamVR_Events/Event`1
#include "GlobalNamespace/SteamVR_Events_Event_1.hpp"
// Including type: SteamVR_Events/Event`2
#include "GlobalNamespace/SteamVR_Events_Event_2.hpp"
// Including type: SteamVR_Events/Event`3
#include "GlobalNamespace/SteamVR_Events_Event_3.hpp"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Events.UnityAction`1
#include "UnityEngine/Events/UnityAction_1.hpp"
// Including type: UnityEngine.Events.UnityAction`2
#include "UnityEngine/Events/UnityAction_2.hpp"
// Including type: UnityEngine.Events.UnityAction`3
#include "UnityEngine/Events/UnityAction_3.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Calibrating
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Calibrating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Calibrating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Calibrating"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Calibrating
void GlobalNamespace::SteamVR_Events::_set_Calibrating(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Calibrating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Calibrating", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`2<System.Int32,System.Boolean> DeviceConnected
GlobalNamespace::SteamVR_Events::Event_2<int, bool>* GlobalNamespace::SteamVR_Events::_get_DeviceConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_DeviceConnected");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_2<int, bool>*>("", "SteamVR_Events", "DeviceConnected")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`2<System.Int32,System.Boolean> DeviceConnected
void GlobalNamespace::SteamVR_Events::_set_DeviceConnected(GlobalNamespace::SteamVR_Events::Event_2<int, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_DeviceConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "DeviceConnected", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`3<UnityEngine.Color,System.Single,System.Boolean> Fade
GlobalNamespace::SteamVR_Events::Event_3<UnityEngine::Color, float, bool>* GlobalNamespace::SteamVR_Events::_get_Fade() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Fade");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_3<UnityEngine::Color, float, bool>*>("", "SteamVR_Events", "Fade")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`3<UnityEngine.Color,System.Single,System.Boolean> Fade
void GlobalNamespace::SteamVR_Events::_set_Fade(GlobalNamespace::SteamVR_Events::Event_3<UnityEngine::Color, float, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Fade");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Fade", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event FadeReady
GlobalNamespace::SteamVR_Events::Event* GlobalNamespace::SteamVR_Events::_get_FadeReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_FadeReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event*>("", "SteamVR_Events", "FadeReady"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event FadeReady
void GlobalNamespace::SteamVR_Events::_set_FadeReady(GlobalNamespace::SteamVR_Events::Event* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_FadeReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "FadeReady", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> HideRenderModels
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_HideRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_HideRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "HideRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> HideRenderModels
void GlobalNamespace::SteamVR_Events::_set_HideRenderModels(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_HideRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "HideRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Initializing
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Initializing() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Initializing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Initializing"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Initializing
void GlobalNamespace::SteamVR_Events::_set_Initializing(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Initializing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Initializing", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> InputFocus
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_InputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_InputFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "InputFocus"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> InputFocus
void GlobalNamespace::SteamVR_Events::_set_InputFocus(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_InputFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "InputFocus", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> Loading
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> Loading
void GlobalNamespace::SteamVR_Events::_set_Loading(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeIn
GlobalNamespace::SteamVR_Events::Event_1<float>* GlobalNamespace::SteamVR_Events::_get_LoadingFadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_LoadingFadeIn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<float>*>("", "SteamVR_Events", "LoadingFadeIn"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeIn
void GlobalNamespace::SteamVR_Events::_set_LoadingFadeIn(GlobalNamespace::SteamVR_Events::Event_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_LoadingFadeIn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "LoadingFadeIn", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeOut
GlobalNamespace::SteamVR_Events::Event_1<float>* GlobalNamespace::SteamVR_Events::_get_LoadingFadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_LoadingFadeOut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<float>*>("", "SteamVR_Events", "LoadingFadeOut"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Single> LoadingFadeOut
void GlobalNamespace::SteamVR_Events::_set_LoadingFadeOut(GlobalNamespace::SteamVR_Events::Event_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_LoadingFadeOut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "LoadingFadeOut", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<Valve.VR.TrackedDevicePose_t[]> NewPoses
GlobalNamespace::SteamVR_Events::Event_1<::Array<Valve::VR::TrackedDevicePose_t>*>* GlobalNamespace::SteamVR_Events::_get_NewPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_NewPoses");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<::Array<Valve::VR::TrackedDevicePose_t>*>*>("", "SteamVR_Events", "NewPoses"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<Valve.VR.TrackedDevicePose_t[]> NewPoses
void GlobalNamespace::SteamVR_Events::_set_NewPoses(GlobalNamespace::SteamVR_Events::Event_1<::Array<Valve::VR::TrackedDevicePose_t>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_NewPoses");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "NewPoses", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event NewPosesApplied
GlobalNamespace::SteamVR_Events::Event* GlobalNamespace::SteamVR_Events::_get_NewPosesApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_NewPosesApplied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event*>("", "SteamVR_Events", "NewPosesApplied"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event NewPosesApplied
void GlobalNamespace::SteamVR_Events::_set_NewPosesApplied(GlobalNamespace::SteamVR_Events::Event* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_NewPosesApplied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "NewPosesApplied", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`1<System.Boolean> OutOfRange
GlobalNamespace::SteamVR_Events::Event_1<bool>* GlobalNamespace::SteamVR_Events::_get_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_1<bool>*>("", "SteamVR_Events", "OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`1<System.Boolean> OutOfRange
void GlobalNamespace::SteamVR_Events::_set_OutOfRange(GlobalNamespace::SteamVR_Events::Event_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Events/Event`2<SteamVR_RenderModel,System.Boolean> RenderModelLoaded
GlobalNamespace::SteamVR_Events::Event_2<GlobalNamespace::SteamVR_RenderModel*, bool>* GlobalNamespace::SteamVR_Events::_get_RenderModelLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_RenderModelLoaded");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Events::Event_2<GlobalNamespace::SteamVR_RenderModel*, bool>*>("", "SteamVR_Events", "RenderModelLoaded")));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Events/Event`2<SteamVR_RenderModel,System.Boolean> RenderModelLoaded
void GlobalNamespace::SteamVR_Events::_set_RenderModelLoaded(GlobalNamespace::SteamVR_Events::Event_2<GlobalNamespace::SteamVR_RenderModel*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_RenderModelLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "RenderModelLoaded", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<Valve.VR.EVREventType,SteamVR_Events/Event`1<Valve.VR.VREvent_t>> systemEvents
System::Collections::Generic::Dictionary_2<Valve::VR::EVREventType, GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*>* GlobalNamespace::SteamVR_Events::_get_systemEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_get_systemEvents");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<Valve::VR::EVREventType, GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*>*>("", "SteamVR_Events", "systemEvents")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<Valve.VR.EVREventType,SteamVR_Events/Event`1<Valve.VR.VREvent_t>> systemEvents
void GlobalNamespace::SteamVR_Events::_set_systemEvents(System::Collections::Generic::Dictionary_2<Valve::VR::EVREventType, GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::_set_systemEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Events", "systemEvents", value));
}
// Autogenerated method: SteamVR_Events.CalibratingAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::CalibratingAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::CalibratingAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "CalibratingAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.DeviceConnectedAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::DeviceConnectedAction(UnityEngine::Events::UnityAction_2<int, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::DeviceConnectedAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "DeviceConnectedAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.FadeAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::FadeAction(UnityEngine::Events::UnityAction_3<UnityEngine::Color, float, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::FadeAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "FadeAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.FadeReadyAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::FadeReadyAction(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::FadeReadyAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "FadeReadyAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.HideRenderModelsAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::HideRenderModelsAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::HideRenderModelsAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "HideRenderModelsAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.InitializingAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::InitializingAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::InitializingAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "InitializingAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.InputFocusAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::InputFocusAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::InputFocusAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "InputFocusAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::LoadingAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingFadeInAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingFadeInAction(UnityEngine::Events::UnityAction_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::LoadingFadeInAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingFadeInAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.LoadingFadeOutAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::LoadingFadeOutAction(UnityEngine::Events::UnityAction_1<float>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::LoadingFadeOutAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "LoadingFadeOutAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.NewPosesAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::NewPosesAction(UnityEngine::Events::UnityAction_1<::Array<Valve::VR::TrackedDevicePose_t>*>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::NewPosesAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "NewPosesAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.NewPosesAppliedAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::NewPosesAppliedAction(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::NewPosesAppliedAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "NewPosesAppliedAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.OutOfRangeAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::OutOfRangeAction(UnityEngine::Events::UnityAction_1<bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::OutOfRangeAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "OutOfRangeAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.RenderModelLoadedAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::RenderModelLoadedAction(UnityEngine::Events::UnityAction_2<GlobalNamespace::SteamVR_RenderModel*, bool>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::RenderModelLoadedAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "RenderModelLoadedAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: SteamVR_Events.System
GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>* GlobalNamespace::SteamVR_Events::System(Valve::VR::EVREventType eventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::System");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "System", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventType)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Event_1<Valve::VR::VREvent_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventType);
}
// Autogenerated method: SteamVR_Events.SystemAction
GlobalNamespace::SteamVR_Events::Action* GlobalNamespace::SteamVR_Events::SystemAction(Valve::VR::EVREventType eventType, UnityEngine::Events::UnityAction_1<Valve::VR::VREvent_t>* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::SystemAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", "SystemAction", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventType, action)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Events::Action*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, eventType, action);
}
// Autogenerated method: SteamVR_Events..cctor
void GlobalNamespace::SteamVR_Events::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Events", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/Action.Enable
void GlobalNamespace::SteamVR_Events::Action::Enable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Action::Enable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(enabled)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated method: SteamVR_Events/Action.set_enabled
void GlobalNamespace::SteamVR_Events::Action::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Action::set_enabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/ActionNoArgs
#include "GlobalNamespace/SteamVR_Events_ActionNoArgs.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/ActionNoArgs.Enable
void GlobalNamespace::SteamVR_Events::ActionNoArgs::Enable(bool enabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::ActionNoArgs::Enable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Enable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(enabled)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, enabled);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Events/Event
#include "GlobalNamespace/SteamVR_Events_Event.hpp"
// Including type: UnityEngine.Events.UnityAction
#include "UnityEngine/Events/UnityAction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Events/Event.Listen
void GlobalNamespace::SteamVR_Events::Event::Listen(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Event::Listen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Listen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: SteamVR_Events/Event.Remove
void GlobalNamespace::SteamVR_Events::Event::Remove(UnityEngine::Events::UnityAction* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Event::Remove");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(action)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: SteamVR_Events/Event.Send
void GlobalNamespace::SteamVR_Events::Event::Send() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Events::Event::Send");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: System.IO.FileSystemWatcher
#include "System/IO/FileSystemWatcher.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.IO.FileSystemEventArgs
#include "System/IO/FileSystemEventArgs.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_ExternalCamera.ReadConfig
void GlobalNamespace::SteamVR_ExternalCamera::ReadConfig() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::ReadConfig");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadConfig", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnChanged
void GlobalNamespace::SteamVR_ExternalCamera::OnChanged(::Il2CppObject* source, System::IO::FileSystemEventArgs* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(source, e)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, source, e);
}
// Autogenerated method: SteamVR_ExternalCamera.AttachToCamera
void GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AttachToCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_ExternalCamera.GetTargetDistance
float GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTargetDistance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.RenderNear
void GlobalNamespace::SteamVR_ExternalCamera::RenderNear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::RenderNear");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RenderNear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.RenderFar
void GlobalNamespace::SteamVR_ExternalCamera::RenderFar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::RenderFar");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RenderFar", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnGUI
void GlobalNamespace::SteamVR_ExternalCamera::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnGUI");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnEnable
void GlobalNamespace::SteamVR_ExternalCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_ExternalCamera.OnDisable
void GlobalNamespace::SteamVR_ExternalCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Fade
#include "GlobalNamespace/SteamVR_Fade.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material fadeMaterial
UnityEngine::Material* GlobalNamespace::SteamVR_Fade::_get_fadeMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_get_fadeMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "SteamVR_Fade", "fadeMaterial"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material fadeMaterial
void GlobalNamespace::SteamVR_Fade::_set_fadeMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_set_fadeMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Fade", "fadeMaterial", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 fadeMaterialColorID
int GlobalNamespace::SteamVR_Fade::_get_fadeMaterialColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_get_fadeMaterialColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SteamVR_Fade", "fadeMaterialColorID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 fadeMaterialColorID
void GlobalNamespace::SteamVR_Fade::_set_fadeMaterialColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::_set_fadeMaterialColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Fade", "fadeMaterialColorID", value));
}
// Autogenerated method: SteamVR_Fade.Start
void GlobalNamespace::SteamVR_Fade::Start(UnityEngine::Color newColor, float duration, bool fadeOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Fade", "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newColor, duration, fadeOverlay)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, newColor, duration, fadeOverlay);
}
// Autogenerated method: SteamVR_Fade.View
void GlobalNamespace::SteamVR_Fade::View(UnityEngine::Color newColor, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::View");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Fade", "View", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newColor, duration)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, newColor, duration);
}
// Autogenerated method: SteamVR_Fade.OnStartFade
void GlobalNamespace::SteamVR_Fade::OnStartFade(UnityEngine::Color newColor, float duration, bool fadeOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnStartFade");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnStartFade", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newColor, duration, fadeOverlay)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newColor, duration, fadeOverlay);
}
// Autogenerated method: SteamVR_Fade.OnEnable
void GlobalNamespace::SteamVR_Fade::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade.OnDisable
void GlobalNamespace::SteamVR_Fade::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade.OnPostRender
void GlobalNamespace::SteamVR_Fade::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Fade..cctor
void GlobalNamespace::SteamVR_Fade::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Fade::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Fade", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Frustum
#include "GlobalNamespace/SteamVR_Frustum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Frustum.UpdateModel
void GlobalNamespace::SteamVR_Frustum::UpdateModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::UpdateModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Frustum.OnDeviceConnected
void GlobalNamespace::SteamVR_Frustum::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(i, connected)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR_Frustum.OnEnable
void GlobalNamespace::SteamVR_Frustum::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Frustum.OnDisable
void GlobalNamespace::SteamVR_Frustum::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_GameView
#include "GlobalNamespace/SteamVR_GameView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_GameView.Awake
void GlobalNamespace::SteamVR_GameView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_GameView::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_IK
#include "GlobalNamespace/SteamVR_IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_IK.LateUpdate
void GlobalNamespace::SteamVR_IK::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_IK::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_IK.Solve
bool GlobalNamespace::SteamVR_IK::Solve(UnityEngine::Vector3 start, UnityEngine::Vector3 end, UnityEngine::Vector3 poleVector, float jointDist, float targetDist, UnityEngine::Vector3& result, UnityEngine::Vector3& forward, UnityEngine::Vector3& up) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_IK::Solve");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_IK", "Solve", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(start, end, poleVector, jointDist, targetDist, result, forward, up)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, start, end, poleVector, jointDist, targetDist, result, forward, up);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_LoadLevel
#include "GlobalNamespace/SteamVR_LoadLevel.hpp"
// Including type: SteamVR_LoadLevel/<LoadLevel>d__45
#include "GlobalNamespace/SteamVR_LoadLevel_-LoadLevel-d__45.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_LoadLevel _active
GlobalNamespace::SteamVR_LoadLevel* GlobalNamespace::SteamVR_LoadLevel::_get__active() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::_get__active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_LoadLevel*>("", "SteamVR_LoadLevel", "_active"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_LoadLevel _active
void GlobalNamespace::SteamVR_LoadLevel::_set__active(GlobalNamespace::SteamVR_LoadLevel* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::_set__active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_LoadLevel", "_active", value));
}
// Autogenerated method: SteamVR_LoadLevel.get_loading
bool GlobalNamespace::SteamVR_LoadLevel::get_loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::get_loading");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_loading", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.get_progress
float GlobalNamespace::SteamVR_LoadLevel::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::get_progress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_progress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.get_progressTexture
UnityEngine::Texture* GlobalNamespace::SteamVR_LoadLevel::get_progressTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::get_progressTexture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "get_progressTexture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.OnEnable
void GlobalNamespace::SteamVR_LoadLevel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Trigger
void GlobalNamespace::SteamVR_LoadLevel::Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::Trigger");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Trigger", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Begin
void GlobalNamespace::SteamVR_LoadLevel::Begin(::Il2CppString* levelName, bool showGrid, float fadeOutTime, float r, float g, float b, float a) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::Begin");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", "Begin", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(levelName, showGrid, fadeOutTime, r, g, b, a)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, levelName, showGrid, fadeOutTime, r, g, b, a);
}
// Autogenerated method: SteamVR_LoadLevel.OnGUI
void GlobalNamespace::SteamVR_LoadLevel::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::OnGUI");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.Update
void GlobalNamespace::SteamVR_LoadLevel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.LoadLevel
System::Collections::IEnumerator* GlobalNamespace::SteamVR_LoadLevel::LoadLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::LoadLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel.GetOverlayHandle
uint64_t GlobalNamespace::SteamVR_LoadLevel::GetOverlayHandle(::Il2CppString* overlayName, UnityEngine::Transform* transform, float widthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::GetOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOverlayHandle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(overlayName, transform, widthInMeters)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, overlayName, transform, widthInMeters);
}
// Autogenerated method: SteamVR_LoadLevel..cctor
void GlobalNamespace::SteamVR_LoadLevel::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_LoadLevel", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_LoadLevel/<LoadLevel>d__45
#include "GlobalNamespace/SteamVR_LoadLevel_-LoadLevel-d__45.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: SteamVR_Controller/Device
#include "GlobalNamespace/SteamVR_Controller_Device.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.MoveNext
bool GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_MoveNext() {
  return GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::MoveNext();
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_LoadLevel/<LoadLevel>d__45.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_LoadLevel::$LoadLevel$d__45::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Menu
#include "GlobalNamespace/SteamVR_Menu.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: SteamVR_Overlay
#include "GlobalNamespace/SteamVR_Overlay.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Menu.get_texture
UnityEngine::RenderTexture* GlobalNamespace::SteamVR_Menu::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::get_texture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.get_scale
float GlobalNamespace::SteamVR_Menu::get_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::get_scale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_scale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.set_scale
void GlobalNamespace::SteamVR_Menu::set_scale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::set_scale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_scale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_Menu.Awake
void GlobalNamespace::SteamVR_Menu::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.OnGUI
void GlobalNamespace::SteamVR_Menu::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::OnGUI");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.ShowMenu
void GlobalNamespace::SteamVR_Menu::ShowMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::ShowMenu");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ShowMenu", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.HideMenu
void GlobalNamespace::SteamVR_Menu::HideMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::HideMenu");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HideMenu", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.Update
void GlobalNamespace::SteamVR_Menu::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.SetScale
void GlobalNamespace::SteamVR_Menu::SetScale(float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::SetScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(scale)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scale);
}
// Autogenerated method: SteamVR_Menu.SaveCursorState
void GlobalNamespace::SteamVR_Menu::SaveCursorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::SaveCursorState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SaveCursorState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Menu.RestoreCursorState
void GlobalNamespace::SteamVR_Menu::RestoreCursorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Menu::RestoreCursorState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RestoreCursorState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Overlay
#include "GlobalNamespace/SteamVR_Overlay.hpp"
// Including type: SteamVR_Overlay/IntersectionResults
#include "GlobalNamespace/SteamVR_Overlay_IntersectionResults.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xD8A5D0
// Autogenerated static field getter
// Get static field: static private SteamVR_Overlay <instance>k__BackingField
GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::_get_$instance$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::_get_$instance$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Overlay*>("", "SteamVR_Overlay", "<instance>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Overlay <instance>k__BackingField
void GlobalNamespace::SteamVR_Overlay::_set_$instance$k__BackingField(GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::_set_$instance$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Overlay", "<instance>k__BackingField", value));
}
// Autogenerated method: SteamVR_Overlay.get_instance
GlobalNamespace::SteamVR_Overlay* GlobalNamespace::SteamVR_Overlay::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::get_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Overlay*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.set_instance
void GlobalNamespace::SteamVR_Overlay::set_instance(GlobalNamespace::SteamVR_Overlay* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::set_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "set_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Overlay.get_key
::Il2CppString* GlobalNamespace::SteamVR_Overlay::get_key() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::get_key");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Overlay", "get_key", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnEnable
void GlobalNamespace::SteamVR_Overlay::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.OnDisable
void GlobalNamespace::SteamVR_Overlay::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.UpdateOverlay
void GlobalNamespace::SteamVR_Overlay::UpdateOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::UpdateOverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateOverlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Overlay.PollNextEvent
bool GlobalNamespace::SteamVR_Overlay::PollNextEvent(Valve::VR::VREvent_t& pEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent);
}
// Autogenerated method: SteamVR_Overlay.ComputeIntersection
bool GlobalNamespace::SteamVR_Overlay::ComputeIntersection(UnityEngine::Vector3 source, UnityEngine::Vector3 direction, GlobalNamespace::SteamVR_Overlay::IntersectionResults& results) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Overlay::ComputeIntersection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ComputeIntersection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(source, direction, results)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, source, direction, results);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_PlayArea
#include "GlobalNamespace/SteamVR_PlayArea.hpp"
// Including type: SteamVR_PlayArea/<UpdateBounds>d__14
#include "GlobalNamespace/SteamVR_PlayArea_-UpdateBounds-d__14.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_PlayArea.GetBounds
bool GlobalNamespace::SteamVR_PlayArea::GetBounds(GlobalNamespace::SteamVR_PlayArea::Size size, Valve::VR::HmdQuad_t& pRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::GetBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_PlayArea", "GetBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(size, pRect)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, size, pRect);
}
// Autogenerated method: SteamVR_PlayArea.BuildMesh
void GlobalNamespace::SteamVR_PlayArea::BuildMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::BuildMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BuildMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnDrawGizmos
void GlobalNamespace::SteamVR_PlayArea::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnDrawGizmosSelected
void GlobalNamespace::SteamVR_PlayArea::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.DrawWireframe
void GlobalNamespace::SteamVR_PlayArea::DrawWireframe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::DrawWireframe");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DrawWireframe", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.OnEnable
void GlobalNamespace::SteamVR_PlayArea::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea.UpdateBounds
System::Collections::IEnumerator* GlobalNamespace::SteamVR_PlayArea::UpdateBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::UpdateBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_PlayArea/Size
#include "GlobalNamespace/SteamVR_PlayArea.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size Calibrated
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get_Calibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get_Calibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "Calibrated"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size Calibrated
void GlobalNamespace::SteamVR_PlayArea::Size::_set_Calibrated(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set_Calibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "Calibrated", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _400x300
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__400x300() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get__400x300");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_400x300"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _400x300
void GlobalNamespace::SteamVR_PlayArea::Size::_set__400x300(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set__400x300");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_400x300", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _300x225
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__300x225() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get__300x225");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_300x225"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _300x225
void GlobalNamespace::SteamVR_PlayArea::Size::_set__300x225(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set__300x225");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_300x225", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_PlayArea/Size _200x150
GlobalNamespace::SteamVR_PlayArea::Size GlobalNamespace::SteamVR_PlayArea::Size::_get__200x150() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_get__200x150");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_PlayArea::Size>("", "SteamVR_PlayArea/Size", "_200x150"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_PlayArea/Size _200x150
void GlobalNamespace::SteamVR_PlayArea::Size::_set__200x150(GlobalNamespace::SteamVR_PlayArea::Size value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::Size::_set__200x150");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_PlayArea/Size", "_200x150", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_PlayArea/<UpdateBounds>d__14
#include "GlobalNamespace/SteamVR_PlayArea_-UpdateBounds-d__14.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.MoveNext
bool GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_MoveNext() {
  return GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::MoveNext();
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_PlayArea/<UpdateBounds>d__14.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_PlayArea::$UpdateBounds$d__14::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Render
#include "GlobalNamespace/SteamVR_Render.hpp"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
// Including type: SteamVR_ExternalCamera
#include "GlobalNamespace/SteamVR_ExternalCamera.hpp"
// Including type: SteamVR_Camera
#include "GlobalNamespace/SteamVR_Camera.hpp"
// Including type: UnityEngine.WaitForEndOfFrame
#include "UnityEngine/WaitForEndOfFrame.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xD8A5F0
// Autogenerated static field getter
// Get static field: static private Valve.VR.EVREye <eye>k__BackingField
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get_$eye$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("", "SteamVR_Render", "<eye>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.EVREye <eye>k__BackingField
void GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set_$eye$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "<eye>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_Render _instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Render*>("", "SteamVR_Render", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_Render _instance
void GlobalNamespace::SteamVR_Render::_set__instance(GlobalNamespace::SteamVR_Render* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean isQuitting
bool GlobalNamespace::SteamVR_Render::_get_isQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get_isQuitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "isQuitting"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean isQuitting
void GlobalNamespace::SteamVR_Render::_set_isQuitting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set_isQuitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "isQuitting", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _pauseRendering
bool GlobalNamespace::SteamVR_Render::_get__pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_get__pauseRendering");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "SteamVR_Render", "_pauseRendering"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _pauseRendering
void GlobalNamespace::SteamVR_Render::_set__pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::_set__pauseRendering");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Render", "_pauseRendering", value));
}
// Autogenerated method: SteamVR_Render.get_eye
Valve::VR::EVREye GlobalNamespace::SteamVR_Render::get_eye() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::get_eye");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_eye", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVREye, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_eye
void GlobalNamespace::SteamVR_Render::set_eye(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::set_eye");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_eye", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.get_instance
GlobalNamespace::SteamVR_Render* GlobalNamespace::SteamVR_Render::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::get_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Render*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDestroy
void GlobalNamespace::SteamVR_Render::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnApplicationQuit
void GlobalNamespace::SteamVR_Render::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Add
void GlobalNamespace::SteamVR_Render::Add(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Add");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Remove
void GlobalNamespace::SteamVR_Render::Remove(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Remove");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.Top
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Top");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "Top", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Camera*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.AddInternal
void GlobalNamespace::SteamVR_Render::AddInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::AddInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.RemoveInternal
void GlobalNamespace::SteamVR_Render::RemoveInternal(GlobalNamespace::SteamVR_Camera* vrcam) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::RemoveInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RemoveInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrcam)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrcam);
}
// Autogenerated method: SteamVR_Render.TopInternal
GlobalNamespace::SteamVR_Camera* GlobalNamespace::SteamVR_Render::TopInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::TopInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TopInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Camera*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.get_pauseRendering
bool GlobalNamespace::SteamVR_Render::get_pauseRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::get_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "get_pauseRendering", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Render.set_pauseRendering
void GlobalNamespace::SteamVR_Render::set_pauseRendering(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::set_pauseRendering");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Render", "set_pauseRendering", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: SteamVR_Render.RenderLoop
System::Collections::IEnumerator* GlobalNamespace::SteamVR_Render::RenderLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::RenderLoop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RenderLoop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.RenderExternalCamera
void GlobalNamespace::SteamVR_Render::RenderExternalCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::RenderExternalCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RenderExternalCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnInputFocus
void GlobalNamespace::SteamVR_Render::OnInputFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnInputFocus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnInputFocus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hasFocus)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: SteamVR_Render.OnQuit
void GlobalNamespace::SteamVR_Render::OnQuit(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnQuit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnQuit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrEvent)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.GetScreenshotFilename
::Il2CppString* GlobalNamespace::SteamVR_Render::GetScreenshotFilename(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames screenshotPropertyFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::GetScreenshotFilename");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetScreenshotFilename", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, screenshotPropertyFilename)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, screenshotHandle, screenshotPropertyFilename);
}
// Autogenerated method: SteamVR_Render.OnRequestScreenshot
void GlobalNamespace::SteamVR_Render::OnRequestScreenshot(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnRequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnRequestScreenshot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrEvent)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_Render.OnEnable
void GlobalNamespace::SteamVR_Render::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnDisable
void GlobalNamespace::SteamVR_Render::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Awake
void GlobalNamespace::SteamVR_Render::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.UpdatePoses
void GlobalNamespace::SteamVR_Render::UpdatePoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::UpdatePoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdatePoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.OnBeforeRender
void GlobalNamespace::SteamVR_Render::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render.Update
void GlobalNamespace::SteamVR_Render::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Render/<RenderLoop>d__29
#include "GlobalNamespace/SteamVR_Render_-RenderLoop-d__29.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.MoveNext
bool GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_MoveNext() {
  return GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::MoveNext();
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Render/<RenderLoop>d__29.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::$RenderLoop$d__29::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel
#include "GlobalNamespace/SteamVR_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Valve.VR.RenderModel_t
#include "Valve/VR/RenderModel_t.hpp"
// Including type: Valve.VR.RenderModel_TextureMap_t
#include "Valve/VR/RenderModel_TextureMap_t.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String modelOverrideWarning
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::_get_modelOverrideWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_modelOverrideWarning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_RenderModel", "modelOverrideWarning"));
}
// Autogenerated static field setter
// Set static field: static public System.String modelOverrideWarning
void GlobalNamespace::SteamVR_RenderModel::_set_modelOverrideWarning(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_modelOverrideWarning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "modelOverrideWarning", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_localTransformName
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::_get_k_localTransformName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_k_localTransformName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SteamVR_RenderModel", "k_localTransformName"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_localTransformName
void GlobalNamespace::SteamVR_RenderModel::_set_k_localTransformName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_k_localTransformName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "k_localTransformName", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable models
System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_models() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_models");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Hashtable*>("", "SteamVR_RenderModel", "models"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable models
void GlobalNamespace::SteamVR_RenderModel::_set_models(System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_models");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "models", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Hashtable materials
System::Collections::Hashtable* GlobalNamespace::SteamVR_RenderModel::_get_materials() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_get_materials");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Hashtable*>("", "SteamVR_RenderModel", "materials"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Hashtable materials
void GlobalNamespace::SteamVR_RenderModel::_set_materials(System::Collections::Hashtable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::_set_materials");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_RenderModel", "materials", value));
}
// Autogenerated method: SteamVR_RenderModel.get_renderModelName
::Il2CppString* GlobalNamespace::SteamVR_RenderModel::get_renderModelName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::get_renderModelName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_renderModelName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.set_renderModelName
void GlobalNamespace::SteamVR_RenderModel::set_renderModelName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::set_renderModelName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_renderModelName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_RenderModel.OnModelSkinSettingsHaveChanged
void GlobalNamespace::SteamVR_RenderModel::OnModelSkinSettingsHaveChanged(Valve::VR::VREvent_t vrEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnModelSkinSettingsHaveChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnModelSkinSettingsHaveChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vrEvent)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vrEvent);
}
// Autogenerated method: SteamVR_RenderModel.OnHideRenderModels
void GlobalNamespace::SteamVR_RenderModel::OnHideRenderModels(bool hidden) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnHideRenderModels");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnHideRenderModels", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hidden)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hidden);
}
// Autogenerated method: SteamVR_RenderModel.OnDeviceConnected
void GlobalNamespace::SteamVR_RenderModel::OnDeviceConnected(int i, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(i, connected)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, connected);
}
// Autogenerated method: SteamVR_RenderModel.UpdateModel
void GlobalNamespace::SteamVR_RenderModel::UpdateModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::UpdateModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.SetModelAsync
System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::SetModelAsync(::Il2CppString* renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::SetModelAsync");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetModelAsync", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(renderModelName)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.SetModel
bool GlobalNamespace::SteamVR_RenderModel::SetModel(::Il2CppString* renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::SetModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(renderModelName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.LoadRenderModel
GlobalNamespace::SteamVR_RenderModel::RenderModel* GlobalNamespace::SteamVR_RenderModel::LoadRenderModel(Valve::VR::CVRRenderModels* renderModels, ::Il2CppString* renderModelName, ::Il2CppString* baseName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::LoadRenderModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadRenderModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(renderModels, renderModelName, baseName)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_RenderModel::RenderModel*, false>(this, ___internal__method, renderModels, renderModelName, baseName);
}
// Autogenerated method: SteamVR_RenderModel.FreeRenderModel
System::Collections::IEnumerator* GlobalNamespace::SteamVR_RenderModel::FreeRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel.FindComponent
UnityEngine::Transform* GlobalNamespace::SteamVR_RenderModel::FindComponent(::Il2CppString* componentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::FindComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FindComponent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(componentName)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, componentName);
}
// Autogenerated method: SteamVR_RenderModel.StripMesh
void GlobalNamespace::SteamVR_RenderModel::StripMesh(UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::StripMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StripMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(go)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, go);
}
// Autogenerated method: SteamVR_RenderModel.LoadComponents
bool GlobalNamespace::SteamVR_RenderModel::LoadComponents(GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder* holder, ::Il2CppString* renderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::LoadComponents");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadComponents", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(holder, renderModelName)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, holder, renderModelName);
}
// Autogenerated method: SteamVR_RenderModel.OnEnable
void GlobalNamespace::SteamVR_RenderModel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.OnDisable
void GlobalNamespace::SteamVR_RenderModel::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.Update
void GlobalNamespace::SteamVR_RenderModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.UpdateComponents
void GlobalNamespace::SteamVR_RenderModel::UpdateComponents(Valve::VR::CVRRenderModels* renderModels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::UpdateComponents");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateComponents", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(renderModels)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, renderModels);
}
// Autogenerated method: SteamVR_RenderModel.SetDeviceIndex
void GlobalNamespace::SteamVR_RenderModel::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_RenderModel.Sleep
void GlobalNamespace::SteamVR_RenderModel::Sleep() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::Sleep");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_RenderModel", "Sleep", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel
Valve::VR::RenderModel_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MarshalRenderModel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::RenderModel_t, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel.MarshalRenderModel_TextureMap
Valve::VR::RenderModel_TextureMap_t GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel_TextureMap(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::MarshalRenderModel_TextureMap");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MarshalRenderModel_TextureMap", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderModel)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::RenderModel_TextureMap_t, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: SteamVR_RenderModel..cctor
void GlobalNamespace::SteamVR_RenderModel::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_RenderModel", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModel
#include "GlobalNamespace/SteamVR_RenderModel_RenderModel.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_mesh
UnityEngine::Mesh* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::get_mesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_mesh
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh(UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::set_mesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_mesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.get_material
UnityEngine::Material* GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::get_material");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModel.set_material
void GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModel::set_material");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_material", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.get_instance
Valve::VR::CVRRenderModels* GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::get_instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRRenderModels*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/RenderModelInterfaceHolder.Dispose
void GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
void GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::System_IDisposable_Dispose() {
  GlobalNamespace::SteamVR_RenderModel::RenderModelInterfaceHolder::Dispose();
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<SetModelAsync>d__21
#include "GlobalNamespace/SteamVR_RenderModel_-SetModelAsync-d__21.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: SteamVR_RenderModel/RenderModelInterfaceHolder
#include "GlobalNamespace/SteamVR_RenderModel_RenderModelInterfaceHolder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.<>m__Finally1
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_MoveNext() {
  return GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::MoveNext();
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<SetModelAsync>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$SetModelAsync$d__21::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_RenderModel/<FreeRenderModel>d__24
#include "GlobalNamespace/SteamVR_RenderModel_-FreeRenderModel-d__24.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.IDisposable.Dispose
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.MoveNext
bool GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_MoveNext() {
  return GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::MoveNext();
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.Reset
void GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_RenderModel/<FreeRenderModel>d__24.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_RenderModel::$FreeRenderModel$d__24::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox
#include "GlobalNamespace/SteamVR_Skybox.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Skybox.SetTextureByIndex
void GlobalNamespace::SteamVR_Skybox::SetTextureByIndex(int i, UnityEngine::Texture* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::SetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetTextureByIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(i, t)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, t);
}
// Autogenerated method: SteamVR_Skybox.GetTextureByIndex
UnityEngine::Texture* GlobalNamespace::SteamVR_Skybox::GetTextureByIndex(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::GetTextureByIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTextureByIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(i)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture*, false>(this, ___internal__method, i);
}
// Autogenerated method: SteamVR_Skybox.SetOverride
void GlobalNamespace::SteamVR_Skybox::SetOverride(UnityEngine::Texture* front, UnityEngine::Texture* back, UnityEngine::Texture* left, UnityEngine::Texture* right, UnityEngine::Texture* top, UnityEngine::Texture* bottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::SetOverride");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "SetOverride", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(front, back, left, right, top, bottom)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, front, back, left, right, top, bottom);
}
// Autogenerated method: SteamVR_Skybox.ClearOverride
void GlobalNamespace::SteamVR_Skybox::ClearOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::ClearOverride");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Skybox", "ClearOverride", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnEnable
void GlobalNamespace::SteamVR_Skybox::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_Skybox.OnDisable
void GlobalNamespace::SteamVR_Skybox::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Skybox/CellSize
#include "GlobalNamespace/SteamVR_Skybox.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x1024
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x1024");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x1024"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x1024
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x1024");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x1024", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x64
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x64"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x64
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x64", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x32
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x32"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x32
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x32", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x16
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x16");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x16"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x16
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x16");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x16", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_Skybox/CellSize x8
GlobalNamespace::SteamVR_Skybox::CellSize GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_get_x8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_Skybox::CellSize>("", "SteamVR_Skybox/CellSize", "x8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_Skybox/CellSize x8
void GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8(GlobalNamespace::SteamVR_Skybox::CellSize value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::CellSize::_set_x8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_Skybox/CellSize", "x8", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_SphericalProjection
#include "GlobalNamespace/SteamVR_SphericalProjection.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material material
UnityEngine::Material* GlobalNamespace::SteamVR_SphericalProjection::_get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::_get_material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "SteamVR_SphericalProjection", "material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material material
void GlobalNamespace::SteamVR_SphericalProjection::_set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::_set_material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_SphericalProjection", "material", value));
}
// Autogenerated method: SteamVR_SphericalProjection.Set
void GlobalNamespace::SteamVR_SphericalProjection::Set(UnityEngine::Vector3 N, float phi0, float phi1, float theta0, float theta1, UnityEngine::Vector3 uAxis, UnityEngine::Vector3 uOrigin, float uScale, UnityEngine::Vector3 vAxis, UnityEngine::Vector3 vOrigin, float vScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::Set");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(N, phi0, phi1, theta0, theta1, uAxis, uOrigin, uScale, vAxis, vOrigin, vScale)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, N, phi0, phi1, theta0, theta1, uAxis, uOrigin, uScale, vAxis, vOrigin, vScale);
}
// Autogenerated method: SteamVR_SphericalProjection.OnRenderImage
void GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage(UnityEngine::RenderTexture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_SphericalProjection::OnRenderImage");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnRenderImage", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(src, dest)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, src, dest);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_Stats
#include "GlobalNamespace/SteamVR_Stats.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Stats.Awake
void GlobalNamespace::SteamVR_Stats::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Stats::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TestController
#include "GlobalNamespace/SteamVR_TestController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TestController.OnDeviceConnected
void GlobalNamespace::SteamVR_TestController::OnDeviceConnected(int index, bool connected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDeviceConnected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index, connected)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, connected);
}
// Autogenerated method: SteamVR_TestController.OnEnable
void GlobalNamespace::SteamVR_TestController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.OnDisable
void GlobalNamespace::SteamVR_TestController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TestController.PrintControllerStatus
void GlobalNamespace::SteamVR_TestController::PrintControllerStatus(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::PrintControllerStatus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PrintControllerStatus", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: SteamVR_TestController.Update
void GlobalNamespace::SteamVR_TestController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TrackedCamera
#include "GlobalNamespace/SteamVR_TrackedCamera.hpp"
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* GlobalNamespace::SteamVR_TrackedCamera::_get_distorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_distorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>*>("", "SteamVR_TrackedCamera", "distorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] distorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_distorted(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_distorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "distorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_undistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>*>("", "SteamVR_TrackedCamera", "undistorted"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStreamTexture[] undistorted
void GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_undistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "undistorted", value));
}
// Autogenerated static field getter
// Get static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>* GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_get_videostreams");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>*>("", "SteamVR_TrackedCamera", "videostreams"));
}
// Autogenerated static field setter
// Set static field: static private SteamVR_TrackedCamera/VideoStream[] videostreams
void GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams(::Array<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::_set_videostreams");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedCamera", "videostreams", value));
}
// Autogenerated method: SteamVR_TrackedCamera.Distorted
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Distorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Distorted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Distorted", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(deviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Undistorted
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Undistorted(int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Undistorted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Undistorted", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(deviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Source
GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture* GlobalNamespace::SteamVR_TrackedCamera::Source(bool undistorted, int deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Source");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Source", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(undistorted, deviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, undistorted, deviceIndex);
}
// Autogenerated method: SteamVR_TrackedCamera.Stream
GlobalNamespace::SteamVR_TrackedCamera::VideoStream* GlobalNamespace::SteamVR_TrackedCamera::Stream(uint deviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::Stream");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_TrackedCamera", "Stream", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(deviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_TrackedCamera::VideoStream*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deviceIndex);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStreamTexture
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStreamTexture.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_undistorted
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_undistorted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_undistorted", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_undistorted
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_undistorted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_undistorted", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_hasTracking
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_hasTracking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hasTracking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameId
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_frameId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameBounds
Valve::VR::VRTextureBounds_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_frameBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::VRTextureBounds_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.set_frameBounds
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds(Valve::VR::VRTextureBounds_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::set_frameBounds");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_frameBounds", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_frameType
Valve::VR::EVRTrackedCameraFrameType GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_frameType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_frameType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraFrameType, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_texture
UnityEngine::Texture2D* GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_texture");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_texture", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_transform
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_velocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_velocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.get_angularVelocity
UnityEngine::Vector3 GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::get_angularVelocity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_angularVelocity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.GetPose
Valve::VR::TrackedDevicePose_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::GetPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::TrackedDevicePose_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Acquire");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Release");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStreamTexture.Update
void GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStreamTexture::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedCamera/VideoStream
#include "GlobalNamespace/SteamVR_TrackedCamera_VideoStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_deviceIndex
uint GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_deviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.set_deviceIndex
void GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::set_deviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_deviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_handle
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_handle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_handle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.get_hasCamera
bool GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::get_hasCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hasCamera", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Acquire
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Acquire");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Acquire", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedCamera/VideoStream.Release
uint64_t GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedCamera::VideoStream::Release");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_TrackedObject
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_TrackedObject.get_isValid
bool GlobalNamespace::SteamVR_TrackedObject::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::get_isValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.set_isValid
void GlobalNamespace::SteamVR_TrackedObject::set_isValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::set_isValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_isValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SteamVR_TrackedObject.OnNewPoses
void GlobalNamespace::SteamVR_TrackedObject::OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(poses)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: SteamVR_TrackedObject.OnEnable
void GlobalNamespace::SteamVR_TrackedObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.OnDisable
void GlobalNamespace::SteamVR_TrackedObject::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SteamVR_TrackedObject.SetDeviceIndex
void GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::SetDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDeviceIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_TrackedObject/EIndex
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex None
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "None"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex None
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "None", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Hmd
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Hmd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Hmd"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Hmd
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Hmd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Hmd", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device1
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device1"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device1
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device1", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device2
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device2"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device2
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device2", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device3
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device3"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device3
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device3", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device4
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device4"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device4
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device4", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device5
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device5"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device5
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device5", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device6
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device6"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device6
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device6", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device7
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device7"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device7
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device7", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device8
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device8");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device8"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device8
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device8");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device8", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device9
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device9");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device9"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device9
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device9");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device9", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device10
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device10");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device10"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device10
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device10");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device10", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device11
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device11");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device11"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device11
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device11");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device11", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device12
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device12"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device12
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device12", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device13
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device13");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device13"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device13
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device13");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device13", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device14
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device14");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device14"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device14
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device14");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device14", value));
}
// Autogenerated static field getter
// Get static field: static public SteamVR_TrackedObject/EIndex Device15
GlobalNamespace::SteamVR_TrackedObject::EIndex GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_get_Device15");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SteamVR_TrackedObject::EIndex>("", "SteamVR_TrackedObject/EIndex", "Device15"));
}
// Autogenerated static field setter
// Set static field: static public SteamVR_TrackedObject/EIndex Device15
void GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15(GlobalNamespace::SteamVR_TrackedObject::EIndex value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TrackedObject::EIndex::_set_Device15");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SteamVR_TrackedObject/EIndex", "Device15", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamVR_UpdatePoses
#include "GlobalNamespace/SteamVR_UpdatePoses.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_UpdatePoses.Awake
void GlobalNamespace::SteamVR_UpdatePoses::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_UpdatePoses::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils
#include "GlobalNamespace/SteamVR_Utils.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils.Slerp
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::Slerp(UnityEngine::Quaternion A, UnityEngine::Quaternion B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Slerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Slerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::Lerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
float GlobalNamespace::SteamVR_Utils::Lerp(float A, float B, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.Lerp
double GlobalNamespace::SteamVR_Utils::Lerp(double A, double B, double t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Lerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Lerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A, B, t)));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, t);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(UnityEngine::Vector3 A, UnityEngine::Vector3 B, UnityEngine::Vector3 result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A, B, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
float GlobalNamespace::SteamVR_Utils::InverseLerp(float A, float B, float result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A, B, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.InverseLerp
double GlobalNamespace::SteamVR_Utils::InverseLerp(double A, double B, double result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "InverseLerp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A, B, result)));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A, B, result);
}
// Autogenerated method: SteamVR_Utils.Saturate
float GlobalNamespace::SteamVR_Utils::Saturate(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Saturate
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Saturate(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Saturate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Saturate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
float GlobalNamespace::SteamVR_Utils::Abs(float A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils.Abs
UnityEngine::Vector2 GlobalNamespace::SteamVR_Utils::Abs(UnityEngine::Vector2 A) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::Abs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "Abs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(A)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, A);
}
// Autogenerated method: SteamVR_Utils._copysign
float GlobalNamespace::SteamVR_Utils::_copysign(float sizeval, float signval) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::_copysign");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "_copysign", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sizeval, signval)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sizeval, signval);
}
// Autogenerated method: SteamVR_Utils.GetRotation
UnityEngine::Quaternion GlobalNamespace::SteamVR_Utils::GetRotation(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(matrix)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetPosition
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetPosition(UnityEngine::Matrix4x4 matrix) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(matrix)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, matrix);
}
// Autogenerated method: SteamVR_Utils.GetScale
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::GetScale(UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::GetScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "GetScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(m)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m);
}
// Autogenerated method: SteamVR_Utils.CallSystemFn
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::CallSystemFn");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "CallSystemFn", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fn, args)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fn, args);
}
// Creating initializer_list -> params proxy for: System.Object CallSystemFn(SteamVR_Utils/SystemFn fn, params System.Object[] args)
::Il2CppObject* GlobalNamespace::SteamVR_Utils::CallSystemFn(GlobalNamespace::SteamVR_Utils::SystemFn* fn, std::initializer_list<::Il2CppObject*> args) {
  return GlobalNamespace::SteamVR_Utils::CallSystemFn(fn, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: SteamVR_Utils.TakeStereoScreenshot
void GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot(uint screenshotHandle, UnityEngine::GameObject* target, int cellSize, float ipd, ::Il2CppString*& previewFilename, ::Il2CppString*& VRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils", "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenshotHandle, target, cellSize, ipd, previewFilename, VRFilename)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, screenshotHandle, target, cellSize, ipd, previewFilename, VRFilename);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils/RigidTransform.get_identity
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::get_identity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "get_identity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.FromLocal
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::FromLocal(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::FromLocal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "FromLocal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix44
Valve::VR::HmdMatrix44_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix44() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix44");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "ToHmdMatrix44", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.ToHmdMatrix34
Valve::VR::HmdMatrix34_t GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::ToHmdMatrix34");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "ToHmdMatrix34", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Inverse
void GlobalNamespace::SteamVR_Utils::RigidTransform::Inverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Inverse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Inverse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetInverse
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::GetInverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::GetInverse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "GetInverse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Multiply
void GlobalNamespace::SteamVR_Utils::RigidTransform::Multiply(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Multiply");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Multiply", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.InverseTransformPoint
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::InverseTransformPoint(UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::InverseTransformPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "InverseTransformPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(point)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method, point);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.TransformPoint
UnityEngine::Vector3 GlobalNamespace::SteamVR_Utils::RigidTransform::TransformPoint(UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::TransformPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "TransformPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(point)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method, point);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "Interpolate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b, t)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Interpolate
void GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform to, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Interpolate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Interpolate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(to, t)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, to, t);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.Equals
bool GlobalNamespace::SteamVR_Utils::RigidTransform::Equals(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::Equals");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(o)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, o);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.GetHashCode
int GlobalNamespace::SteamVR_Utils::RigidTransform::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::GetHashCode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Equality");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Equality", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Inequality", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
GlobalNamespace::SteamVR_Utils::RigidTransform GlobalNamespace::operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Multiply", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(a, b)));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SteamVR_Utils::RigidTransform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SteamVR_Utils/RigidTransform.op_Multiply
UnityEngine::Vector3 GlobalNamespace::operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& t, const UnityEngine::Vector3& v) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::RigidTransform::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "SteamVR_Utils/RigidTransform", "op_Multiply", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, v)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, v);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils/SystemFn
#include "GlobalNamespace/SteamVR_Utils_SystemFn.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamVR_Utils/SystemFn.Invoke
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::Invoke(Valve::VR::CVRSystem* system, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::SystemFn::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(system, args)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, system, args);
}
// Creating initializer_list -> params proxy for: System.Object Invoke(Valve.VR.CVRSystem system, params System.Object[] args)
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::Invoke(Valve::VR::CVRSystem* system, std::initializer_list<::Il2CppObject*> args) {
  return GlobalNamespace::SteamVR_Utils::SystemFn::Invoke(system, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: SteamVR_Utils/SystemFn.BeginInvoke
System::IAsyncResult* GlobalNamespace::SteamVR_Utils::SystemFn::BeginInvoke(Valve::VR::CVRSystem* system, ::Array<::Il2CppObject*>* args, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::SystemFn::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(system, args, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, system, args, callback, object);
}
// Autogenerated method: SteamVR_Utils/SystemFn.EndInvoke
::Il2CppObject* GlobalNamespace::SteamVR_Utils::SystemFn::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Utils::SystemFn::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize
#include "Valve/VR/IVRSystem__GetRecommendedRenderTargetSize.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize.Invoke
void Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke(uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke(uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRecommendedRenderTargetSize.EndInvoke
void Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke(uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetProjectionMatrix
#include "Valve/VR/IVRSystem__GetProjectionMatrix.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionMatrix.Invoke
Valve::VR::HmdMatrix44_t Valve::VR::IVRSystem::_GetProjectionMatrix::Invoke(Valve::VR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionMatrix::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fNearZ, fFarZ)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionMatrix.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetProjectionMatrix::BeginInvoke(Valve::VR::EVREye eEye, float fNearZ, float fFarZ, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionMatrix::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fNearZ, fFarZ, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, fNearZ, fFarZ, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionMatrix.EndInvoke
Valve::VR::HmdMatrix44_t Valve::VR::IVRSystem::_GetProjectionMatrix::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionMatrix::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix44_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetProjectionRaw
#include "Valve/VR/IVRSystem__GetProjectionRaw.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionRaw.Invoke
void Valve::VR::IVRSystem::_GetProjectionRaw::Invoke(Valve::VR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionRaw::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pfLeft, pfRight, pfTop, pfBottom)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionRaw.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetProjectionRaw::BeginInvoke(Valve::VR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionRaw::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pfLeft, pfRight, pfTop, pfBottom, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetProjectionRaw.EndInvoke
void Valve::VR::IVRSystem::_GetProjectionRaw::EndInvoke(float& pfLeft, float& pfRight, float& pfTop, float& pfBottom, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetProjectionRaw::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfLeft, pfRight, pfTop, pfBottom, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pfLeft, pfRight, pfTop, pfBottom, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ComputeDistortion
#include "Valve/VR/IVRSystem__ComputeDistortion.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.DistortionCoordinates_t
#include "Valve/VR/DistortionCoordinates_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ComputeDistortion.Invoke
bool Valve::VR::IVRSystem::_ComputeDistortion::Invoke(Valve::VR::EVREye eEye, float fU, float fV, Valve::VR::DistortionCoordinates_t& pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ComputeDistortion::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fU, fV, pDistortionCoordinates)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates);
}
// Autogenerated method: Valve.VR.IVRSystem/_ComputeDistortion.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ComputeDistortion::BeginInvoke(Valve::VR::EVREye eEye, float fU, float fV, Valve::VR::DistortionCoordinates_t& pDistortionCoordinates, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ComputeDistortion::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fU, fV, pDistortionCoordinates, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ComputeDistortion.EndInvoke
bool Valve::VR::IVRSystem::_ComputeDistortion::EndInvoke(Valve::VR::DistortionCoordinates_t& pDistortionCoordinates, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ComputeDistortion::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pDistortionCoordinates, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pDistortionCoordinates, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetEyeToHeadTransform
#include "Valve/VR/IVRSystem__GetEyeToHeadTransform.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetEyeToHeadTransform.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetEyeToHeadTransform::Invoke(Valve::VR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEyeToHeadTransform::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEyeToHeadTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke(Valve::VR::EVREye eEye, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEyeToHeadTransform.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetEyeToHeadTransform::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEyeToHeadTransform::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTimeSinceLastVsync
#include "Valve/VR/IVRSystem__GetTimeSinceLastVsync.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTimeSinceLastVsync.Invoke
bool Valve::VR::IVRSystem::_GetTimeSinceLastVsync::Invoke(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTimeSinceLastVsync::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTimeSinceLastVsync.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTimeSinceLastVsync.EndInvoke
bool Valve::VR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetD3D9AdapterIndex
#include "Valve/VR/IVRSystem__GetD3D9AdapterIndex.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetD3D9AdapterIndex.Invoke
int Valve::VR::IVRSystem::_GetD3D9AdapterIndex::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetD3D9AdapterIndex::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetD3D9AdapterIndex.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetD3D9AdapterIndex.EndInvoke
int Valve::VR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetDXGIOutputInfo
#include "Valve/VR/IVRSystem__GetDXGIOutputInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetDXGIOutputInfo.Invoke
void Valve::VR::IVRSystem::_GetDXGIOutputInfo::Invoke(int& pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDXGIOutputInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDXGIOutputInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke(int& pnAdapterIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnAdapterIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDXGIOutputInfo.EndInvoke
void Valve::VR::IVRSystem::_GetDXGIOutputInfo::EndInvoke(int& pnAdapterIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDXGIOutputInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetOutputDevice
#include "Valve/VR/IVRSystem__GetOutputDevice.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetOutputDevice.Invoke
void Valve::VR::IVRSystem::_GetOutputDevice::Invoke(uint64_t& pnDevice, Valve::VR::ETextureType textureType, System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetOutputDevice::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, textureType, pInstance)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, textureType, pInstance);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetOutputDevice.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetOutputDevice::BeginInvoke(uint64_t& pnDevice, Valve::VR::ETextureType textureType, System::IntPtr pInstance, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetOutputDevice::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, textureType, pInstance, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnDevice, textureType, pInstance, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetOutputDevice.EndInvoke
void Valve::VR::IVRSystem::_GetOutputDevice::EndInvoke(uint64_t& pnDevice, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetOutputDevice::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsDisplayOnDesktop
#include "Valve/VR/IVRSystem__IsDisplayOnDesktop.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsDisplayOnDesktop.Invoke
bool Valve::VR::IVRSystem::_IsDisplayOnDesktop::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsDisplayOnDesktop::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsDisplayOnDesktop.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsDisplayOnDesktop.EndInvoke
bool Valve::VR::IVRSystem::_IsDisplayOnDesktop::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsDisplayOnDesktop::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_SetDisplayVisibility
#include "Valve/VR/IVRSystem__SetDisplayVisibility.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_SetDisplayVisibility.Invoke
bool Valve::VR::IVRSystem::_SetDisplayVisibility::Invoke(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_SetDisplayVisibility::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bIsVisibleOnDesktop)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: Valve.VR.IVRSystem/_SetDisplayVisibility.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_SetDisplayVisibility::BeginInvoke(bool bIsVisibleOnDesktop, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_SetDisplayVisibility::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bIsVisibleOnDesktop, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bIsVisibleOnDesktop, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_SetDisplayVisibility.EndInvoke
bool Valve::VR::IVRSystem::_SetDisplayVisibility::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_SetDisplayVisibility::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose
#include "Valve/VR/IVRSystem__GetDeviceToAbsoluteTrackingPose.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.Invoke
void Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<Valve::VR::TrackedDevicePose_t>*& pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<Valve::VR::TrackedDevicePose_t>*& pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.EndInvoke
void Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ResetSeatedZeroPose
#include "Valve/VR/IVRSystem__ResetSeatedZeroPose.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ResetSeatedZeroPose.Invoke
void Valve::VR::IVRSystem::_ResetSeatedZeroPose::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ResetSeatedZeroPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_ResetSeatedZeroPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ResetSeatedZeroPose::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ResetSeatedZeroPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ResetSeatedZeroPose.EndInvoke
void Valve::VR::IVRSystem::_ResetSeatedZeroPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ResetSeatedZeroPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose
#include "Valve/VR/IVRSystem__GetSeatedZeroPoseToStandingAbsoluteTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose
#include "Valve/VR/IVRSystem__GetRawZeroPoseToStandingAbsoluteTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass
#include "Valve/VR/IVRSystem__GetSortedTrackedDeviceIndicesOfClass.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.Invoke
uint Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::Invoke(Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>*& punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::BeginInvoke(Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>*& punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.EndInvoke
uint Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel
#include "Valve/VR/IVRSystem__GetTrackedDeviceActivityLevel.hpp"
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel.Invoke
Valve::VR::EDeviceActivityLevel Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::Invoke(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::BeginInvoke(uint unDeviceId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceId, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceActivityLevel.EndInvoke
Valve::VR::EDeviceActivityLevel Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceActivityLevel::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EDeviceActivityLevel, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ApplyTransform
#include "Valve/VR/IVRSystem__ApplyTransform.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ApplyTransform.Invoke
void Valve::VR::IVRSystem::_ApplyTransform::Invoke(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ApplyTransform::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform);
}
// Autogenerated method: Valve.VR.IVRSystem/_ApplyTransform.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ApplyTransform::BeginInvoke(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ApplyTransform::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ApplyTransform.EndInvoke
void Valve::VR::IVRSystem::_ApplyTransform::EndInvoke(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ApplyTransform::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole
#include "Valve/VR/IVRSystem__GetTrackedDeviceIndexForControllerRole.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.Invoke
uint Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::Invoke(Valve::VR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceType)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::BeginInvoke(Valve::VR::ETrackedControllerRole unDeviceType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceType, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.EndInvoke
uint Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex
#include "Valve/VR/IVRSystem__GetControllerRoleForTrackedDeviceIndex.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.Invoke
Valve::VR::ETrackedControllerRole Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.EndInvoke
Valve::VR::ETrackedControllerRole Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedControllerRole, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetTrackedDeviceClass
#include "Valve/VR/IVRSystem__GetTrackedDeviceClass.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceClass.Invoke
Valve::VR::ETrackedDeviceClass Valve::VR::IVRSystem::_GetTrackedDeviceClass::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceClass::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceClass.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetTrackedDeviceClass::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceClass::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetTrackedDeviceClass.EndInvoke
Valve::VR::ETrackedDeviceClass Valve::VR::IVRSystem::_GetTrackedDeviceClass::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetTrackedDeviceClass::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackedDeviceClass, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsTrackedDeviceConnected
#include "Valve/VR/IVRSystem__IsTrackedDeviceConnected.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsTrackedDeviceConnected.Invoke
bool Valve::VR::IVRSystem::_IsTrackedDeviceConnected::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsTrackedDeviceConnected::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsTrackedDeviceConnected.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsTrackedDeviceConnected::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsTrackedDeviceConnected::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsTrackedDeviceConnected.EndInvoke
bool Valve::VR::IVRSystem::_IsTrackedDeviceConnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsTrackedDeviceConnected::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetBoolTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty.Invoke
bool Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetBoolTrackedDeviceProperty.EndInvoke
bool Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetBoolTrackedDeviceProperty::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetFloatTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty.Invoke
float Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetFloatTrackedDeviceProperty.EndInvoke
float Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetFloatTrackedDeviceProperty::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetInt32TrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty.Invoke
int Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetInt32TrackedDeviceProperty.EndInvoke
int Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetInt32TrackedDeviceProperty::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetUint64TrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty.Invoke
uint64_t Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetUint64TrackedDeviceProperty.EndInvoke
uint64_t Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetUint64TrackedDeviceProperty::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetMatrix34TrackedDeviceProperty.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty.Invoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetMatrix34TrackedDeviceProperty.EndInvoke
Valve::VR::HmdMatrix34_t Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetMatrix34TrackedDeviceProperty::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdMatrix34_t, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetArrayTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty.Invoke
uint Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetArrayTrackedDeviceProperty.EndInvoke
uint Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetArrayTrackedDeviceProperty::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty
#include "Valve/VR/IVRSystem__GetStringTrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty.Invoke
uint Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::Invoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::BeginInvoke(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pchValue, unBufferSize, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetStringTrackedDeviceProperty.EndInvoke
uint Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::EndInvoke(Valve::VR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetStringTrackedDeviceProperty::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum
#include "Valve/VR/IVRSystem__GetPropErrorNameFromEnum.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::Invoke(Valve::VR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::BeginInvoke(Valve::VR::ETrackedPropertyError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetPropErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetPropErrorNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_PollNextEvent
#include "Valve/VR/IVRSystem__PollNextEvent.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEvent.Invoke
bool Valve::VR::IVRSystem::_PollNextEvent::Invoke(Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEvent::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEvent.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_PollNextEvent::BeginInvoke(Valve::VR::VREvent_t& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEvent::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEvent.EndInvoke
bool Valve::VR::IVRSystem::_PollNextEvent::EndInvoke(Valve::VR::VREvent_t& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEvent::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_PollNextEventWithPose
#include "Valve/VR/IVRSystem__PollNextEventWithPose.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEventWithPose.Invoke
bool Valve::VR::IVRSystem::_PollNextEventWithPose::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEventWithPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, pEvent, uncbVREvent, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEventWithPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_PollNextEventWithPose::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEventWithPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, pEvent, uncbVREvent, pTrackedDevicePose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_PollNextEventWithPose.EndInvoke
bool Valve::VR::IVRSystem::_PollNextEventWithPose::EndInvoke(Valve::VR::VREvent_t& pEvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PollNextEventWithPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, pTrackedDevicePose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum
#include "Valve/VR/IVRSystem__GetEventTypeNameFromEnum.hpp"
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::Invoke(Valve::VR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eType)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eType);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::BeginInvoke(Valve::VR::EVREventType eType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eType, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetEventTypeNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetEventTypeNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetHiddenAreaMesh
#include "Valve/VR/IVRSystem__GetHiddenAreaMesh.hpp"
// Including type: Valve.VR.HiddenAreaMesh_t
#include "Valve/VR/HiddenAreaMesh_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetHiddenAreaMesh.Invoke
Valve::VR::HiddenAreaMesh_t Valve::VR::IVRSystem::_GetHiddenAreaMesh::Invoke(Valve::VR::EVREye eEye, Valve::VR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetHiddenAreaMesh::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, type)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetHiddenAreaMesh.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetHiddenAreaMesh::BeginInvoke(Valve::VR::EVREye eEye, Valve::VR::EHiddenAreaMeshType type, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetHiddenAreaMesh::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, type, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, type, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetHiddenAreaMesh.EndInvoke
Valve::VR::HiddenAreaMesh_t Valve::VR::IVRSystem::_GetHiddenAreaMesh::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetHiddenAreaMesh::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HiddenAreaMesh_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerState
#include "Valve/VR/IVRSystem__GetControllerState.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerState.Invoke
bool Valve::VR::IVRSystem::_GetControllerState::Invoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerState::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerState.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerState::BeginInvoke(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerState::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerState.EndInvoke
bool Valve::VR::IVRSystem::_GetControllerState::EndInvoke(Valve::VR::VRControllerState_t& pControllerState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerState::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerStateWithPose
#include "Valve/VR/IVRSystem__GetControllerStateWithPose.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerStateWithPose.Invoke
bool Valve::VR::IVRSystem::_GetControllerStateWithPose::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerStateWithPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerStateWithPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerStateWithPose::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerStateWithPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerStateWithPose.EndInvoke
bool Valve::VR::IVRSystem::_GetControllerStateWithPose::EndInvoke(Valve::VR::VRControllerState_t& pControllerState, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerStateWithPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, pTrackedDevicePose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_TriggerHapticPulse
#include "Valve/VR/IVRSystem__TriggerHapticPulse.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_TriggerHapticPulse.Invoke
void Valve::VR::IVRSystem::_TriggerHapticPulse::Invoke(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_TriggerHapticPulse::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, unAxisId, usDurationMicroSec)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: Valve.VR.IVRSystem/_TriggerHapticPulse.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_TriggerHapticPulse::BeginInvoke(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_TriggerHapticPulse::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, unAxisId, usDurationMicroSec, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_TriggerHapticPulse.EndInvoke
void Valve::VR::IVRSystem::_TriggerHapticPulse::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_TriggerHapticPulse::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum
#include "Valve/VR/IVRSystem__GetButtonIdNameFromEnum.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::Invoke(Valve::VR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eButtonId)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::BeginInvoke(Valve::VR::EVRButtonId eButtonId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eButtonId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eButtonId, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetButtonIdNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetButtonIdNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum
#include "Valve/VR/IVRSystem__GetControllerAxisTypeNameFromEnum.hpp"
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::Invoke(Valve::VR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eAxisType)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::BeginInvoke(Valve::VR::EVRControllerAxisType eAxisType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eAxisType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eAxisType, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_GetControllerAxisTypeNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_GetControllerAxisTypeNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsInputAvailable
#include "Valve/VR/IVRSystem__IsInputAvailable.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsInputAvailable.Invoke
bool Valve::VR::IVRSystem::_IsInputAvailable::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsInputAvailable::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsInputAvailable.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsInputAvailable::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsInputAvailable::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsInputAvailable.EndInvoke
bool Valve::VR::IVRSystem::_IsInputAvailable::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsInputAvailable::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers
#include "Valve/VR/IVRSystem__IsSteamVRDrawingControllers.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers.Invoke
bool Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_IsSteamVRDrawingControllers.EndInvoke
bool Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_IsSteamVRDrawingControllers::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ShouldApplicationPause
#include "Valve/VR/IVRSystem__ShouldApplicationPause.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationPause.Invoke
bool Valve::VR::IVRSystem::_ShouldApplicationPause::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationPause::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationPause.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ShouldApplicationPause::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationPause::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationPause.EndInvoke
bool Valve::VR::IVRSystem::_ShouldApplicationPause::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationPause::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork
#include "Valve/VR/IVRSystem__ShouldApplicationReduceRenderingWork.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork.Invoke
bool Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_ShouldApplicationReduceRenderingWork.EndInvoke
bool Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_ShouldApplicationReduceRenderingWork::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_DriverDebugRequest
#include "Valve/VR/IVRSystem__DriverDebugRequest.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_DriverDebugRequest.Invoke
uint Valve::VR::IVRSystem::_DriverDebugRequest::Invoke(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_DriverDebugRequest::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: Valve.VR.IVRSystem/_DriverDebugRequest.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_DriverDebugRequest::BeginInvoke(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_DriverDebugRequest::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_DriverDebugRequest.EndInvoke
uint Valve::VR::IVRSystem::_DriverDebugRequest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_DriverDebugRequest::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_PerformFirmwareUpdate
#include "Valve/VR/IVRSystem__PerformFirmwareUpdate.hpp"
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_PerformFirmwareUpdate.Invoke
Valve::VR::EVRFirmwareError Valve::VR::IVRSystem::_PerformFirmwareUpdate::Invoke(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PerformFirmwareUpdate::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: Valve.VR.IVRSystem/_PerformFirmwareUpdate.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_PerformFirmwareUpdate::BeginInvoke(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PerformFirmwareUpdate::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_PerformFirmwareUpdate.EndInvoke
Valve::VR::EVRFirmwareError Valve::VR::IVRSystem::_PerformFirmwareUpdate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_PerformFirmwareUpdate::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRFirmwareError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting
#include "Valve/VR/IVRSystem__AcknowledgeQuit_Exiting.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting.Invoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_Exiting.EndInvoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_Exiting::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt
#include "Valve/VR/IVRSystem__AcknowledgeQuit_UserPrompt.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt.Invoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt.BeginInvoke
System::IAsyncResult* Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRSystem/_AcknowledgeQuit_UserPrompt.EndInvoke
void Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRSystem::_AcknowledgeQuit_UserPrompt::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRExtendedDisplay/_GetWindowBounds
#include "Valve/VR/IVRExtendedDisplay__GetWindowBounds.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetWindowBounds.Invoke
void Valve::VR::IVRExtendedDisplay::_GetWindowBounds::Invoke(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetWindowBounds::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetWindowBounds.BeginInvoke
System::IAsyncResult* Valve::VR::IVRExtendedDisplay::_GetWindowBounds::BeginInvoke(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetWindowBounds::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetWindowBounds.EndInvoke
void Valve::VR::IVRExtendedDisplay::_GetWindowBounds::EndInvoke(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetWindowBounds::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport
#include "Valve/VR/IVRExtendedDisplay__GetEyeOutputViewport.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport.Invoke
void Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::Invoke(Valve::VR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pnX, pnY, pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport.BeginInvoke
System::IAsyncResult* Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::BeginInvoke(Valve::VR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pnX, pnY, pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetEyeOutputViewport.EndInvoke
void Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::EndInvoke(uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetEyeOutputViewport::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo
#include "Valve/VR/IVRExtendedDisplay__GetDXGIOutputInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo.Invoke
void Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::Invoke(int& pnAdapterIndex, int& pnAdapterOutputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, pnAdapterOutputIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::BeginInvoke(int& pnAdapterIndex, int& pnAdapterOutputIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, pnAdapterOutputIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex, callback, object);
}
// Autogenerated method: Valve.VR.IVRExtendedDisplay/_GetDXGIOutputInfo.EndInvoke
void Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::EndInvoke(int& pnAdapterIndex, int& pnAdapterOutputIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRExtendedDisplay::_GetDXGIOutputInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, pnAdapterOutputIndex, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum
#include "Valve/VR/IVRTrackedCamera__GetCameraErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::Invoke(Valve::VR::EVRTrackedCameraError eCameraError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eCameraError)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eCameraError);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::BeginInvoke(Valve::VR::EVRTrackedCameraError eCameraError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eCameraError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eCameraError, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_HasCamera
#include "Valve/VR/IVRTrackedCamera__HasCamera.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_HasCamera::Invoke(uint nDeviceIndex, bool& pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_HasCamera::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHasCamera)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHasCamera);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_HasCamera::BeginInvoke(uint nDeviceIndex, bool& pHasCamera, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_HasCamera::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHasCamera, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, pHasCamera, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_HasCamera::EndInvoke(bool& pHasCamera, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_HasCamera::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pHasCamera, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pHasCamera, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize
#include "Valve/VR/IVRTrackedCamera__GetCameraFrameSize.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraFrameSize.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::EndInvoke(uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraFrameSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight, pnFrameBufferSize, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pnWidth, pnHeight, pnFrameBufferSize, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics
#include "Valve/VR/IVRTrackedCamera__GetCameraIntrinsics.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::HmdVector2_t& pFocalLength, Valve::VR::HmdVector2_t& pCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pFocalLength, pCenter)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::HmdVector2_t& pFocalLength, Valve::VR::HmdVector2_t& pCenter, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pFocalLength, pCenter, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraIntrinsics.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::EndInvoke(Valve::VR::HmdVector2_t& pFocalLength, Valve::VR::HmdVector2_t& pCenter, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraIntrinsics::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pFocalLength, pCenter, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pFocalLength, pCenter, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetCameraProjection
#include "Valve/VR/IVRTrackedCamera__GetCameraProjection.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraProjection.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraProjection::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, Valve::VR::HmdMatrix44_t& pProjection) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraProjection::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, flZNear, flZFar, pProjection)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraProjection.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetCameraProjection::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, Valve::VR::HmdMatrix44_t& pProjection, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraProjection::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, flZNear, flZFar, pProjection, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetCameraProjection.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetCameraProjection::EndInvoke(Valve::VR::HmdMatrix44_t& pProjection, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetCameraProjection::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pProjection, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pProjection, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService
#include "Valve/VR/IVRTrackedCamera__AcquireVideoStreamingService.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::Invoke(uint nDeviceIndex, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHandle)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHandle);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::BeginInvoke(uint nDeviceIndex, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, pHandle, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_AcquireVideoStreamingService.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_AcquireVideoStreamingService::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService
#include "Valve/VR/IVRTrackedCamera__ReleaseVideoStreamingService.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::Invoke(uint64_t hTrackedCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::BeginInvoke(uint64_t hTrackedCamera, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamingService.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamingService::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamFrameBuffer.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::Invoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::BeginInvoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::EndInvoke(Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pFrameHeader, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamTextureSize.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::Invoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::BeginInvoke(uint nDeviceIndex, Valve::VR::EVRTrackedCameraFrameType eFrameType, Valve::VR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureSize.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::EndInvoke(Valve::VR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTextureBounds, pnWidth, pnHeight, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pTextureBounds, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamTextureD3D11.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::Invoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::BeginInvoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::EndInvoke(System::IntPtr& ppD3D11ShaderResourceView, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppD3D11ShaderResourceView, pFrameHeader, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, ppD3D11ShaderResourceView, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL
#include "Valve/VR/IVRTrackedCamera__GetVideoStreamTextureGL.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
// Including type: Valve.VR.CameraVideoStreamFrameHeader_t
#include "Valve/VR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::Invoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::BeginInvoke(uint64_t hTrackedCamera, Valve::VR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_GetVideoStreamTextureGL.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::EndInvoke(uint& pglTextureId, Valve::VR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_GetVideoStreamTextureGL::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pglTextureId, pFrameHeader, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pglTextureId, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL
#include "Valve/VR/IVRTrackedCamera__ReleaseVideoStreamTextureGL.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::Invoke(uint64_t hTrackedCamera, uint glTextureId) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, glTextureId)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, glTextureId);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::BeginInvoke(uint64_t hTrackedCamera, uint glTextureId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, glTextureId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, glTextureId, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_AddApplicationManifest
#include "Valve/VR/IVRApplications__AddApplicationManifest.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_AddApplicationManifest.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_AddApplicationManifest::Invoke(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_AddApplicationManifest::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath, bTemporary)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: Valve.VR.IVRApplications/_AddApplicationManifest.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_AddApplicationManifest::BeginInvoke(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_AddApplicationManifest::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath, bTemporary, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_AddApplicationManifest.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_AddApplicationManifest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_AddApplicationManifest::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_RemoveApplicationManifest
#include "Valve/VR/IVRApplications__RemoveApplicationManifest.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_RemoveApplicationManifest.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_RemoveApplicationManifest::Invoke(::Il2CppString* pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_RemoveApplicationManifest::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: Valve.VR.IVRApplications/_RemoveApplicationManifest.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_RemoveApplicationManifest::BeginInvoke(::Il2CppString* pchApplicationManifestFullPath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_RemoveApplicationManifest::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchApplicationManifestFullPath, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_RemoveApplicationManifest.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_RemoveApplicationManifest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_RemoveApplicationManifest::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_IsApplicationInstalled
#include "Valve/VR/IVRApplications__IsApplicationInstalled.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_IsApplicationInstalled.Invoke
bool Valve::VR::IVRApplications::_IsApplicationInstalled::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsApplicationInstalled::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_IsApplicationInstalled.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_IsApplicationInstalled::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsApplicationInstalled::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_IsApplicationInstalled.EndInvoke
bool Valve::VR::IVRApplications::_IsApplicationInstalled::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsApplicationInstalled::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationCount
#include "Valve/VR/IVRApplications__GetApplicationCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationCount.Invoke
uint Valve::VR::IVRApplications::_GetApplicationCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationCount::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationCount.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationCount::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationCount.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationCount::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationKeyByIndex
#include "Valve/VR/IVRApplications__GetApplicationKeyByIndex.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByIndex.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByIndex::Invoke(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByIndex::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByIndex.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationKeyByIndex::BeginInvoke(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByIndex::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByIndex.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByIndex::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByIndex::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId
#include "Valve/VR/IVRApplications__GetApplicationKeyByProcessId.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::Invoke(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::BeginInvoke(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKeyBuffer, unAppKeyBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationKeyByProcessId.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationKeyByProcessId::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchApplication
#include "Valve/VR/IVRApplications__LaunchApplication.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplication.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplication::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplication::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplication.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchApplication::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplication::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplication.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplication::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplication::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchTemplateApplication
#include "Valve/VR/IVRApplications__LaunchTemplateApplication.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchTemplateApplication.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchTemplateApplication::Invoke(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<Valve::VR::AppOverrideKeys_t>*& pKeys, uint unKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchTemplateApplication::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchTemplateAppKey, pchNewAppKey, pKeys, unKeys)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys, unKeys);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchTemplateApplication.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchTemplateApplication::BeginInvoke(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<Valve::VR::AppOverrideKeys_t>*& pKeys, uint unKeys, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchTemplateApplication::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchTemplateAppKey, pchNewAppKey, pKeys, unKeys, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys, unKeys, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchTemplateApplication.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchTemplateApplication::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchTemplateApplication::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType
#include "Valve/VR/IVRApplications__LaunchApplicationFromMimeType.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::Invoke(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchArgs)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::BeginInvoke(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchArgs, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchMimeType, pchArgs, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchApplicationFromMimeType.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchApplicationFromMimeType::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchDashboardOverlay
#include "Valve/VR/IVRApplications__LaunchDashboardOverlay.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchDashboardOverlay.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchDashboardOverlay::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchDashboardOverlay::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchDashboardOverlay.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchDashboardOverlay::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchDashboardOverlay::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchDashboardOverlay.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchDashboardOverlay::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchDashboardOverlay::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_CancelApplicationLaunch
#include "Valve/VR/IVRApplications__CancelApplicationLaunch.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_CancelApplicationLaunch.Invoke
bool Valve::VR::IVRApplications::_CancelApplicationLaunch::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_CancelApplicationLaunch::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_CancelApplicationLaunch.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_CancelApplicationLaunch::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_CancelApplicationLaunch::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_CancelApplicationLaunch.EndInvoke
bool Valve::VR::IVRApplications::_CancelApplicationLaunch::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_CancelApplicationLaunch::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_IdentifyApplication
#include "Valve/VR/IVRApplications__IdentifyApplication.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_IdentifyApplication.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_IdentifyApplication::Invoke(uint unProcessId, ::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IdentifyApplication::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_IdentifyApplication.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_IdentifyApplication::BeginInvoke(uint unProcessId, ::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IdentifyApplication::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unProcessId, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_IdentifyApplication.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_IdentifyApplication::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IdentifyApplication::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationProcessId
#include "Valve/VR/IVRApplications__GetApplicationProcessId.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationProcessId.Invoke
uint Valve::VR::IVRApplications::_GetApplicationProcessId::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationProcessId::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationProcessId.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationProcessId::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationProcessId::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationProcessId.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationProcessId::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationProcessId::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum
#include "Valve/VR/IVRApplications__GetApplicationsErrorNameFromEnum.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::Invoke(Valve::VR::EVRApplicationError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::BeginInvoke(Valve::VR::EVRApplicationError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationPropertyString
#include "Valve/VR/IVRApplications__GetApplicationPropertyString.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyString.Invoke
uint Valve::VR::IVRApplications::_GetApplicationPropertyString::Invoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyString::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyString.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationPropertyString::BeginInvoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, Valve::VR::EVRApplicationError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyString::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyString.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationPropertyString::EndInvoke(Valve::VR::EVRApplicationError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyString::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationPropertyBool
#include "Valve/VR/IVRApplications__GetApplicationPropertyBool.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyBool.Invoke
bool Valve::VR::IVRApplications::_GetApplicationPropertyBool::Invoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyBool::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, peError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyBool.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationPropertyBool::BeginInvoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyBool::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, eProperty, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyBool.EndInvoke
bool Valve::VR::IVRApplications::_GetApplicationPropertyBool::EndInvoke(Valve::VR::EVRApplicationError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyBool::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationPropertyUint64
#include "Valve/VR/IVRApplications__GetApplicationPropertyUint64.hpp"
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyUint64.Invoke
uint64_t Valve::VR::IVRApplications::_GetApplicationPropertyUint64::Invoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyUint64::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, peError)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyUint64.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationPropertyUint64::BeginInvoke(::Il2CppString* pchAppKey, Valve::VR::EVRApplicationProperty eProperty, Valve::VR::EVRApplicationError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyUint64::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, eProperty, peError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, eProperty, peError, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationPropertyUint64.EndInvoke
uint64_t Valve::VR::IVRApplications::_GetApplicationPropertyUint64::EndInvoke(Valve::VR::EVRApplicationError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationPropertyUint64::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_SetApplicationAutoLaunch
#include "Valve/VR/IVRApplications__SetApplicationAutoLaunch.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_SetApplicationAutoLaunch.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_SetApplicationAutoLaunch::Invoke(::Il2CppString* pchAppKey, bool bAutoLaunch) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_SetApplicationAutoLaunch::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, bAutoLaunch)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, bAutoLaunch);
}
// Autogenerated method: Valve.VR.IVRApplications/_SetApplicationAutoLaunch.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_SetApplicationAutoLaunch::BeginInvoke(::Il2CppString* pchAppKey, bool bAutoLaunch, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_SetApplicationAutoLaunch::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, bAutoLaunch, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, bAutoLaunch, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_SetApplicationAutoLaunch.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_SetApplicationAutoLaunch::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_SetApplicationAutoLaunch::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationAutoLaunch
#include "Valve/VR/IVRApplications__GetApplicationAutoLaunch.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationAutoLaunch.Invoke
bool Valve::VR::IVRApplications::_GetApplicationAutoLaunch::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationAutoLaunch::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationAutoLaunch.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationAutoLaunch::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationAutoLaunch::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationAutoLaunch.EndInvoke
bool Valve::VR::IVRApplications::_GetApplicationAutoLaunch::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationAutoLaunch::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_SetDefaultApplicationForMimeType
#include "Valve/VR/IVRApplications__SetDefaultApplicationForMimeType.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_SetDefaultApplicationForMimeType.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType::Invoke(::Il2CppString* pchAppKey, ::Il2CppString* pchMimeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, pchMimeType)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, pchMimeType);
}
// Autogenerated method: Valve.VR.IVRApplications/_SetDefaultApplicationForMimeType.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType::BeginInvoke(::Il2CppString* pchAppKey, ::Il2CppString* pchMimeType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, pchMimeType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, pchMimeType, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_SetDefaultApplicationForMimeType.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetDefaultApplicationForMimeType
#include "Valve/VR/IVRApplications__GetDefaultApplicationForMimeType.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetDefaultApplicationForMimeType.Invoke
bool Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType::Invoke(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetDefaultApplicationForMimeType.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType::BeginInvoke(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetDefaultApplicationForMimeType.EndInvoke
bool Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationSupportedMimeTypes
#include "Valve/VR/IVRApplications__GetApplicationSupportedMimeTypes.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationSupportedMimeTypes.Invoke
bool Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes::Invoke(::Il2CppString* pchAppKey, System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationSupportedMimeTypes.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes::BeginInvoke(::Il2CppString* pchAppKey, System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationSupportedMimeTypes.EndInvoke
bool Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationsThatSupportMimeType
#include "Valve/VR/IVRApplications__GetApplicationsThatSupportMimeType.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsThatSupportMimeType.Invoke
uint Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType::Invoke(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsThatSupportMimeType.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType::BeginInvoke(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsThatSupportMimeType.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationLaunchArguments
#include "Valve/VR/IVRApplications__GetApplicationLaunchArguments.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationLaunchArguments.Invoke
uint Valve::VR::IVRApplications::_GetApplicationLaunchArguments::Invoke(uint unHandle, System::Text::StringBuilder* pchArgs, uint unArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationLaunchArguments::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unHandle, pchArgs, unArgs)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unHandle, pchArgs, unArgs);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationLaunchArguments.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationLaunchArguments::BeginInvoke(uint unHandle, System::Text::StringBuilder* pchArgs, uint unArgs, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationLaunchArguments::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unHandle, pchArgs, unArgs, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unHandle, pchArgs, unArgs, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationLaunchArguments.EndInvoke
uint Valve::VR::IVRApplications::_GetApplicationLaunchArguments::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationLaunchArguments::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetStartingApplication
#include "Valve/VR/IVRApplications__GetStartingApplication.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetStartingApplication.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetStartingApplication::Invoke(System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetStartingApplication::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetStartingApplication.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetStartingApplication::BeginInvoke(System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetStartingApplication::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKeyBuffer, unAppKeyBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetStartingApplication.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_GetStartingApplication::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetStartingApplication::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetTransitionState
#include "Valve/VR/IVRApplications__GetTransitionState.hpp"
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetTransitionState.Invoke
Valve::VR::EVRApplicationTransitionState Valve::VR::IVRApplications::_GetTransitionState::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetTransitionState::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationTransitionState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetTransitionState.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetTransitionState::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetTransitionState::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetTransitionState.EndInvoke
Valve::VR::EVRApplicationTransitionState Valve::VR::IVRApplications::_GetTransitionState::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetTransitionState::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationTransitionState, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_PerformApplicationPrelaunchCheck
#include "Valve/VR/IVRApplications__PerformApplicationPrelaunchCheck.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_PerformApplicationPrelaunchCheck.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck::Invoke(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: Valve.VR.IVRApplications/_PerformApplicationPrelaunchCheck.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck::BeginInvoke(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_PerformApplicationPrelaunchCheck.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetApplicationsTransitionStateNameFromEnum
#include "Valve/VR/IVRApplications__GetApplicationsTransitionStateNameFromEnum.hpp"
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsTransitionStateNameFromEnum.Invoke
System::IntPtr Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum::Invoke(Valve::VR::EVRApplicationTransitionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, state);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsTransitionStateNameFromEnum.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum::BeginInvoke(Valve::VR::EVRApplicationTransitionState state, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, state, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetApplicationsTransitionStateNameFromEnum.EndInvoke
System::IntPtr Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_IsQuitUserPromptRequested
#include "Valve/VR/IVRApplications__IsQuitUserPromptRequested.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_IsQuitUserPromptRequested.Invoke
bool Valve::VR::IVRApplications::_IsQuitUserPromptRequested::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsQuitUserPromptRequested::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRApplications/_IsQuitUserPromptRequested.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_IsQuitUserPromptRequested::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsQuitUserPromptRequested::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_IsQuitUserPromptRequested.EndInvoke
bool Valve::VR::IVRApplications::_IsQuitUserPromptRequested::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_IsQuitUserPromptRequested::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_LaunchInternalProcess
#include "Valve/VR/IVRApplications__LaunchInternalProcess.hpp"
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_LaunchInternalProcess.Invoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchInternalProcess::Invoke(::Il2CppString* pchBinaryPath, ::Il2CppString* pchArguments, ::Il2CppString* pchWorkingDirectory) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchInternalProcess::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchBinaryPath, pchArguments, pchWorkingDirectory)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, pchBinaryPath, pchArguments, pchWorkingDirectory);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchInternalProcess.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_LaunchInternalProcess::BeginInvoke(::Il2CppString* pchBinaryPath, ::Il2CppString* pchArguments, ::Il2CppString* pchWorkingDirectory, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchInternalProcess::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchBinaryPath, pchArguments, pchWorkingDirectory, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchBinaryPath, pchArguments, pchWorkingDirectory, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_LaunchInternalProcess.EndInvoke
Valve::VR::EVRApplicationError Valve::VR::IVRApplications::_LaunchInternalProcess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_LaunchInternalProcess::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRApplications/_GetCurrentSceneProcessId
#include "Valve/VR/IVRApplications__GetCurrentSceneProcessId.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRApplications/_GetCurrentSceneProcessId.Invoke
uint Valve::VR::IVRApplications::_GetCurrentSceneProcessId::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetCurrentSceneProcessId::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetCurrentSceneProcessId.BeginInvoke
System::IAsyncResult* Valve::VR::IVRApplications::_GetCurrentSceneProcessId::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetCurrentSceneProcessId::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRApplications/_GetCurrentSceneProcessId.EndInvoke
uint Valve::VR::IVRApplications::_GetCurrentSceneProcessId::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRApplications::_GetCurrentSceneProcessId::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_GetCalibrationState
#include "Valve/VR/IVRChaperone__GetCalibrationState.hpp"
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_GetCalibrationState.Invoke
Valve::VR::ChaperoneCalibrationState Valve::VR::IVRChaperone::_GetCalibrationState::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetCalibrationState::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ChaperoneCalibrationState, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetCalibrationState.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_GetCalibrationState::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetCalibrationState::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetCalibrationState.EndInvoke
Valve::VR::ChaperoneCalibrationState Valve::VR::IVRChaperone::_GetCalibrationState::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetCalibrationState::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ChaperoneCalibrationState, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_GetPlayAreaSize
#include "Valve/VR/IVRChaperone__GetPlayAreaSize.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_GetPlayAreaSize.Invoke
bool Valve::VR::IVRChaperone::_GetPlayAreaSize::Invoke(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetPlayAreaSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetPlayAreaSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_GetPlayAreaSize::BeginInvoke(float& pSizeX, float& pSizeZ, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetPlayAreaSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSizeX, pSizeZ, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetPlayAreaSize.EndInvoke
bool Valve::VR::IVRChaperone::_GetPlayAreaSize::EndInvoke(float& pSizeX, float& pSizeZ, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetPlayAreaSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_GetPlayAreaRect
#include "Valve/VR/IVRChaperone__GetPlayAreaRect.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_GetPlayAreaRect.Invoke
bool Valve::VR::IVRChaperone::_GetPlayAreaRect::Invoke(Valve::VR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetPlayAreaRect::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetPlayAreaRect.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_GetPlayAreaRect::BeginInvoke(Valve::VR::HmdQuad_t& rect, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetPlayAreaRect::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, rect, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetPlayAreaRect.EndInvoke
bool Valve::VR::IVRChaperone::_GetPlayAreaRect::EndInvoke(Valve::VR::HmdQuad_t& rect, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetPlayAreaRect::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_ReloadInfo
#include "Valve/VR/IVRChaperone__ReloadInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_ReloadInfo.Invoke
void Valve::VR::IVRChaperone::_ReloadInfo::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_ReloadInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRChaperone/_ReloadInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_ReloadInfo::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_ReloadInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_ReloadInfo.EndInvoke
void Valve::VR::IVRChaperone::_ReloadInfo::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_ReloadInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_SetSceneColor
#include "Valve/VR/IVRChaperone__SetSceneColor.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_SetSceneColor.Invoke
void Valve::VR::IVRChaperone::_SetSceneColor::Invoke(Valve::VR::HmdColor_t color) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_SetSceneColor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: Valve.VR.IVRChaperone/_SetSceneColor.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_SetSceneColor::BeginInvoke(Valve::VR::HmdColor_t color, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_SetSceneColor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(color, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, color, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_SetSceneColor.EndInvoke
void Valve::VR::IVRChaperone::_SetSceneColor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_SetSceneColor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_GetBoundsColor
#include "Valve/VR/IVRChaperone__GetBoundsColor.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_GetBoundsColor.Invoke
void Valve::VR::IVRChaperone::_GetBoundsColor::Invoke(Valve::VR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, Valve::VR::HmdColor_t& pOutputCameraColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetBoundsColor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetBoundsColor.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_GetBoundsColor::BeginInvoke(Valve::VR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, Valve::VR::HmdColor_t& pOutputCameraColor, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetBoundsColor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_GetBoundsColor.EndInvoke
void Valve::VR::IVRChaperone::_GetBoundsColor::EndInvoke(Valve::VR::HmdColor_t& pOutputColorArray, Valve::VR::HmdColor_t& pOutputCameraColor, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_GetBoundsColor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputColorArray, pOutputCameraColor, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputColorArray, pOutputCameraColor, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_AreBoundsVisible
#include "Valve/VR/IVRChaperone__AreBoundsVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_AreBoundsVisible.Invoke
bool Valve::VR::IVRChaperone::_AreBoundsVisible::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_AreBoundsVisible::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRChaperone/_AreBoundsVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_AreBoundsVisible::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_AreBoundsVisible::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_AreBoundsVisible.EndInvoke
bool Valve::VR::IVRChaperone::_AreBoundsVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_AreBoundsVisible::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone/_ForceBoundsVisible
#include "Valve/VR/IVRChaperone__ForceBoundsVisible.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperone/_ForceBoundsVisible.Invoke
void Valve::VR::IVRChaperone::_ForceBoundsVisible::Invoke(bool bForce) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_ForceBoundsVisible::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bForce);
}
// Autogenerated method: Valve.VR.IVRChaperone/_ForceBoundsVisible.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperone::_ForceBoundsVisible::BeginInvoke(bool bForce, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_ForceBoundsVisible::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bForce, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bForce, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperone/_ForceBoundsVisible.EndInvoke
void Valve::VR::IVRChaperone::_ForceBoundsVisible::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperone::_ForceBoundsVisible::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_CommitWorkingCopy
#include "Valve/VR/IVRChaperoneSetup__CommitWorkingCopy.hpp"
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_CommitWorkingCopy.Invoke
bool Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy::Invoke(Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(configFile)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_CommitWorkingCopy.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy::BeginInvoke(Valve::VR::EChaperoneConfigFile configFile, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(configFile, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, configFile, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_CommitWorkingCopy.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_CommitWorkingCopy::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_RevertWorkingCopy
#include "Valve/VR/IVRChaperoneSetup__RevertWorkingCopy.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_RevertWorkingCopy.Invoke
void Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_RevertWorkingCopy.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_RevertWorkingCopy.EndInvoke
void Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_RevertWorkingCopy::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaSize
#include "Valve/VR/IVRChaperoneSetup__GetWorkingPlayAreaSize.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaSize.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize::Invoke(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize::BeginInvoke(float& pSizeX, float& pSizeZ, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSizeX, pSizeZ, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaSize.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize::EndInvoke(float& pSizeX, float& pSizeZ, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pSizeX, pSizeZ, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaRect
#include "Valve/VR/IVRChaperoneSetup__GetWorkingPlayAreaRect.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaRect.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect::Invoke(Valve::VR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaRect.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect::BeginInvoke(Valve::VR::HmdQuad_t& rect, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, rect, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingPlayAreaRect.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect::EndInvoke(Valve::VR::HmdQuad_t& rect, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingPlayAreaRect::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetWorkingCollisionBoundsInfo
#include "Valve/VR/IVRChaperoneSetup__GetWorkingCollisionBoundsInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingCollisionBoundsInfo.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo::Invoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint& punQuadsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, punQuadsCount)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer, punQuadsCount);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingCollisionBoundsInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo::BeginInvoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint& punQuadsCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, punQuadsCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pQuadsBuffer, punQuadsCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingCollisionBoundsInfo.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo::EndInvoke(uint& punQuadsCount, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingCollisionBoundsInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punQuadsCount, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, punQuadsCount, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsInfo
#include "Valve/VR/IVRChaperoneSetup__GetLiveCollisionBoundsInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsInfo.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo::Invoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint& punQuadsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, punQuadsCount)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer, punQuadsCount);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo::BeginInvoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint& punQuadsCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, punQuadsCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pQuadsBuffer, punQuadsCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsInfo.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo::EndInvoke(uint& punQuadsCount, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punQuadsCount, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, punQuadsCount, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetWorkingSeatedZeroPoseToRawTrackingPose
#include "Valve/VR/IVRChaperoneSetup__GetWorkingSeatedZeroPoseToRawTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingSeatedZeroPoseToRawTrackingPose.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose::Invoke(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingSeatedZeroPoseToRawTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose::BeginInvoke(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingSeatedZeroPoseToRawTrackingPose.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose::EndInvoke(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingSeatedZeroPoseToRawTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetWorkingStandingZeroPoseToRawTrackingPose
#include "Valve/VR/IVRChaperoneSetup__GetWorkingStandingZeroPoseToRawTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingStandingZeroPoseToRawTrackingPose.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose::Invoke(Valve::VR::HmdMatrix34_t& pmatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatStandingZeroPoseToRawTrackingPose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingStandingZeroPoseToRawTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose::BeginInvoke(Valve::VR::HmdMatrix34_t& pmatStandingZeroPoseToRawTrackingPose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatStandingZeroPoseToRawTrackingPose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pmatStandingZeroPoseToRawTrackingPose, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetWorkingStandingZeroPoseToRawTrackingPose.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose::EndInvoke(Valve::VR::HmdMatrix34_t& pmatStandingZeroPoseToRawTrackingPose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetWorkingStandingZeroPoseToRawTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatStandingZeroPoseToRawTrackingPose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatStandingZeroPoseToRawTrackingPose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_SetWorkingPlayAreaSize
#include "Valve/VR/IVRChaperoneSetup__SetWorkingPlayAreaSize.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingPlayAreaSize.Invoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize::Invoke(float sizeX, float sizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sizeX, sizeZ)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sizeX, sizeZ);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingPlayAreaSize.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize::BeginInvoke(float sizeX, float sizeZ, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sizeX, sizeZ, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, sizeX, sizeZ, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingPlayAreaSize.EndInvoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingPlayAreaSize::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsInfo
#include "Valve/VR/IVRChaperoneSetup__SetWorkingCollisionBoundsInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsInfo.Invoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo::Invoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint unQuadsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, unQuadsCount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pQuadsBuffer, unQuadsCount);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo::BeginInvoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint unQuadsCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, unQuadsCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pQuadsBuffer, unQuadsCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsInfo.EndInvoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_SetWorkingSeatedZeroPoseToRawTrackingPose
#include "Valve/VR/IVRChaperoneSetup__SetWorkingSeatedZeroPoseToRawTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingSeatedZeroPoseToRawTrackingPose.Invoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose::Invoke(Valve::VR::HmdMatrix34_t& pMatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatSeatedZeroPoseToRawTrackingPose)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingSeatedZeroPoseToRawTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose::BeginInvoke(Valve::VR::HmdMatrix34_t& pMatSeatedZeroPoseToRawTrackingPose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatSeatedZeroPoseToRawTrackingPose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pMatSeatedZeroPoseToRawTrackingPose, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingSeatedZeroPoseToRawTrackingPose.EndInvoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose::EndInvoke(Valve::VR::HmdMatrix34_t& pMatSeatedZeroPoseToRawTrackingPose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingSeatedZeroPoseToRawTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatSeatedZeroPoseToRawTrackingPose, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatSeatedZeroPoseToRawTrackingPose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_SetWorkingStandingZeroPoseToRawTrackingPose
#include "Valve/VR/IVRChaperoneSetup__SetWorkingStandingZeroPoseToRawTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingStandingZeroPoseToRawTrackingPose.Invoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose::Invoke(Valve::VR::HmdMatrix34_t& pMatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatStandingZeroPoseToRawTrackingPose)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingStandingZeroPoseToRawTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose::BeginInvoke(Valve::VR::HmdMatrix34_t& pMatStandingZeroPoseToRawTrackingPose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatStandingZeroPoseToRawTrackingPose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pMatStandingZeroPoseToRawTrackingPose, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingStandingZeroPoseToRawTrackingPose.EndInvoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose::EndInvoke(Valve::VR::HmdMatrix34_t& pMatStandingZeroPoseToRawTrackingPose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingStandingZeroPoseToRawTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pMatStandingZeroPoseToRawTrackingPose, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatStandingZeroPoseToRawTrackingPose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_ReloadFromDisk
#include "Valve/VR/IVRChaperoneSetup__ReloadFromDisk.hpp"
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ReloadFromDisk.Invoke
void Valve::VR::IVRChaperoneSetup::_ReloadFromDisk::Invoke(Valve::VR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ReloadFromDisk::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(configFile)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configFile);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ReloadFromDisk.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_ReloadFromDisk::BeginInvoke(Valve::VR::EChaperoneConfigFile configFile, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ReloadFromDisk::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(configFile, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, configFile, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ReloadFromDisk.EndInvoke
void Valve::VR::IVRChaperoneSetup::_ReloadFromDisk::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ReloadFromDisk::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetLiveSeatedZeroPoseToRawTrackingPose
#include "Valve/VR/IVRChaperoneSetup__GetLiveSeatedZeroPoseToRawTrackingPose.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveSeatedZeroPoseToRawTrackingPose.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose::Invoke(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveSeatedZeroPoseToRawTrackingPose.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose::BeginInvoke(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveSeatedZeroPoseToRawTrackingPose.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose::EndInvoke(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveSeatedZeroPoseToRawTrackingPose::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pmatSeatedZeroPoseToRawTrackingPose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsTagsInfo
#include "Valve/VR/IVRChaperoneSetup__SetWorkingCollisionBoundsTagsInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsTagsInfo.Invoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsTagsInfo::Invoke(::Array<uint8_t>*& pTagsBuffer, uint unTagCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsTagsInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTagsBuffer, unTagCount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTagsBuffer, unTagCount);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsTagsInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsTagsInfo::BeginInvoke(::Array<uint8_t>*& pTagsBuffer, uint unTagCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsTagsInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTagsBuffer, unTagCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pTagsBuffer, unTagCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingCollisionBoundsTagsInfo.EndInvoke
void Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsTagsInfo::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingCollisionBoundsTagsInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsTagsInfo
#include "Valve/VR/IVRChaperoneSetup__GetLiveCollisionBoundsTagsInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsTagsInfo.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsTagsInfo::Invoke(::Array<uint8_t>*& pTagsBuffer, uint& punTagCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsTagsInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTagsBuffer, punTagCount)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTagsBuffer, punTagCount);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsTagsInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsTagsInfo::BeginInvoke(::Array<uint8_t>*& pTagsBuffer, uint& punTagCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsTagsInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTagsBuffer, punTagCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pTagsBuffer, punTagCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLiveCollisionBoundsTagsInfo.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsTagsInfo::EndInvoke(uint& punTagCount, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLiveCollisionBoundsTagsInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punTagCount, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, punTagCount, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_SetWorkingPhysicalBoundsInfo
#include "Valve/VR/IVRChaperoneSetup__SetWorkingPhysicalBoundsInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingPhysicalBoundsInfo.Invoke
bool Valve::VR::IVRChaperoneSetup::_SetWorkingPhysicalBoundsInfo::Invoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint unQuadsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingPhysicalBoundsInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, unQuadsCount)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer, unQuadsCount);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingPhysicalBoundsInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_SetWorkingPhysicalBoundsInfo::BeginInvoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint unQuadsCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingPhysicalBoundsInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, unQuadsCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pQuadsBuffer, unQuadsCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_SetWorkingPhysicalBoundsInfo.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_SetWorkingPhysicalBoundsInfo::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_SetWorkingPhysicalBoundsInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_GetLivePhysicalBoundsInfo
#include "Valve/VR/IVRChaperoneSetup__GetLivePhysicalBoundsInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLivePhysicalBoundsInfo.Invoke
bool Valve::VR::IVRChaperoneSetup::_GetLivePhysicalBoundsInfo::Invoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint& punQuadsCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLivePhysicalBoundsInfo::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, punQuadsCount)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer, punQuadsCount);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLivePhysicalBoundsInfo.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_GetLivePhysicalBoundsInfo::BeginInvoke(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer, uint& punQuadsCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLivePhysicalBoundsInfo::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pQuadsBuffer, punQuadsCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pQuadsBuffer, punQuadsCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_GetLivePhysicalBoundsInfo.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_GetLivePhysicalBoundsInfo::EndInvoke(uint& punQuadsCount, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_GetLivePhysicalBoundsInfo::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(punQuadsCount, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, punQuadsCount, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_ExportLiveToBuffer
#include "Valve/VR/IVRChaperoneSetup__ExportLiveToBuffer.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ExportLiveToBuffer.Invoke
bool Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer::Invoke(System::Text::StringBuilder* pBuffer, uint& pnBufferLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pBuffer, pnBufferLength)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, pnBufferLength);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ExportLiveToBuffer.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer::BeginInvoke(System::Text::StringBuilder* pBuffer, uint& pnBufferLength, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pBuffer, pnBufferLength, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pBuffer, pnBufferLength, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ExportLiveToBuffer.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer::EndInvoke(uint& pnBufferLength, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ExportLiveToBuffer::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnBufferLength, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pnBufferLength, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperoneSetup/_ImportFromBufferToWorking
#include "Valve/VR/IVRChaperoneSetup__ImportFromBufferToWorking.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ImportFromBufferToWorking.Invoke
bool Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking::Invoke(::Il2CppString* pBuffer, uint nImportFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pBuffer, nImportFlags)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, nImportFlags);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ImportFromBufferToWorking.BeginInvoke
System::IAsyncResult* Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking::BeginInvoke(::Il2CppString* pBuffer, uint nImportFlags, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pBuffer, nImportFlags, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pBuffer, nImportFlags, callback, object);
}
// Autogenerated method: Valve.VR.IVRChaperoneSetup/_ImportFromBufferToWorking.EndInvoke
bool Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRChaperoneSetup::_ImportFromBufferToWorking::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SetTrackingSpace
#include "Valve/VR/IVRCompositor__SetTrackingSpace.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SetTrackingSpace.Invoke
void Valve::VR::IVRCompositor::_SetTrackingSpace::Invoke(Valve::VR::ETrackingUniverseOrigin eOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetTrackingSpace::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetTrackingSpace.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_SetTrackingSpace::BeginInvoke(Valve::VR::ETrackingUniverseOrigin eOrigin, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetTrackingSpace::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetTrackingSpace.EndInvoke
void Valve::VR::IVRCompositor::_SetTrackingSpace::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetTrackingSpace::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetTrackingSpace
#include "Valve/VR/IVRCompositor__GetTrackingSpace.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetTrackingSpace.Invoke
Valve::VR::ETrackingUniverseOrigin Valve::VR::IVRCompositor::_GetTrackingSpace::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetTrackingSpace::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackingUniverseOrigin, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetTrackingSpace.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetTrackingSpace::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetTrackingSpace::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetTrackingSpace.EndInvoke
Valve::VR::ETrackingUniverseOrigin Valve::VR::IVRCompositor::_GetTrackingSpace::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetTrackingSpace::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::ETrackingUniverseOrigin, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_WaitGetPoses
#include "Valve/VR/IVRCompositor__WaitGetPoses.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_WaitGetPoses.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_WaitGetPoses::Invoke(::Array<Valve::VR::TrackedDevicePose_t>*& pRenderPoseArray, uint unRenderPoseArrayCount, ::Array<Valve::VR::TrackedDevicePose_t>*& pGamePoseArray, uint unGamePoseArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_WaitGetPoses::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount);
}
// Autogenerated method: Valve.VR.IVRCompositor/_WaitGetPoses.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_WaitGetPoses::BeginInvoke(::Array<Valve::VR::TrackedDevicePose_t>*& pRenderPoseArray, uint unRenderPoseArrayCount, ::Array<Valve::VR::TrackedDevicePose_t>*& pGamePoseArray, uint unGamePoseArrayCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_WaitGetPoses::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_WaitGetPoses.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_WaitGetPoses::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_WaitGetPoses::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetLastPoses
#include "Valve/VR/IVRCompositor__GetLastPoses.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastPoses.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetLastPoses::Invoke(::Array<Valve::VR::TrackedDevicePose_t>*& pRenderPoseArray, uint unRenderPoseArrayCount, ::Array<Valve::VR::TrackedDevicePose_t>*& pGamePoseArray, uint unGamePoseArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastPoses::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastPoses.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetLastPoses::BeginInvoke(::Array<Valve::VR::TrackedDevicePose_t>*& pRenderPoseArray, uint unRenderPoseArrayCount, ::Array<Valve::VR::TrackedDevicePose_t>*& pGamePoseArray, uint unGamePoseArrayCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastPoses::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pRenderPoseArray, unRenderPoseArrayCount, pGamePoseArray, unGamePoseArrayCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastPoses.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetLastPoses::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastPoses::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetLastPoseForTrackedDeviceIndex
#include "Valve/VR/IVRCompositor__GetLastPoseForTrackedDeviceIndex.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastPoseForTrackedDeviceIndex.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetLastPoseForTrackedDeviceIndex::Invoke(uint unDeviceIndex, Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pOutputGamePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastPoseForTrackedDeviceIndex::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pOutputPose, pOutputGamePose)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, unDeviceIndex, pOutputPose, pOutputGamePose);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastPoseForTrackedDeviceIndex.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetLastPoseForTrackedDeviceIndex::BeginInvoke(uint unDeviceIndex, Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pOutputGamePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastPoseForTrackedDeviceIndex::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pOutputPose, pOutputGamePose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, pOutputPose, pOutputGamePose, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetLastPoseForTrackedDeviceIndex.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_GetLastPoseForTrackedDeviceIndex::EndInvoke(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pOutputGamePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetLastPoseForTrackedDeviceIndex::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pOutputGamePose, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pOutputPose, pOutputGamePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_Submit
#include "Valve/VR/IVRCompositor__Submit.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_Submit.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_Submit::Invoke(Valve::VR::EVREye eEye, Valve::VR::Texture_t& pTexture, Valve::VR::VRTextureBounds_t& pBounds, Valve::VR::EVRSubmitFlags nSubmitFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_Submit::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pTexture, pBounds, nSubmitFlags)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, eEye, pTexture, pBounds, nSubmitFlags);
}
// Autogenerated method: Valve.VR.IVRCompositor/_Submit.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_Submit::BeginInvoke(Valve::VR::EVREye eEye, Valve::VR::Texture_t& pTexture, Valve::VR::VRTextureBounds_t& pBounds, Valve::VR::EVRSubmitFlags nSubmitFlags, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_Submit::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pTexture, pBounds, nSubmitFlags, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pTexture, pBounds, nSubmitFlags, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_Submit.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_Submit::EndInvoke(Valve::VR::Texture_t& pTexture, Valve::VR::VRTextureBounds_t& pBounds, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_Submit::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTexture, pBounds, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pTexture, pBounds, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ClearLastSubmittedFrame
#include "Valve/VR/IVRCompositor__ClearLastSubmittedFrame.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ClearLastSubmittedFrame.Invoke
void Valve::VR::IVRCompositor::_ClearLastSubmittedFrame::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ClearLastSubmittedFrame::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ClearLastSubmittedFrame.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ClearLastSubmittedFrame::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ClearLastSubmittedFrame::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ClearLastSubmittedFrame.EndInvoke
void Valve::VR::IVRCompositor::_ClearLastSubmittedFrame::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ClearLastSubmittedFrame::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_PostPresentHandoff
#include "Valve/VR/IVRCompositor__PostPresentHandoff.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_PostPresentHandoff.Invoke
void Valve::VR::IVRCompositor::_PostPresentHandoff::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_PostPresentHandoff::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_PostPresentHandoff.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_PostPresentHandoff::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_PostPresentHandoff::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_PostPresentHandoff.EndInvoke
void Valve::VR::IVRCompositor::_PostPresentHandoff::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_PostPresentHandoff::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetFrameTiming
#include "Valve/VR/IVRCompositor__GetFrameTiming.hpp"
// Including type: Valve.VR.Compositor_FrameTiming
#include "Valve/VR/Compositor_FrameTiming.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTiming.Invoke
bool Valve::VR::IVRCompositor::_GetFrameTiming::Invoke(Valve::VR::Compositor_FrameTiming& pTiming, uint unFramesAgo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTiming::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, unFramesAgo)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTiming, unFramesAgo);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTiming.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetFrameTiming::BeginInvoke(Valve::VR::Compositor_FrameTiming& pTiming, uint unFramesAgo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTiming::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, unFramesAgo, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pTiming, unFramesAgo, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTiming.EndInvoke
bool Valve::VR::IVRCompositor::_GetFrameTiming::EndInvoke(Valve::VR::Compositor_FrameTiming& pTiming, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTiming::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTiming, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetFrameTimings
#include "Valve/VR/IVRCompositor__GetFrameTimings.hpp"
// Including type: Valve.VR.Compositor_FrameTiming
#include "Valve/VR/Compositor_FrameTiming.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTimings.Invoke
uint Valve::VR::IVRCompositor::_GetFrameTimings::Invoke(Valve::VR::Compositor_FrameTiming& pTiming, uint nFrames) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTimings::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, nFrames)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pTiming, nFrames);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTimings.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetFrameTimings::BeginInvoke(Valve::VR::Compositor_FrameTiming& pTiming, uint nFrames, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTimings::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, nFrames, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pTiming, nFrames, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTimings.EndInvoke
uint Valve::VR::IVRCompositor::_GetFrameTimings::EndInvoke(Valve::VR::Compositor_FrameTiming& pTiming, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTimings::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTiming, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pTiming, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetFrameTimeRemaining
#include "Valve/VR/IVRCompositor__GetFrameTimeRemaining.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTimeRemaining.Invoke
float Valve::VR::IVRCompositor::_GetFrameTimeRemaining::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTimeRemaining::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTimeRemaining.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetFrameTimeRemaining::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTimeRemaining::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetFrameTimeRemaining.EndInvoke
float Valve::VR::IVRCompositor::_GetFrameTimeRemaining::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetFrameTimeRemaining::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetCumulativeStats
#include "Valve/VR/IVRCompositor__GetCumulativeStats.hpp"
// Including type: Valve.VR.Compositor_CumulativeStats
#include "Valve/VR/Compositor_CumulativeStats.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetCumulativeStats.Invoke
void Valve::VR::IVRCompositor::_GetCumulativeStats::Invoke(Valve::VR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCumulativeStats::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pStats, nStatsSizeInBytes)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pStats, nStatsSizeInBytes);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCumulativeStats.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetCumulativeStats::BeginInvoke(Valve::VR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCumulativeStats::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pStats, nStatsSizeInBytes, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pStats, nStatsSizeInBytes, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCumulativeStats.EndInvoke
void Valve::VR::IVRCompositor::_GetCumulativeStats::EndInvoke(Valve::VR::Compositor_CumulativeStats& pStats, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCumulativeStats::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pStats, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pStats, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_FadeToColor
#include "Valve/VR/IVRCompositor__FadeToColor.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_FadeToColor.Invoke
void Valve::VR::IVRCompositor::_FadeToColor::Invoke(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_FadeToColor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground);
}
// Autogenerated method: Valve.VR.IVRCompositor/_FadeToColor.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_FadeToColor::BeginInvoke(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_FadeToColor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_FadeToColor.EndInvoke
void Valve::VR::IVRCompositor::_FadeToColor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_FadeToColor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetCurrentFadeColor
#include "Valve/VR/IVRCompositor__GetCurrentFadeColor.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentFadeColor.Invoke
Valve::VR::HmdColor_t Valve::VR::IVRCompositor::_GetCurrentFadeColor::Invoke(bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentFadeColor::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bBackground)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdColor_t, false>(this, ___internal__method, bBackground);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentFadeColor.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetCurrentFadeColor::BeginInvoke(bool bBackground, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentFadeColor::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bBackground, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bBackground, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentFadeColor.EndInvoke
Valve::VR::HmdColor_t Valve::VR::IVRCompositor::_GetCurrentFadeColor::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentFadeColor::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::HmdColor_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_FadeGrid
#include "Valve/VR/IVRCompositor__FadeGrid.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_FadeGrid.Invoke
void Valve::VR::IVRCompositor::_FadeGrid::Invoke(float fSeconds, bool bFadeIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_FadeGrid::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fSeconds, bFadeIn)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, bFadeIn);
}
// Autogenerated method: Valve.VR.IVRCompositor/_FadeGrid.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_FadeGrid::BeginInvoke(float fSeconds, bool bFadeIn, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_FadeGrid::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fSeconds, bFadeIn, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, fSeconds, bFadeIn, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_FadeGrid.EndInvoke
void Valve::VR::IVRCompositor::_FadeGrid::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_FadeGrid::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_GetCurrentGridAlpha
#include "Valve/VR/IVRCompositor__GetCurrentGridAlpha.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentGridAlpha.Invoke
float Valve::VR::IVRCompositor::_GetCurrentGridAlpha::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentGridAlpha::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentGridAlpha.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_GetCurrentGridAlpha::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentGridAlpha::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_GetCurrentGridAlpha.EndInvoke
float Valve::VR::IVRCompositor::_GetCurrentGridAlpha::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_GetCurrentGridAlpha::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_SetSkyboxOverride
#include "Valve/VR/IVRCompositor__SetSkyboxOverride.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_SetSkyboxOverride.Invoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_SetSkyboxOverride::Invoke(::Array<Valve::VR::Texture_t>*& pTextures, uint unTextureCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetSkyboxOverride::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTextures, unTextureCount)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, pTextures, unTextureCount);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetSkyboxOverride.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_SetSkyboxOverride::BeginInvoke(::Array<Valve::VR::Texture_t>*& pTextures, uint unTextureCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetSkyboxOverride::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTextures, unTextureCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pTextures, unTextureCount, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_SetSkyboxOverride.EndInvoke
Valve::VR::EVRCompositorError Valve::VR::IVRCompositor::_SetSkyboxOverride::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetSkyboxOverride::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRCompositorError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_ClearSkyboxOverride
#include "Valve/VR/IVRCompositor__ClearSkyboxOverride.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_ClearSkyboxOverride.Invoke
void Valve::VR::IVRCompositor::_ClearSkyboxOverride::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ClearSkyboxOverride::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ClearSkyboxOverride.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_ClearSkyboxOverride::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ClearSkyboxOverride::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_ClearSkyboxOverride.EndInvoke
void Valve::VR::IVRCompositor::_ClearSkyboxOverride::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_ClearSkyboxOverride::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_CompositorBringToFront
#include "Valve/VR/IVRCompositor__CompositorBringToFront.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorBringToFront.Invoke
void Valve::VR::IVRCompositor::_CompositorBringToFront::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorBringToFront::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorBringToFront.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_CompositorBringToFront::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorBringToFront::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorBringToFront.EndInvoke
void Valve::VR::IVRCompositor::_CompositorBringToFront::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorBringToFront::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor/_CompositorGoToBack
#include "Valve/VR/IVRCompositor__CompositorGoToBack.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorGoToBack.Invoke
void Valve::VR::IVRCompositor::_CompositorGoToBack::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorGoToBack::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorGoToBack.BeginInvoke
System::IAsyncResult* Valve::VR::IVRCompositor::_CompositorGoToBack::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorGoToBack::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: Valve.VR.IVRCompositor/_CompositorGoToBack.EndInvoke
void Valve::VR::IVRCompositor::_CompositorGoToBack::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_CompositorGoToBack::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
